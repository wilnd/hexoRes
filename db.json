{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/Aplayer-Controler.js","path":"js/src/Aplayer-Controler.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/Aplayer-Controler.min.js","path":"js/src/Aplayer-Controler.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/APlayer.min.js","path":"js/src/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1504358334176},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1504358334176},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1504358334176},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1504358334177},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1504358334177},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1504358334177},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1504358334178},{"_id":"themes/next/_config.yml","hash":"bc4c3cf63c439f0d60d7202d037f6a93598dcf0c","modified":1507043725701},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1504358334178},{"_id":"themes/next/.travis.yml","hash":"1a69a0b3ae010b10080069332829205573c64371","modified":1504358334178},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1504358334178},{"_id":"themes/next/README.en.md","hash":"32d6cdfec1447f54aae1d7f1365ce6733dfcec8f","modified":1504358334179},{"_id":"themes/next/README.md","hash":"0876b7c79aea2a15f35d467a1fb2b98a8a16d447","modified":1504358334179},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1504358334178},{"_id":"themes/next/package.json","hash":"193dad6f59a588908fac082cc46fe067dac1b84d","modified":1504358334202},{"_id":"themes/next/bower.json","hash":"7d7938f9da896fe710aa0e9120140e528bf058df","modified":1504358334180},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1504358334180},{"_id":"source/tags/index.md","hash":"129b13ad3df97e0da516f9a24c3227955f56d3b0","modified":1504358334148},{"_id":"source/_posts/Git.md","hash":"74ef7dafe5c11f8462acd863cd6e1dfa828081f6","modified":1504358334146},{"_id":"source/_posts/My-Reponsibility.md","hash":"152f21cfa4ff05326f8b00a6bb99b4a1105719ee","modified":1507043227220},{"_id":"source/_posts/NIO.md","hash":"0d53dc00cc459902b8ae763778c818b6fa23c95b","modified":1507043227222},{"_id":"source/_posts/Mybatis.md","hash":"837e0d3926f2ba8bd63c42b8e81af971f50ee5f4","modified":1504358334147},{"_id":"source/_posts/netty-为什么需要他.md","hash":"a2a813e900e9f9c5c66c38d8c66fd53cc8b741fe","modified":1504627892117},{"_id":"source/_posts/netty-构成.md","hash":"4e4b7d4e5a0eb1f71dc810e17316d2c993f3f0b1","modified":1504628114762},{"_id":"source/_posts/伪异步IO.md","hash":"88de4c8ab0523696294fdabbd82e218473a6d9ba","modified":1507043227223},{"_id":"source/_posts/单例模式.md","hash":"91406eda875284f8c398f233ac32429ceed13495","modified":1507043227224},{"_id":"source/_posts/Tread-Soft-To-You.md","hash":"257b8e52813dc452e3c2aed2b48ee420d1052b8b","modified":1504358334147},{"_id":"source/_posts/同步阻塞式IO.md","hash":"545d51df649fc01f4db2752dc48aef3b17fa261b","modified":1507043227225},{"_id":"source/_posts/常怀敬畏之心-常守慎独之境.md","hash":"b2a5c75102ed25acc0546f22448a8f821fcbd054","modified":1507043227225},{"_id":"source/_posts/忍受痛苦，享受宁静，追寻未来.md","hash":"fef873b7d105018dd20044755ce656d44319cb9c","modified":1507564149410},{"_id":"source/_posts/flume日志多线程下压力测试.md","hash":"9bfcc377abdf1b32bfda6215f44baed26b0e9f79","modified":1506960094407},{"_id":"source/_posts/hadoop-general-1.md","hash":"ff6af6b739dffd69e41afba2f9e4a1e4b9585916","modified":1504358334147},{"_id":"source/_posts/怎么谈恋爱.md","hash":"e4f6fefa9e2c234f0f6a395524b2f8dd06d8cb07","modified":1507043227226},{"_id":"source/_posts/渐进之谋.md","hash":"cd7af73bb1c31628d156068ec62d6de9bea227cc","modified":1507043227226},{"_id":"source/_posts/红楼-蒋勋.md","hash":"96a94527ac38b348616d7fe468c6f25845919535","modified":1507725070392},{"_id":"source/_posts/静坐畅想.md","hash":"81a91e434e959da28c9dcb3bccf7d09ec8d39c94","modified":1506960908848},{"_id":"source/_posts/Hdoop-2-7-3-分布式配置.md","hash":"f736d74c49a8d873c875aa2c43893a0af9a11145","modified":1504358334146},{"_id":"source/_posts/愿你走出半生，归来仍是少年.md","hash":"ae4011060beaca0240479475dd4c97c9d189eb64","modified":1504358334148},{"_id":"source/categories/index.md","hash":"e95ca2dd9dc06f4ac53cd7719040276089877504","modified":1504358334148},{"_id":"source/_posts/Mysql-Date-Type.md","hash":"23de0c0beba228dda5378958b7227bc70abd0097","modified":1504358334147},{"_id":"source/_posts/Hexo部署指南.md","hash":"5b9469187dcb20b0e7c3107729e4c370020c8552","modified":1504358334146},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1504358334176},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"e039a409bdbd2e38d77936556e3b7b080cc1fd7e","modified":1504358334176},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"e9169b65a7e3392c27562f9e11061a3ab76bb600","modified":1504358334177},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1504358334177},{"_id":"themes/next/layout/_layout.swig","hash":"b65d9cafbff3783f1a7bec9281dee460dcd96ca6","modified":1507043975806},{"_id":"themes/next/layout/archive.swig","hash":"383f64deab105724fd5512371963bd9e9aafbffd","modified":1504358334200},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1504358334201},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1504358334202},{"_id":"themes/next/layout/page.swig","hash":"37c874cd720acf0eda8d26e063278f2b6ae8d3a6","modified":1504358334201},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1504358334203},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1504358334201},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1504358334201},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1504358334201},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1504358334202},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1504358334205},{"_id":"themes/next/languages/default.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1504358334180},{"_id":"themes/next/languages/de.yml","hash":"98aa551443b2a61a74b6f2a218635da6d2f6cf57","modified":1504358334180},{"_id":"themes/next/languages/en.yml","hash":"c0b90d66772e79585cd26a81694ad69c16312d6b","modified":1504358334181},{"_id":"themes/next/languages/fr-FR.yml","hash":"a14d051bbec26cfcae358bdcf1acf62a35fb1a45","modified":1504358334181},{"_id":"themes/next/languages/id.yml","hash":"f8b57daac2e50ace9a6d5051b17208af8139c2ae","modified":1504358334181},{"_id":"themes/next/languages/pt-BR.yml","hash":"91584764104ef29293117375fc010b1bdbe9aff6","modified":1504358334182},{"_id":"themes/next/languages/ko.yml","hash":"043951e82997131dd8be40ff2093ef36849ba725","modified":1504358334182},{"_id":"themes/next/languages/ja.yml","hash":"0c99ba4ba7d36c43d002342611d2c656ef498582","modified":1504358334181},{"_id":"themes/next/languages/ru.yml","hash":"98dd9b6ddd88400a7b02cd7e8adb41e7b842bf57","modified":1504358334182},{"_id":"themes/next/languages/pt.yml","hash":"dfd0b8574177346b78cab29db055fbc44ac309dc","modified":1504358334182},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c1255b722fc5fdecf1852c3b592edfea9dbb554c","modified":1507043725702},{"_id":"themes/next/languages/zh-tw.yml","hash":"562141bfe450432131af012baa262a3de79a50bc","modified":1504358334183},{"_id":"themes/next/languages/zh-hk.yml","hash":"e8072846fd43beadbae394e30a49aa5c92a0a53b","modified":1504358334183},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1504358334272},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1504358334273},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1504358334273},{"_id":"themes/next/layout/_custom/myapcontroler.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334184},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334184},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334230},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1504358334183},{"_id":"themes/next/layout/_macro/post.swig","hash":"767e1d5503ecce85f577c8fb673a3503b65484ce","modified":1507043725703},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"d8391d74c560762157a58e8ce8e93ca6c430c2e9","modified":1507043725703},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1504358334185},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1504358334190},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"63c82d93d3a9a55ad1b984d89a0814b87cb09d86","modified":1507041231461},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1504358334190},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1504358334184},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5d5f70deb6074cb4dd0438463e14ccf89213c282","modified":1504358334185},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"53d4f83b2b7fb4387dfc9fe81519abd56fbce4ae","modified":1504358334184},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1504358334191},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1504358334197},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1504358334198},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1504358334197},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1504358334198},{"_id":"themes/next/layout/_partials/comments.swig","hash":"010ef8c42d2e1a95abc60caf757293ca8eb4a68b","modified":1504358334186},{"_id":"themes/next/layout/_partials/footer.swig","hash":"3e71627f4397b10f3b5259e4afa852d49e55704b","modified":1507043725704},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1504358334197},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1504358334187},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1504358334187},{"_id":"themes/next/layout/_partials/head.swig","hash":"1f14d3f494b2dbbcee802fd6f6d1abd5b7e2304c","modified":1504358334186},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1504358334187},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1504358334188},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1504358334203},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1504358334203},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1504358334203},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1504358334204},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1504358334204},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1504358334204},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1504358334205},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1504358334205},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1504358334204},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1504358334198},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1504358334230},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1504358334231},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1504358334231},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1504358334230},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1504358334230},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504358334233},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1504358334233},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1504358334232},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1504358334232},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1504358334232},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1504358334231},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1504358334234},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1504358334229},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1504358334234},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1504358334234},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334191},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334191},{"_id":"themes/next/source/images/favicon.ico","hash":"bdbe42841a880aef6f308006257e5debb0f74106","modified":1504358334233},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334222},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334222},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334222},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334228},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1504358334229},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1504358334191},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1504358334191},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1504358334191},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"576e716893153a855eaf6d136fad7cb6d4065e09","modified":1504358334196},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1504358334195},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1504358334195},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1504358334195},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1504358334196},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1504358334196},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1504358334197},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"9f4ed36c73e890909b8ebbe601fb60e13d048288","modified":1504358334196},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1504358334192},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1504358334193},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1504358334193},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1504358334193},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1504358334193},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1504358334194},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1504358334193},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1504358334193},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1504358334192},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1504358334194},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1504358334194},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1504358334199},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1504358334194},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1504358334200},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1504358334187},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1504358334200},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1504358334200},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1504358334187},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1504358334189},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1504358334188},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1504358334189},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1504358334188},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"fd65b0d38d4a8b8306de815c48caad20b84ba4cb","modified":1504358334189},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1504358334189},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1504358334188},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1504358334238},{"_id":"themes/next/source/js/src/Aplayer-Controler.js","hash":"be1b477db1c9da92d4a3b9f31597c4ea8b19a5fb","modified":1504358334236},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1504358334237},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1504358334238},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1504358334238},{"_id":"themes/next/source/js/src/Aplayer-Controler.min.js","hash":"7fe40536919e2b667be30d29540bb4d98491b744","modified":1504358334237},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1504358334238},{"_id":"themes/next/source/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1504358334239},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1504358334239},{"_id":"themes/next/source/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1504358334239},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1504358334240},{"_id":"themes/next/source/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1504358334240},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1504358334237},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1504358334240},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1504358334244},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1504358334247},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1504358334253},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1504358334253},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1504358334246},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1504358334254},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1504358334253},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1504358334251},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1504358334252},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1504358334259},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1504358334251},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1504358334254},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1504358334261},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1504358334252},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1504358334260},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1504358334261},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1504358334262},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1504358334262},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1504358334261},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1504358334262},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1504358334262},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1504358334261},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1504358334263},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1504358334263},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1504358334264},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1504358334263},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1504358334264},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1504358334265},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1504358334264},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1504358334263},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1504358334264},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1504358334264},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1504358334265},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1504358334265},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1504358334266},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1504358334266},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1504358334270},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1504358334270},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1504358334271},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1504358334272},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1504358334272},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1504358334222},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1504358334221},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"cfee25d790e4f9b7d57f0dc7e2ea9c1649f08f11","modified":1504358334229},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1504358334222},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"6359c84aaa02c90be60b22abe638b737ddd69c9c","modified":1504358334228},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1504358334228},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1504358334221},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d477196c5699c8261b08e993a77ef67054d86166","modified":1504358334229},{"_id":"themes/next/source/js/src/APlayer.min.js","hash":"a308d275df22a22edcc4877c5b2c34a9893d3fb3","modified":1504358334235},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1504358334260},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1504358334199},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1504358334239},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1504358334199},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1504358334243},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1504358334247},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1504358334243},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1504358334242},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1504358334247},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1504358334248},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1504358334248},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1504358334248},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1504358334248},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1504358334251},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1504358334250},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1504358334251},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1504358334254},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1504358334255},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1504358334255},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1504358334252},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d026c8489f66ab6c12ad04bd37f1d5b6f2f3f0d1","modified":1504358334206},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1504358334206},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1504358334253},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1504358334269},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1504358334269},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1504358334206},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1504358334206},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1504358334206},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1504358334216},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1504358334210},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1504358334221},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"a9c6355d6516af2e13254ec89e33e5b7dcf8ceb4","modified":1504358334220},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1504358334220},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"86b6fd7f1b1be3ae98f8af6b23a6b1299c670ce9","modified":1504358334220},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1504358334223},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1504358334221},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1504358334223},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"f2030fa436c47791d1a42358cc0ef6f9809f212c","modified":1504358334220},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1504358334224},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1504358334223},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1504358334221},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1504358334225},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1504358334225},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1504358334225},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1504358334226},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1504358334226},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1504358334224},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1504358334224},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"bc8c388553bbcf95897459a466ba35bffd5ec5f0","modified":1504358334223},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1504358334227},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1504358334227},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1504358334228},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1504358334227},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"0af5a9322156c4c21d3c7d38f5ee48de5286f523","modified":1504358334227},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1504358334224},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"f00d0a9ff02f6814011e0b613a2d9020911b5c58","modified":1504358334228},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1504358334243},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1504358334259},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1504358334259},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1504358334271},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1504358334241},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1504358334241},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1504358334242},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1504358334241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1504358334249},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1504358334249},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1504358334249},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1504358334249},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1504358334250},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1504358334250},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1504358334255},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1504358334257},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1504358334258},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1504358334208},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1504358334207},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1504358334207},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1504358334207},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1504358334208},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1504358334208},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1504358334209},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1504358334210},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1504358334209},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1504358334209},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1504358334209},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1504358334214},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1504358334208},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"65a64d5662637b66e2f039a5f58217afe7a6e800","modified":1504358334214},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1504358334207},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1504358334214},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1504358334214},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1504358334210},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1504358334214},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1504358334215},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1504358334210},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1504358334215},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1504358334215},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1504358334215},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1504358334211},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1504358334212},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1504358334211},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1504358334211},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1504358334212},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"57d2c8a060f5e4e1a0aef9aae11a0016cf7ac5ba","modified":1507043975807},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1504358334211},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1504358334212},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1504358334212},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1504358334213},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1504358334212},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ee554b1031ef0070a5916477939021800e3c9d27","modified":1504358334212},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1504358334213},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e6680feea343cecbdde8d643c777d689742abc28","modified":1504358334213},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1504358334213},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"aeff0e6e23725e8baea27c890ccbbf466024f767","modified":1504358334219},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1504358334218},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1504358334218},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1504358334219},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1504358334219},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1504358334218},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1504358334218},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1504358334216},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1504358334217},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1504358334219},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1504358334216},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1504358334217},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1504358334217},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1504358334216},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1504358334217},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"45df0cf4c97b47e05573bcd41028ee50f3fdf432","modified":1504358334217},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1504358334217},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1504358334225},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1504358334226},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1504358334225},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1504358334246},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1504358334268},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1504358334258},{"_id":"public/tags/index.html","hash":"a99169f47ce153d39e361aed774edd7585dc1875","modified":1507725125650},{"_id":"public/categories/index.html","hash":"cb7f5d012d208b6253cb973ff8cd99a493681ec5","modified":1507725125650},{"_id":"public/2017/10/11/红楼-蒋勋/index.html","hash":"f4985abf77b9b5144540f7d74b85b4c84d5bbf3b","modified":1507725125651},{"_id":"public/2017/10/09/忍受痛苦，享受宁静，追寻未来/index.html","hash":"4451364a3725facb00ed68692c9c88f7178b35a5","modified":1507725125651},{"_id":"public/2017/10/03/怎么谈恋爱/index.html","hash":"4417f3d3b8e621156bbe0795cce266e65c10c7d2","modified":1507725125651},{"_id":"public/2017/10/03/渐进之谋/index.html","hash":"2ea44256976e79f52d395f424665b6d083a0ef7f","modified":1507725125651},{"_id":"public/2017/10/03/常怀敬畏之心-常守慎独之境/index.html","hash":"6dd2f028ac995fad1d2a61e2b65d98bc001758f0","modified":1507725125651},{"_id":"public/2017/10/02/NIO/index.html","hash":"596195fc76f73f2381ad82fd22303b6818ffdf7e","modified":1507725125651},{"_id":"public/2017/10/02/同步阻塞式IO/index.html","hash":"ea58919383e40f59bad6fc3ad246e1cccb3a9f8a","modified":1507725125651},{"_id":"public/2017/10/02/伪异步IO/index.html","hash":"a041e424be5129c2203fcfb8795300f15cf4b9cf","modified":1507725125651},{"_id":"public/2017/10/02/单例模式/index.html","hash":"e9a161a43f9ff704105462606afd6fa457cc63cf","modified":1507725125651},{"_id":"public/2017/09/11/flume日志多线程下压力测试/index.html","hash":"df2b8b00a7ce6fc5d1baf5a7ef29108d8983218c","modified":1507725125651},{"_id":"public/2017/09/07/My-Reponsibility/index.html","hash":"46713ea72d88343380abd1ac75389e2a2bff66ea","modified":1507725125651},{"_id":"public/2017/09/05/netty-构成/index.html","hash":"7ef3efdc39c4aad70d4a30862a7d134cd5fd1299","modified":1507725125651},{"_id":"public/2017/09/05/netty-为什么需要他/index.html","hash":"c816f28762998d2fd92e4feab8631593ab58e997","modified":1507725125651},{"_id":"public/2017/09/03/静坐畅想/index.html","hash":"6e7887185407930351299e841394cfbc9b1825ef","modified":1507725125652},{"_id":"public/2017/09/01/Tread-Soft-To-You/index.html","hash":"790e67328b743cdafbba3827a1405ee3cea71f18","modified":1507725125652},{"_id":"public/2017/09/01/hadoop-general-1/index.html","hash":"f3a877dc8f47fc5a0145f55e731313d0dbc5ad66","modified":1507725125652},{"_id":"public/2017/09/01/Git/index.html","hash":"2dc014a03801757db4433bc63f63483f44b2ba6d","modified":1507725125652},{"_id":"public/2017/08/29/Hdoop-2-7-3-分布式配置/index.html","hash":"4c79b82b6493233267568aa9423d23f49d75e04e","modified":1507725125652},{"_id":"public/2017/08/29/Mysql-Date-Type/index.html","hash":"b2b99417196b6da5350e311c38e2c23e07e13808","modified":1507725125652},{"_id":"public/2017/08/26/Mybatis/index.html","hash":"25e637d8415ec746d578b17e770a1d4112aacab4","modified":1507725125652},{"_id":"public/2017/08/18/Hexo部署指南/index.html","hash":"d9ca17f41e81f6d730dae70043ef14897df07991","modified":1507725125652},{"_id":"public/2017/08/17/愿你走出半生，归来仍是少年/index.html","hash":"b56721854cbbbfda7e14857f6c477b6ed49ce48a","modified":1507725125652},{"_id":"public/archives/index.html","hash":"eda244d7dd9b6a14dbbd3a8b9270ab1fca93b4f3","modified":1507725125653},{"_id":"public/archives/page/2/index.html","hash":"3713f13c7c39f4310844e23d1b62c72ae598bc5e","modified":1507725125653},{"_id":"public/archives/page/3/index.html","hash":"3df2b8a9d5c39449326b9670e931e256f844e049","modified":1507725125653},{"_id":"public/archives/2017/index.html","hash":"cd22c28778d9a65a55408712db9314e58794380a","modified":1507725125653},{"_id":"public/archives/2017/page/2/index.html","hash":"ca7f25955c4bc42439910ea8c12ff8cac3455687","modified":1507725125653},{"_id":"public/archives/2017/page/3/index.html","hash":"098a5a1ef17828f4203f203961c71240f84cc242","modified":1507725125653},{"_id":"public/archives/2017/08/index.html","hash":"90fe6235162cd79981c1c5741f2e2aeff2bb4e06","modified":1507725125653},{"_id":"public/archives/2017/09/index.html","hash":"97e13753049304c758b62b1e29a8f8032a5c836a","modified":1507725125653},{"_id":"public/archives/2017/10/index.html","hash":"a41fd0b67e077972a76f57caad72c30503ef8b90","modified":1507725125653},{"_id":"public/index.html","hash":"21e79fbb1b3bb7f323878c30733fcb5c8da72c92","modified":1507725125653},{"_id":"public/page/2/index.html","hash":"63e5efcbc4536f3f2239313e1bcadf7743325c3d","modified":1507725125653},{"_id":"public/page/3/index.html","hash":"b9f190878dea997085c5d1efdee8ae52bb5ccd04","modified":1507725125653},{"_id":"public/categories/tool/index.html","hash":"ce4569d3983d817a0354e23c1ce143cdf771c25e","modified":1507725125653},{"_id":"public/categories/javaWeb/index.html","hash":"871d8df669908ca8e241d9d3515d8f2cf0149d99","modified":1507725125653},{"_id":"public/categories/Netty/index.html","hash":"7743c131f91fcd1eec31231aa5e205b685601cc7","modified":1507725125653},{"_id":"public/categories/设计模式/index.html","hash":"e7bc98cce5c95974229e2bf5a4d16d386acce332","modified":1507725125653},{"_id":"public/categories/随笔集/index.html","hash":"7d8c3c0ad5926035d06fbe6fcb021a6c9eb854ac","modified":1507725125653},{"_id":"public/categories/修炼/index.html","hash":"70a7f2145f24929500c1a6ceef11f8873a4e2da9","modified":1507725125653},{"_id":"public/categories/hadoop/index.html","hash":"d11b832015f314ffad9a0b5136d88cfa9bf4e0c9","modified":1507725125653},{"_id":"public/categories/美文/index.html","hash":"02efee0a4af55c439ecba80d1e231c2869ab10d4","modified":1507725125653},{"_id":"public/categories/博客搭建/index.html","hash":"c241ce68db1f3286d2bee581a650cce0a924d752","modified":1507725125654},{"_id":"public/tags/tool/index.html","hash":"e477c07d75432b18f45799421e6bf81149f01958","modified":1507725125654},{"_id":"public/tags/javaWeb/index.html","hash":"72eefe8e1fad56da6901f12ec2faf108cde0df46","modified":1507725125654},{"_id":"public/tags/通信/index.html","hash":"35481a0a427d1c71a1f9004e2e288480f849a302","modified":1507725125654},{"_id":"public/tags/设计模式/index.html","hash":"ee5df4f417591da4f398c945be0ec126b994ae8a","modified":1507725125654},{"_id":"public/tags/随笔集/index.html","hash":"1cde1988710f50ece3e04e0a9321cdbb9586014b","modified":1507725125654},{"_id":"public/tags/修炼/index.html","hash":"be55e5bd7b03d8b2cd88dd3781e6cbb94616f609","modified":1507725125654},{"_id":"public/tags/hadoop/index.html","hash":"d332280ab40bd860c620b7aa4a1d476560c28ebf","modified":1507725125654},{"_id":"public/tags/美文/index.html","hash":"38926929ccc515f5dbd3d3effeb1e98dc6c4d373","modified":1507725125654},{"_id":"public/tags/博客搭建/index.html","hash":"d251b55df1987164928c04ddaad6d46d6d6de195","modified":1507725125654},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1507725125714},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1507725125714},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1507725125714},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1507725125714},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1507725125714},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1507725125714},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1507725125714},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1507725125714},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1507725125714},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1507725125714},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1507725125714},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1507725125715},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1507725125715},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1507725125715},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1507725125715},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1507725125715},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1507725125715},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1507725125715},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1507725125715},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1507725125715},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1507725125715},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1507725125715},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1507725125715},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1507725125715},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1507725125715},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1507725125715},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1507725125715},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1507725125715},{"_id":"public/images/favicon.ico","hash":"bdbe42841a880aef6f308006257e5debb0f74106","modified":1507725126460},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1507725126470},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1507725126488},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1507725126497},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1507725126497},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1507725126497},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1507725126497},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1507725126497},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1507725126497},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1507725126497},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1507725126497},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1507725126497},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1507725126497},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1507725126497},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1507725126497},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1507725126497},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1507725126497},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1507725126497},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1507725126497},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1507725126497},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1507725126497},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1507725126497},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1507725126497},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1507725126497},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1507725126498},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1507725126498},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1507725126498},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1507725126498},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1507725126498},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1507725126498},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1507725126498},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1507725126498},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1507725126498},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1507725126498},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1507725126498},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1507725126498},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1507725126498},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1507725126498},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1507725126498},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1507725126498},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1507725126499},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1507725126499},{"_id":"public/css/main.css","hash":"f0008cb53bc37b1658a3f41d857e47e48d1fe4f5","modified":1507725126499},{"_id":"public/js/src/Aplayer-Controler.js","hash":"be1b477db1c9da92d4a3b9f31597c4ea8b19a5fb","modified":1507725126499},{"_id":"public/js/src/Aplayer-Controler.min.js","hash":"7fe40536919e2b667be30d29540bb4d98491b744","modified":1507725126499},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1507725126499},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1507725126499},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1507725126499},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1507725126499},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1507725126499},{"_id":"public/js/src/APlayer.min.js","hash":"a308d275df22a22edcc4877c5b2c34a9893d3fb3","modified":1507725126499},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1507725126499},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1507725126499},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1507725126499},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1507725126500},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1507725126500},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1507725126500},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1507725126500},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1507725126500},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1507725126500},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1507725126500},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1507725126500},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1507725126500},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1507725126500},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1507725126500},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1507725126500},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1507725126500},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1507725126512}],"Category":[{"name":"tool","_id":"cj8n0lxcj000510qsclfobfvn"},{"name":"javaWeb","_id":"cj8n0lxcx000a10qs08w27lpz"},{"name":"Netty","_id":"cj8n0lxd2000g10qsoa0187uv"},{"name":"设计模式","_id":"cj8n0lxdo001610qsf171mqut"},{"name":"随笔集","_id":"cj8n0lxdv001c10qsjtwurasu"},{"name":"修炼","_id":"cj8n0lxe4001j10qstz5erj4s"},{"name":"hadoop","_id":"cj8n0lxe8001p10qs13p9d459"},{"name":"美文","_id":"cj8n0lxem002e10qsvmfcoxzr"},{"name":"博客搭建","_id":"cj8n0lxep002j10qseqpcek8h"}],"Data":[],"Page":[{"title":"tags","date":"2017-08-17T18:05:36.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-18 02:05:36\ntype: \"tags\"\n---\n","updated":"2017-09-02T13:18:54.148Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj8n0lxca000110qsrmiib4fz","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-08-17T18:06:47.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-08-18 02:06:47\ntype: \"categories\"\n---\n","updated":"2017-09-02T13:18:54.148Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj8n0lxcf000310qszv8dczc7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"My Reponsibility","date":"2017-09-07T15:18:43.000Z","_content":"","source":"_posts/My-Reponsibility.md","raw":"---\ntitle: My Reponsibility\ndate: 2017-09-07 23:18:43\ntags:\n---\n","slug":"My-Reponsibility","published":1,"updated":"2017-10-03T15:07:07.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxc5000010qs427uz44v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Git","date":"2017-09-01T15:05:03.000Z","_content":">### 介绍\n#### 将本地目录初始化为Git仓库\n·git init· \n#### 提交修改\n·git add .·\n提交您在本地存储库中上上传的文件\n·git commit -m '备注'·\n配置要上传的仓库地址url\n·git remote add origin 'https://github.com/wilnd/hexoRes.git'·\n将本地存储库中的更改推送到GitHub\n` git push origin master`\n>### 1. Git Bash \n工作目录、暂存目录(也叫做索引)和仓库之间复制文件\n    [图解](http://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n    \n>### 2.Git GUI --- Source Tree [教程](http://www.jianshu.com/p/5e1a76535221)","source":"_posts/Git.md","raw":"---\ntitle: Git\ndate: 2017-09-01 23:05:03\ntags: tool\ncategories: tool\n---\n>### 介绍\n#### 将本地目录初始化为Git仓库\n·git init· \n#### 提交修改\n·git add .·\n提交您在本地存储库中上上传的文件\n·git commit -m '备注'·\n配置要上传的仓库地址url\n·git remote add origin 'https://github.com/wilnd/hexoRes.git'·\n将本地存储库中的更改推送到GitHub\n` git push origin master`\n>### 1. Git Bash \n工作目录、暂存目录(也叫做索引)和仓库之间复制文件\n    [图解](http://marklodato.github.io/visual-git-guide/index-zh-cn.html)\n    \n>### 2.Git GUI --- Source Tree [教程](http://www.jianshu.com/p/5e1a76535221)","slug":"Git","published":1,"updated":"2017-09-02T13:18:54.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxcc000210qsfukg36rz","content":"<blockquote>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><h4 id=\"将本地目录初始化为Git仓库\"><a href=\"#将本地目录初始化为Git仓库\" class=\"headerlink\" title=\"将本地目录初始化为Git仓库\"></a>将本地目录初始化为Git仓库</h4><p>·git init· </p>\n<h4 id=\"提交修改\"><a href=\"#提交修改\" class=\"headerlink\" title=\"提交修改\"></a>提交修改</h4><p>·git add .·<br>提交您在本地存储库中上上传的文件<br>·git commit -m ‘备注’·<br>配置要上传的仓库地址url<br>·git remote add origin ‘<a href=\"https://github.com/wilnd/hexoRes.git&#39;·\" target=\"_blank\" rel=\"external\">https://github.com/wilnd/hexoRes.git&#39;·</a><br>将本地存储库中的更改推送到GitHub<br><code>git push origin master</code></p>\n<h3 id=\"1-Git-Bash\"><a href=\"#1-Git-Bash\" class=\"headerlink\" title=\"1. Git Bash\"></a>1. Git Bash</h3><p>工作目录、暂存目录(也叫做索引)和仓库之间复制文件<br>    <a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"external\">图解</a></p>\n<h3 id=\"2-Git-GUI-—-Source-Tree-教程\"><a href=\"#2-Git-GUI-—-Source-Tree-教程\" class=\"headerlink\" title=\"2.Git GUI — Source Tree 教程\"></a>2.Git GUI — Source Tree <a href=\"http://www.jianshu.com/p/5e1a76535221\" target=\"_blank\" rel=\"external\">教程</a></h3></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><h4 id=\"将本地目录初始化为Git仓库\"><a href=\"#将本地目录初始化为Git仓库\" class=\"headerlink\" title=\"将本地目录初始化为Git仓库\"></a>将本地目录初始化为Git仓库</h4><p>·git init· </p>\n<h4 id=\"提交修改\"><a href=\"#提交修改\" class=\"headerlink\" title=\"提交修改\"></a>提交修改</h4><p>·git add .·<br>提交您在本地存储库中上上传的文件<br>·git commit -m ‘备注’·<br>配置要上传的仓库地址url<br>·git remote add origin ‘<a href=\"https://github.com/wilnd/hexoRes.git&#39;·\" target=\"_blank\" rel=\"external\">https://github.com/wilnd/hexoRes.git&#39;·</a><br>将本地存储库中的更改推送到GitHub<br><code>git push origin master</code></p>\n<h3 id=\"1-Git-Bash\"><a href=\"#1-Git-Bash\" class=\"headerlink\" title=\"1. Git Bash\"></a>1. Git Bash</h3><p>工作目录、暂存目录(也叫做索引)和仓库之间复制文件<br>    <a href=\"http://marklodato.github.io/visual-git-guide/index-zh-cn.html\" target=\"_blank\" rel=\"external\">图解</a></p>\n<h3 id=\"2-Git-GUI-—-Source-Tree-教程\"><a href=\"#2-Git-GUI-—-Source-Tree-教程\" class=\"headerlink\" title=\"2.Git GUI — Source Tree 教程\"></a>2.Git GUI — Source Tree <a href=\"http://www.jianshu.com/p/5e1a76535221\" target=\"_blank\" rel=\"external\">教程</a></h3></blockquote>\n"},{"title":"netty-为什么需要他","date":"2017-09-05T15:54:07.000Z","_content":">为什么用netty？\n\n###### 我们总会有这样的需求，以较低的成本交付来换取更大的<font color=\"#FF0000\">吞吐量</font>和<font color=\"#FF0000\">可用性</font>。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的 API 不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：<font color=\"#FF0000\">通过抽象来隐藏背后的复杂性</font>。\n目前netty实现了的协议就有 FTP, SMTP, HTTP, WebSocket 和 SPDY 以及其他二进制和基于文本的协议。\n\n下面展示了 Netty 技术和方法的特\n- 设计\n - 针对多种传输类型的统一接口 - 阻塞和非阻塞\n - 简单但更强大的线程模型\n - 真正的无连接的数据报套接字支持\n - 链接逻辑支持复用\n- 易用性\n - 大量的 Javadoc 和 代码实例\n - 除了在 JDK 1.6 + 额外的限制。（一些特征是只支持在Java 1.7 +。可选的功能可能有额外的限制。）\n- 性能\n - 比核心 Java API 更好的吞吐量，较低的延时\n - 资源消耗更少，这个得益于共享池和重用\n - 减少内存拷贝\n- 健壮性\n - 消除由于慢，快，或重载连接产生的 OutOfMemoryError\n - 消除经常发现在 NIO 在高速网络中的应用中的不公平的读/写比\n- 安全\n - 完整的 SSL / TLS 和 StartTLS 的支持\n - 运行在受限的环境例如 Applet 或 OSGI\n- 社区\n - 发布的更早和更频繁\n - 社区驱动\n- 异步和事件驱动\n - 异步，即非同步事件，当然是跟你日常生活的类似。例如，您可以发送电子邮件；可能得到或者得不到任何回应，或者当你发送一个您可能会收到一个消息。\n>#### Netty 资料[Netty start](//waylau.gitbooks.io/netty-4-user-guide/Preface/The%20Solution.html)   [Netty 实战(精髓)](https://waylau.gitbooks.io/essential-netty-in-action/GETTING%20STARTED/Introducing%20Netty.html)\n\n>#### BIO 阻塞式IO\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj92asb8scj30fx0acta4.jpg)\n\n```\nServerSocket serverSocket = new ServerSocket(portNumber);//1\nSocket clientSocket = serverSocket.accept();             //2\nBufferedReader in = new BufferedReader(                     //3\n        new InputStreamReader(clientSocket.getInputStream()));\nPrintWriter out =\n        new PrintWriter(clientSocket.getOutputStream(), true);\nString request, response;\nwhile ((request = in.readLine()) != null) {                 //4\n    if (\"Done\".equals(request)) {                         //5\n        break;\n    }\n}\nresponse = processRequest(request);                        //6\nout.println(response);                                    //7\n}            \n```\n1. ServerSocket 创建并监听端口的连接请求\n2. accept() 调用阻塞，直到一个连接被建立了。返回一个新的 Socket 用来处理 客户端和服务端的交互\n3. 流被创建用于处理 socket 的输入和输出数据。BufferedReader 读取从字符输入流里面的本文。PrintWriter 打印格式化展示的对象读到本文输出流\n4. 处理循环开始 readLine() 阻塞，读取字符串直到最后是换行或者输入终止。\n5. 如果客户端发送的是“Done”处理循环退出\n6. 执行方法处理请求，返回服务器的响应\n7. 响应发回客户端\n8. 处理循环继续\n##### 点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的 Thread 给每个新的客户端 Socket(当然需要更多的代码)。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\n>NIO 非阻塞式IO\n\n#### SELECTOR是 Java 的无阻塞 I/O 实现的关键\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj92cpeip8j30fw0dj401.jpg)\n#### 分析：Selector 最终决定哪一组注册的 socket 准备执行 I/O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比 阻塞 I/O 模型 更好的资源使用，因为\n- 可以用较少的线程处理更多连接，这意味着更少的开销在内存和上下文切换上\n- 当没有 I/O 处理时，线程可以被重定向到其他任务上。\n#### 实现可靠和可扩展的 event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家 <font color=\"#FF0000\">Netty</font> 。","source":"_posts/netty-为什么需要他.md","raw":"---\ntitle: netty-为什么需要他\ndate: 2017-09-05 23:54:07\ntags: javaWeb\ncategories: javaWeb\n---\n>为什么用netty？\n\n###### 我们总会有这样的需求，以较低的成本交付来换取更大的<font color=\"#FF0000\">吞吐量</font>和<font color=\"#FF0000\">可用性</font>。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的 API 不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：<font color=\"#FF0000\">通过抽象来隐藏背后的复杂性</font>。\n目前netty实现了的协议就有 FTP, SMTP, HTTP, WebSocket 和 SPDY 以及其他二进制和基于文本的协议。\n\n下面展示了 Netty 技术和方法的特\n- 设计\n - 针对多种传输类型的统一接口 - 阻塞和非阻塞\n - 简单但更强大的线程模型\n - 真正的无连接的数据报套接字支持\n - 链接逻辑支持复用\n- 易用性\n - 大量的 Javadoc 和 代码实例\n - 除了在 JDK 1.6 + 额外的限制。（一些特征是只支持在Java 1.7 +。可选的功能可能有额外的限制。）\n- 性能\n - 比核心 Java API 更好的吞吐量，较低的延时\n - 资源消耗更少，这个得益于共享池和重用\n - 减少内存拷贝\n- 健壮性\n - 消除由于慢，快，或重载连接产生的 OutOfMemoryError\n - 消除经常发现在 NIO 在高速网络中的应用中的不公平的读/写比\n- 安全\n - 完整的 SSL / TLS 和 StartTLS 的支持\n - 运行在受限的环境例如 Applet 或 OSGI\n- 社区\n - 发布的更早和更频繁\n - 社区驱动\n- 异步和事件驱动\n - 异步，即非同步事件，当然是跟你日常生活的类似。例如，您可以发送电子邮件；可能得到或者得不到任何回应，或者当你发送一个您可能会收到一个消息。\n>#### Netty 资料[Netty start](//waylau.gitbooks.io/netty-4-user-guide/Preface/The%20Solution.html)   [Netty 实战(精髓)](https://waylau.gitbooks.io/essential-netty-in-action/GETTING%20STARTED/Introducing%20Netty.html)\n\n>#### BIO 阻塞式IO\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj92asb8scj30fx0acta4.jpg)\n\n```\nServerSocket serverSocket = new ServerSocket(portNumber);//1\nSocket clientSocket = serverSocket.accept();             //2\nBufferedReader in = new BufferedReader(                     //3\n        new InputStreamReader(clientSocket.getInputStream()));\nPrintWriter out =\n        new PrintWriter(clientSocket.getOutputStream(), true);\nString request, response;\nwhile ((request = in.readLine()) != null) {                 //4\n    if (\"Done\".equals(request)) {                         //5\n        break;\n    }\n}\nresponse = processRequest(request);                        //6\nout.println(response);                                    //7\n}            \n```\n1. ServerSocket 创建并监听端口的连接请求\n2. accept() 调用阻塞，直到一个连接被建立了。返回一个新的 Socket 用来处理 客户端和服务端的交互\n3. 流被创建用于处理 socket 的输入和输出数据。BufferedReader 读取从字符输入流里面的本文。PrintWriter 打印格式化展示的对象读到本文输出流\n4. 处理循环开始 readLine() 阻塞，读取字符串直到最后是换行或者输入终止。\n5. 如果客户端发送的是“Done”处理循环退出\n6. 执行方法处理请求，返回服务器的响应\n7. 响应发回客户端\n8. 处理循环继续\n##### 点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的 Thread 给每个新的客户端 Socket(当然需要更多的代码)。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\n>NIO 非阻塞式IO\n\n#### SELECTOR是 Java 的无阻塞 I/O 实现的关键\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj92cpeip8j30fw0dj401.jpg)\n#### 分析：Selector 最终决定哪一组注册的 socket 准备执行 I/O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比 阻塞 I/O 模型 更好的资源使用，因为\n- 可以用较少的线程处理更多连接，这意味着更少的开销在内存和上下文切换上\n- 当没有 I/O 处理时，线程可以被重定向到其他任务上。\n#### 实现可靠和可扩展的 event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家 <font color=\"#FF0000\">Netty</font> 。","slug":"netty-为什么需要他","published":1,"updated":"2017-09-05T16:11:32.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxcg000410qszkf1mn6b","content":"<blockquote>\n<p>为什么用netty？</p>\n</blockquote>\n<h6 id=\"我们总会有这样的需求，以较低的成本交付来换取更大的吞吐量和可用性。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的-API-不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：通过抽象来隐藏背后的复杂性。\"><a href=\"#我们总会有这样的需求，以较低的成本交付来换取更大的吞吐量和可用性。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的-API-不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：通过抽象来隐藏背后的复杂性。\" class=\"headerlink\" title=\"我们总会有这样的需求，以较低的成本交付来换取更大的吞吐量和可用性。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的 API 不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：通过抽象来隐藏背后的复杂性。\"></a>我们总会有这样的需求，以较低的成本交付来换取更大的<font color=\"#FF0000\">吞吐量</font>和<font color=\"#FF0000\">可用性</font>。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的 API 不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：<font color=\"#FF0000\">通过抽象来隐藏背后的复杂性</font>。</h6><p>目前netty实现了的协议就有 FTP, SMTP, HTTP, WebSocket 和 SPDY 以及其他二进制和基于文本的协议。</p>\n<p>下面展示了 Netty 技术和方法的特</p>\n<ul>\n<li>设计<ul>\n<li>针对多种传输类型的统一接口 - 阻塞和非阻塞</li>\n<li>简单但更强大的线程模型</li>\n<li>真正的无连接的数据报套接字支持</li>\n<li>链接逻辑支持复用</li>\n</ul>\n</li>\n<li>易用性<ul>\n<li>大量的 Javadoc 和 代码实例</li>\n<li>除了在 JDK 1.6 + 额外的限制。（一些特征是只支持在Java 1.7 +。可选的功能可能有额外的限制。）</li>\n</ul>\n</li>\n<li>性能<ul>\n<li>比核心 Java API 更好的吞吐量，较低的延时</li>\n<li>资源消耗更少，这个得益于共享池和重用</li>\n<li>减少内存拷贝</li>\n</ul>\n</li>\n<li>健壮性<ul>\n<li>消除由于慢，快，或重载连接产生的 OutOfMemoryError</li>\n<li>消除经常发现在 NIO 在高速网络中的应用中的不公平的读/写比</li>\n</ul>\n</li>\n<li>安全<ul>\n<li>完整的 SSL / TLS 和 StartTLS 的支持</li>\n<li>运行在受限的环境例如 Applet 或 OSGI</li>\n</ul>\n</li>\n<li>社区<ul>\n<li>发布的更早和更频繁</li>\n<li>社区驱动</li>\n</ul>\n</li>\n<li>异步和事件驱动<ul>\n<li>异步，即非同步事件，当然是跟你日常生活的类似。例如，您可以发送电子邮件；可能得到或者得不到任何回应，或者当你发送一个您可能会收到一个消息。<blockquote>\n<h4 id=\"Netty-资料Netty-start-Netty-实战-精髓\"><a href=\"#Netty-资料Netty-start-Netty-实战-精髓\" class=\"headerlink\" title=\"Netty 资料Netty start   Netty 实战(精髓)\"></a>Netty 资料<a href=\"//waylau.gitbooks.io/netty-4-user-guide/Preface/The%20Solution.html\">Netty start</a>   <a href=\"https://waylau.gitbooks.io/essential-netty-in-action/GETTING%20STARTED/Introducing%20Netty.html\" target=\"_blank\" rel=\"external\">Netty 实战(精髓)</a></h4></blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"BIO-阻塞式IO\"><a href=\"#BIO-阻塞式IO\" class=\"headerlink\" title=\"BIO 阻塞式IO\"></a>BIO 阻塞式IO</h4></blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj92asb8scj30fx0acta4.jpg\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServerSocket serverSocket = new ServerSocket(portNumber);//1</div><div class=\"line\">Socket clientSocket = serverSocket.accept();             //2</div><div class=\"line\">BufferedReader in = new BufferedReader(                     //3</div><div class=\"line\">        new InputStreamReader(clientSocket.getInputStream()));</div><div class=\"line\">PrintWriter out =</div><div class=\"line\">        new PrintWriter(clientSocket.getOutputStream(), true);</div><div class=\"line\">String request, response;</div><div class=\"line\">while ((request = in.readLine()) != null) &#123;                 //4</div><div class=\"line\">    if (&quot;Done&quot;.equals(request)) &#123;                         //5</div><div class=\"line\">        break;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">response = processRequest(request);                        //6</div><div class=\"line\">out.println(response);                                    //7</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>ServerSocket 创建并监听端口的连接请求</li>\n<li>accept() 调用阻塞，直到一个连接被建立了。返回一个新的 Socket 用来处理 客户端和服务端的交互</li>\n<li>流被创建用于处理 socket 的输入和输出数据。BufferedReader 读取从字符输入流里面的本文。PrintWriter 打印格式化展示的对象读到本文输出流</li>\n<li>处理循环开始 readLine() 阻塞，读取字符串直到最后是换行或者输入终止。</li>\n<li>如果客户端发送的是“Done”处理循环退出</li>\n<li>执行方法处理请求，返回服务器的响应</li>\n<li>响应发回客户端</li>\n<li>处理循环继续<h5 id=\"点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的-Thread-给每个新的客户端-Socket-当然需要更多的代码-。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\"><a href=\"#点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的-Thread-给每个新的客户端-Socket-当然需要更多的代码-。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\" class=\"headerlink\" title=\"点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的 Thread 给每个新的客户端 Socket(当然需要更多的代码)。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\"></a>点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的 Thread 给每个新的客户端 Socket(当然需要更多的代码)。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。</h5><blockquote>\n<p>NIO 非阻塞式IO</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"SELECTOR是-Java-的无阻塞-I-O-实现的关键\"><a href=\"#SELECTOR是-Java-的无阻塞-I-O-实现的关键\" class=\"headerlink\" title=\"SELECTOR是 Java 的无阻塞 I/O 实现的关键\"></a>SELECTOR是 Java 的无阻塞 I/O 实现的关键</h4><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj92cpeip8j30fw0dj401.jpg\" alt=\"\"></p>\n<h4 id=\"分析：Selector-最终决定哪一组注册的-socket-准备执行-I-O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比-阻塞-I-O-模型-更好的资源使用，因为\"><a href=\"#分析：Selector-最终决定哪一组注册的-socket-准备执行-I-O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比-阻塞-I-O-模型-更好的资源使用，因为\" class=\"headerlink\" title=\"分析：Selector 最终决定哪一组注册的 socket 准备执行 I/O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比 阻塞 I/O 模型 更好的资源使用，因为\"></a>分析：Selector 最终决定哪一组注册的 socket 准备执行 I/O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比 阻塞 I/O 模型 更好的资源使用，因为</h4><ul>\n<li>可以用较少的线程处理更多连接，这意味着更少的开销在内存和上下文切换上</li>\n<li>当没有 I/O 处理时，线程可以被重定向到其他任务上。<h4 id=\"实现可靠和可扩展的-event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家-Netty-。\"><a href=\"#实现可靠和可扩展的-event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家-Netty-。\" class=\"headerlink\" title=\"实现可靠和可扩展的 event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家 Netty 。\"></a>实现可靠和可扩展的 event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家 <font color=\"#FF0000\">Netty</font> 。</h4></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>为什么用netty？</p>\n</blockquote>\n<h6 id=\"我们总会有这样的需求，以较低的成本交付来换取更大的吞吐量和可用性。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的-API-不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：通过抽象来隐藏背后的复杂性。\"><a href=\"#我们总会有这样的需求，以较低的成本交付来换取更大的吞吐量和可用性。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的-API-不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：通过抽象来隐藏背后的复杂性。\" class=\"headerlink\" title=\"我们总会有这样的需求，以较低的成本交付来换取更大的吞吐量和可用性。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的 API 不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：通过抽象来隐藏背后的复杂性。\"></a>我们总会有这样的需求，以较低的成本交付来换取更大的<font color=\"#FF0000\">吞吐量</font>和<font color=\"#FF0000\">可用性</font>。可用性这一点是非常重要的。我们从漫长的痛苦的经验学习到，低级别的 API 不仅暴露了高级别直接使用的复杂性，而且引入了过分依赖于这项技术所造成的短板。因此，面向对象的一个基本原则：<font color=\"#FF0000\">通过抽象来隐藏背后的复杂性</font>。</h6><p>目前netty实现了的协议就有 FTP, SMTP, HTTP, WebSocket 和 SPDY 以及其他二进制和基于文本的协议。</p>\n<p>下面展示了 Netty 技术和方法的特</p>\n<ul>\n<li>设计<ul>\n<li>针对多种传输类型的统一接口 - 阻塞和非阻塞</li>\n<li>简单但更强大的线程模型</li>\n<li>真正的无连接的数据报套接字支持</li>\n<li>链接逻辑支持复用</li>\n</ul>\n</li>\n<li>易用性<ul>\n<li>大量的 Javadoc 和 代码实例</li>\n<li>除了在 JDK 1.6 + 额外的限制。（一些特征是只支持在Java 1.7 +。可选的功能可能有额外的限制。）</li>\n</ul>\n</li>\n<li>性能<ul>\n<li>比核心 Java API 更好的吞吐量，较低的延时</li>\n<li>资源消耗更少，这个得益于共享池和重用</li>\n<li>减少内存拷贝</li>\n</ul>\n</li>\n<li>健壮性<ul>\n<li>消除由于慢，快，或重载连接产生的 OutOfMemoryError</li>\n<li>消除经常发现在 NIO 在高速网络中的应用中的不公平的读/写比</li>\n</ul>\n</li>\n<li>安全<ul>\n<li>完整的 SSL / TLS 和 StartTLS 的支持</li>\n<li>运行在受限的环境例如 Applet 或 OSGI</li>\n</ul>\n</li>\n<li>社区<ul>\n<li>发布的更早和更频繁</li>\n<li>社区驱动</li>\n</ul>\n</li>\n<li>异步和事件驱动<ul>\n<li>异步，即非同步事件，当然是跟你日常生活的类似。例如，您可以发送电子邮件；可能得到或者得不到任何回应，或者当你发送一个您可能会收到一个消息。<blockquote>\n<h4 id=\"Netty-资料Netty-start-Netty-实战-精髓\"><a href=\"#Netty-资料Netty-start-Netty-实战-精髓\" class=\"headerlink\" title=\"Netty 资料Netty start   Netty 实战(精髓)\"></a>Netty 资料<a href=\"//waylau.gitbooks.io/netty-4-user-guide/Preface/The%20Solution.html\">Netty start</a>   <a href=\"https://waylau.gitbooks.io/essential-netty-in-action/GETTING%20STARTED/Introducing%20Netty.html\" target=\"_blank\" rel=\"external\">Netty 实战(精髓)</a></h4></blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h4 id=\"BIO-阻塞式IO\"><a href=\"#BIO-阻塞式IO\" class=\"headerlink\" title=\"BIO 阻塞式IO\"></a>BIO 阻塞式IO</h4></blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj92asb8scj30fx0acta4.jpg\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">ServerSocket serverSocket = new ServerSocket(portNumber);//1</div><div class=\"line\">Socket clientSocket = serverSocket.accept();             //2</div><div class=\"line\">BufferedReader in = new BufferedReader(                     //3</div><div class=\"line\">        new InputStreamReader(clientSocket.getInputStream()));</div><div class=\"line\">PrintWriter out =</div><div class=\"line\">        new PrintWriter(clientSocket.getOutputStream(), true);</div><div class=\"line\">String request, response;</div><div class=\"line\">while ((request = in.readLine()) != null) &#123;                 //4</div><div class=\"line\">    if (&quot;Done&quot;.equals(request)) &#123;                         //5</div><div class=\"line\">        break;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">response = processRequest(request);                        //6</div><div class=\"line\">out.println(response);                                    //7</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>ServerSocket 创建并监听端口的连接请求</li>\n<li>accept() 调用阻塞，直到一个连接被建立了。返回一个新的 Socket 用来处理 客户端和服务端的交互</li>\n<li>流被创建用于处理 socket 的输入和输出数据。BufferedReader 读取从字符输入流里面的本文。PrintWriter 打印格式化展示的对象读到本文输出流</li>\n<li>处理循环开始 readLine() 阻塞，读取字符串直到最后是换行或者输入终止。</li>\n<li>如果客户端发送的是“Done”处理循环退出</li>\n<li>执行方法处理请求，返回服务器的响应</li>\n<li>响应发回客户端</li>\n<li>处理循环继续<h5 id=\"点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的-Thread-给每个新的客户端-Socket-当然需要更多的代码-。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\"><a href=\"#点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的-Thread-给每个新的客户端-Socket-当然需要更多的代码-。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\" class=\"headerlink\" title=\"点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的 Thread 给每个新的客户端 Socket(当然需要更多的代码)。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。\"></a>点评：这段代码限制每次只能处理一个连接。为了实现多个并行的客户端我们需要分配一个新的 Thread 给每个新的客户端 Socket(当然需要更多的代码)。但考虑使用这种方法来支持大量的同步，长连接。在任何时间点多线程可能处于休眠状态，等待输入或输出数据。这很容易使得资源的大量浪费，对性能产生负面影响。</h5><blockquote>\n<p>NIO 非阻塞式IO</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"SELECTOR是-Java-的无阻塞-I-O-实现的关键\"><a href=\"#SELECTOR是-Java-的无阻塞-I-O-实现的关键\" class=\"headerlink\" title=\"SELECTOR是 Java 的无阻塞 I/O 实现的关键\"></a>SELECTOR是 Java 的无阻塞 I/O 实现的关键</h4><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj92cpeip8j30fw0dj401.jpg\" alt=\"\"></p>\n<h4 id=\"分析：Selector-最终决定哪一组注册的-socket-准备执行-I-O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比-阻塞-I-O-模型-更好的资源使用，因为\"><a href=\"#分析：Selector-最终决定哪一组注册的-socket-准备执行-I-O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比-阻塞-I-O-模型-更好的资源使用，因为\" class=\"headerlink\" title=\"分析：Selector 最终决定哪一组注册的 socket 准备执行 I/O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比 阻塞 I/O 模型 更好的资源使用，因为\"></a>分析：Selector 最终决定哪一组注册的 socket 准备执行 I/O。通过通知，一个线程可以同时处理多个并发连接。总体而言，该模型提供了比 阻塞 I/O 模型 更好的资源使用，因为</h4><ul>\n<li>可以用较少的线程处理更多连接，这意味着更少的开销在内存和上下文切换上</li>\n<li>当没有 I/O 处理时，线程可以被重定向到其他任务上。<h4 id=\"实现可靠和可扩展的-event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家-Netty-。\"><a href=\"#实现可靠和可扩展的-event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家-Netty-。\" class=\"headerlink\" title=\"实现可靠和可扩展的 event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家 Netty 。\"></a>实现可靠和可扩展的 event-processing（事件处理器）来处理和调度数据并保证尽可能有效地，这是一个繁琐和容易出错的任务，最好留给专家 <font color=\"#FF0000\">Netty</font> 。</h4></li>\n</ul>\n"},{"title":"NIO","date":"2017-10-02T15:57:43.000Z","_content":"##### NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\n- 客户端发送的请求是异步到，可以通过在多路复用器注册op_connect等待后续结果，不需要像之前客户端那样被同步阻塞\n- SocketChannel操作都是异步的，如果没有可读写到操作他不会等待，而是返回。这样IO线程可以处理其他链路。\n- 线程模型优化，一个多路选择器线程可以同时处理成千上万个客户端连接，而且性能不会随着客户端连接数到增加而直线下降\n#### SocketChannel\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjl7r8lbx7j30os0icq3n.jpg)\n#### ServerSocketChannel\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjl7pyzix5j30c90i2t98.jpg)\n\n### TimeServer\n#### 服务端序列图\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjlev8ff3jj30m90dkq5f.jpg)\n\n```\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeServer {\n    public static void main(String[] args) {\n        //定义服务端到默认端口号\n        int port = 8080;\n        //如果传了参数进来，端口号为外在参数\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        //创建一个多路复用器，它是一个独立到线程，负责轮询多路复用器Selector，可以处理多个客户端到并发接入\n        MultiplexerTimeServer timeServer = new MultiplexerTimeServer(port);\n        new Thread (timeServer,\"NIO-MultiplexerTimeServer-001\").start();\n    }\n}\n```\n\n### MultiplexerTimeServer\n```\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class MultiplexerTimeServer implements Runnable {\n    //多路复用器\n    private Selector selector;\n\n    private ServerSocketChannel serverChannel;\n\n    private volatile boolean stop;\n\n    /**\n     * 初始化多路复用器，绑定监听端口\n     * @param port 端口号\n     */\n    public  MultiplexerTimeServer(int port){\n        try {\n            //设置多路复用器\n            selector = Selector.open();\n            //设置服务端通信通道，监听流式socket\n            serverChannel = ServerSocketChannel.open();\n            //设置服务端通信通道为非阻塞模式\n            serverChannel.configureBlocking(false);\n            //设置TCP的相关参数：地址，backlog\n            serverChannel.socket().bind(new InetSocketAddress(port),1024);\n            //将服务端通信通道注册到多路复用器上，监听SelectionKey.OP_ACCEPT操作位\n            serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n            System.out.println(\"The time server is start int port :\"+port);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n    }\n\n    public void stop(){\n        this.stop = true;\n    }\n\n    @Override\n    public void run() {\n        while(!stop){\n            try {\n                //每隔一秒多路复用器轮询一次准备就绪的channel\n                selector.select(1000);\n                //当有处于就绪状态的channel时，selector将返回channel的SelectionKey集合。\n                Set<SelectionKey> selectedKeys = selector.selectedKeys();\n                //遍历SelectionKey集合，即遍历当前有效的通道\n                Iterator<SelectionKey> it = selectedKeys.iterator();\n                SelectionKey key = null;\n                while (it.hasNext()){\n                    //获取当前所遍历的key，赋值给新的饮用\n                    key = it.next();\n                    //将当前遍历的key从集合里面移除\n                    it.remove();\n                    try {\n                        //处理当前的通道\n                        handleInput(key);\n                    }catch (Exception e){\n                        if (key != null){\n                            key.cancel();\n                            if (key.channel() != null){\n                                key.channel().close();\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (selector!=null){\n            try {\n                selector.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 处理新接入客户端请求消息，通过selectionKey判断网络事件类型\n     * @param key 就绪状态的通道\n     * @throws IOException\n     */\n    private void handleInput(SelectionKey key) throws IOException {\n        //如果当前通道是有效的\n        if (key.isValid()){\n            //下述操作相当于完成了TCP三次握手，TCP物理链路正式成立\n            //如果当前key的通道已经准备好接收一个新的socket连接\n            if (key.isAcceptable()){\n                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();\n                SocketChannel sc = ssc.accept();\n                //设置SocketChannel为异步非阻塞模式\n                sc.configureBlocking(false);\n                sc.register(selector,SelectionKey.OP_READ);\n            }\n            //如果当前key的通道准备好读取数据\n            if (key.isReadable()){\n                SocketChannel sc = (SocketChannel) key.channel();\n                //创建一个ByteBuffer,无法知道客户端发送的码流大小，开辟一个1MB到缓冲区\n                ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n                //使用socketChannel到read方法读取请求码流\n                int readBytes = sc.read(readBuffer);\n                //返回值大于0表示读取到了字节，对字节进行编解码\n                if (readBytes>0){\n                    //limit=position , position=0,重置mask。一般是结束buf操作，将buf写入输出流时调用，这个必须要调用，否则极有可能position!=limit，导致position后面没有数据，每次写入数据到输出流时，必须确保position=limit。\n                    readBuffer.flip();\n                    //返回缓冲区剩余容量，取值=容量-位置\n                    byte [] bytes = new byte[readBuffer.remaining()];\n                    readBuffer.get(bytes);\n                    String body = new String (bytes,\"UTF-8\");\n                    System.out.println(\"The time server receive order:\"+body);\n                    String currentTime = \"QUERY TIME ORDER\".equalsIgnoreCase(body)?new Date(System.currentTimeMillis()).toString():\"BAD QUERY\";\n                    doWrite(sc,currentTime);\n                }else if (readBytes<0){\n                    //返回值为-1表示链路已经关闭，需要关闭SocketChannel，释放资源\n                    key.cancel();\n                    sc.close();\n                }else {\n                    //=0表示没有读取到字节\n                }\n            }\n        }\n    }\n\n    /**\n     * 将应答消息异步发送给客户端\n     * @param channel 将要写入数据的通道\n     * @param response 写入数据到内容\n     * @throws IOException\n     */\n    private void doWrite(SocketChannel channel,String response) throws IOException {\n        if (response!=null && response.trim().length()>0){\n            //将字符串编码成字节数组\n            byte[] bytes = response.getBytes();\n            //根据字节数组到容量创建ByteBuffer\n            ByteBuffer  writeBuffer  = ByteBuffer.allocate(bytes.length);\n            //将自己数组复制到缓冲区\n            writeBuffer.put(bytes);\n            //对缓冲区进行flip操作\n            writeBuffer.flip();\n            //将缓冲区到字节数组发送出去\n            channel.write(writeBuffer);\n        }\n    }\n\n}\n\n```\n### Timeclient\n#### 客户端序列图\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjlew2dxbkj30l40gldj1.jpg)\n```\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeClient {\n    public static void main(String[] args) {\n        //定义要传输信息的服务端的端口号\n        int port = 8080;\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        //新建一个客户端线程发起连接\n        new Thread(new TimeClientHandle(\"127.0.0.1\",port),\"TimeClient-0001\").start();\n    }\n}\n```\n\n### TimeClientHandler\n\n\n```\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeClientHandle implements Runnable {\n\n    private String host;\n\n    private int port;\n\n    private Selector selector;\n\n    private SocketChannel socketChannel;\n\n    private volatile boolean stop;\n\n    /**\n     *初始化客户端参数，\n     * @param host 地址\n     * @param port 端口号\n     */\n    public TimeClientHandle(String host,int port){\n        this.host = host ==null?\"127.0.0.1\":host;\n        this.port = port;\n        try {\n            selector = Selector.open();\n            socketChannel = SocketChannel.open();\n            socketChannel.configureBlocking(false);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n    }\n\n    @Override\n    public void run() {\n        try {\n            //连接\n            doConnect();\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        while (!stop) {\n            try {\n                //每秒轮询遍历一次所有通道\n                selector.select(1000);\n                //获取所有通道到key\n                Set<SelectionKey> selectionKeys = selector.selectedKeys();\n                //遍历所有通道\n                Iterator<SelectionKey> it = selectionKeys.iterator();\n                SelectionKey key = null;\n                while (it.hasNext()){\n                    key = it.next();\n                    //将已遍历到通道从通道集合中移除\n                    it.remove();\n                    try {\n                        //处理当前通道事件\n                        handelInput(key);\n                    }catch (Exception e){\n                        //如果发生异常，将当前通道关闭\n                        if (key!= null){\n                            key.cancel();\n                            if (key.channel()!= null){\n                                key.channel().close();\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        //读完数据将多路复用选择器关闭\n        if (selector!=null){\n            try {\n                selector.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 处理当前通道\n     * @param key 通道的key\n     * * @throws IOException\n     */\n    private void handelInput(SelectionKey key) throws IOException {\n        //如果当前通道是有效的\n        if (key.isValid()){\n            SocketChannel sc = (SocketChannel) key.channel();\n            //如果当前通道没有完成，或者没有\n            if (key.isConnectable()) {\n                if (sc.finishConnect()){\n                    //注册为读状态\n                    sc.register(selector,SelectionKey.OP_READ);\n                    //通过通道发送数据\n                    doWrite(sc);\n                }else {\n                    System.exit(1);\n                }\n            }\n            //如果当前通道是可读到\n            if (key.isReadable()){\n                ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n                int readBytes = sc.read(readBuffer);\n                if (readBytes>0){\n                    readBuffer.flip();\n                    byte[] bytes = new byte[readBuffer.remaining()];\n                    readBuffer.get(bytes);\n                    String body = new String(bytes,\"UTF-8\");\n                    System.out.println(\"Now is：\"+  body);\n                    this.stop = true;\n                }else if (readBytes<0){\n                    //对端链路关闭\n                    key.cancel();\n                    sc.close();\n                }else {\n                    //读到0字节 忽略\n                }\n            }\n        }\n    }\n\n    /**\n     * 如果通信通道没有建立，则将通道绑定在多路复用器上；\n     * 如果通信通道已建立，将当前通道状态置为读\n     * @throws IOException\n     */\n    private void doConnect() throws IOException {\n        //如果通信通道已建立\n        if (socketChannel.connect(new InetSocketAddress(host,port))){\n            //注册到多路复用器上，状态为读。\n            socketChannel.register(selector,SelectionKey.OP_READ);\n            //发送请求数据\n            doWrite(socketChannel);\n        }else {\n            //如果通信通道没有建立，则向多路复用器发起连接\n            socketChannel.register(selector,SelectionKey.OP_CONNECT);\n        }\n    }\n\n    /**\n     *\n     * @param socketChannel socket通道\n     * @throws IOException\n     */\n    private void doWrite(SocketChannel socketChannel) throws IOException {\n        byte[] req = \"QUERY TIME ORDER\".getBytes();\n        ByteBuffer writeBuffer = ByteBuffer.allocate(req.length);\n        writeBuffer.put(req);\n        writeBuffer.flip();\n        socketChannel.write(writeBuffer);\n        if (!writeBuffer.hasRemaining()){\n            System.out.println(\"send order 2 server succeed\");\n        }\n    }\n}\n```\n\n","source":"_posts/NIO.md","raw":"---\ntitle: NIO\ndate: 2017-10-02 23:57:43\ntags: 通信\ncategories: Netty\n---\n##### NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\n- 客户端发送的请求是异步到，可以通过在多路复用器注册op_connect等待后续结果，不需要像之前客户端那样被同步阻塞\n- SocketChannel操作都是异步的，如果没有可读写到操作他不会等待，而是返回。这样IO线程可以处理其他链路。\n- 线程模型优化，一个多路选择器线程可以同时处理成千上万个客户端连接，而且性能不会随着客户端连接数到增加而直线下降\n#### SocketChannel\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjl7r8lbx7j30os0icq3n.jpg)\n#### ServerSocketChannel\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjl7pyzix5j30c90i2t98.jpg)\n\n### TimeServer\n#### 服务端序列图\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjlev8ff3jj30m90dkq5f.jpg)\n\n```\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeServer {\n    public static void main(String[] args) {\n        //定义服务端到默认端口号\n        int port = 8080;\n        //如果传了参数进来，端口号为外在参数\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        //创建一个多路复用器，它是一个独立到线程，负责轮询多路复用器Selector，可以处理多个客户端到并发接入\n        MultiplexerTimeServer timeServer = new MultiplexerTimeServer(port);\n        new Thread (timeServer,\"NIO-MultiplexerTimeServer-001\").start();\n    }\n}\n```\n\n### MultiplexerTimeServer\n```\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class MultiplexerTimeServer implements Runnable {\n    //多路复用器\n    private Selector selector;\n\n    private ServerSocketChannel serverChannel;\n\n    private volatile boolean stop;\n\n    /**\n     * 初始化多路复用器，绑定监听端口\n     * @param port 端口号\n     */\n    public  MultiplexerTimeServer(int port){\n        try {\n            //设置多路复用器\n            selector = Selector.open();\n            //设置服务端通信通道，监听流式socket\n            serverChannel = ServerSocketChannel.open();\n            //设置服务端通信通道为非阻塞模式\n            serverChannel.configureBlocking(false);\n            //设置TCP的相关参数：地址，backlog\n            serverChannel.socket().bind(new InetSocketAddress(port),1024);\n            //将服务端通信通道注册到多路复用器上，监听SelectionKey.OP_ACCEPT操作位\n            serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n            System.out.println(\"The time server is start int port :\"+port);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n    }\n\n    public void stop(){\n        this.stop = true;\n    }\n\n    @Override\n    public void run() {\n        while(!stop){\n            try {\n                //每隔一秒多路复用器轮询一次准备就绪的channel\n                selector.select(1000);\n                //当有处于就绪状态的channel时，selector将返回channel的SelectionKey集合。\n                Set<SelectionKey> selectedKeys = selector.selectedKeys();\n                //遍历SelectionKey集合，即遍历当前有效的通道\n                Iterator<SelectionKey> it = selectedKeys.iterator();\n                SelectionKey key = null;\n                while (it.hasNext()){\n                    //获取当前所遍历的key，赋值给新的饮用\n                    key = it.next();\n                    //将当前遍历的key从集合里面移除\n                    it.remove();\n                    try {\n                        //处理当前的通道\n                        handleInput(key);\n                    }catch (Exception e){\n                        if (key != null){\n                            key.cancel();\n                            if (key.channel() != null){\n                                key.channel().close();\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (selector!=null){\n            try {\n                selector.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 处理新接入客户端请求消息，通过selectionKey判断网络事件类型\n     * @param key 就绪状态的通道\n     * @throws IOException\n     */\n    private void handleInput(SelectionKey key) throws IOException {\n        //如果当前通道是有效的\n        if (key.isValid()){\n            //下述操作相当于完成了TCP三次握手，TCP物理链路正式成立\n            //如果当前key的通道已经准备好接收一个新的socket连接\n            if (key.isAcceptable()){\n                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();\n                SocketChannel sc = ssc.accept();\n                //设置SocketChannel为异步非阻塞模式\n                sc.configureBlocking(false);\n                sc.register(selector,SelectionKey.OP_READ);\n            }\n            //如果当前key的通道准备好读取数据\n            if (key.isReadable()){\n                SocketChannel sc = (SocketChannel) key.channel();\n                //创建一个ByteBuffer,无法知道客户端发送的码流大小，开辟一个1MB到缓冲区\n                ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n                //使用socketChannel到read方法读取请求码流\n                int readBytes = sc.read(readBuffer);\n                //返回值大于0表示读取到了字节，对字节进行编解码\n                if (readBytes>0){\n                    //limit=position , position=0,重置mask。一般是结束buf操作，将buf写入输出流时调用，这个必须要调用，否则极有可能position!=limit，导致position后面没有数据，每次写入数据到输出流时，必须确保position=limit。\n                    readBuffer.flip();\n                    //返回缓冲区剩余容量，取值=容量-位置\n                    byte [] bytes = new byte[readBuffer.remaining()];\n                    readBuffer.get(bytes);\n                    String body = new String (bytes,\"UTF-8\");\n                    System.out.println(\"The time server receive order:\"+body);\n                    String currentTime = \"QUERY TIME ORDER\".equalsIgnoreCase(body)?new Date(System.currentTimeMillis()).toString():\"BAD QUERY\";\n                    doWrite(sc,currentTime);\n                }else if (readBytes<0){\n                    //返回值为-1表示链路已经关闭，需要关闭SocketChannel，释放资源\n                    key.cancel();\n                    sc.close();\n                }else {\n                    //=0表示没有读取到字节\n                }\n            }\n        }\n    }\n\n    /**\n     * 将应答消息异步发送给客户端\n     * @param channel 将要写入数据的通道\n     * @param response 写入数据到内容\n     * @throws IOException\n     */\n    private void doWrite(SocketChannel channel,String response) throws IOException {\n        if (response!=null && response.trim().length()>0){\n            //将字符串编码成字节数组\n            byte[] bytes = response.getBytes();\n            //根据字节数组到容量创建ByteBuffer\n            ByteBuffer  writeBuffer  = ByteBuffer.allocate(bytes.length);\n            //将自己数组复制到缓冲区\n            writeBuffer.put(bytes);\n            //对缓冲区进行flip操作\n            writeBuffer.flip();\n            //将缓冲区到字节数组发送出去\n            channel.write(writeBuffer);\n        }\n    }\n\n}\n\n```\n### Timeclient\n#### 客户端序列图\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjlew2dxbkj30l40gldj1.jpg)\n```\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeClient {\n    public static void main(String[] args) {\n        //定义要传输信息的服务端的端口号\n        int port = 8080;\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        //新建一个客户端线程发起连接\n        new Thread(new TimeClientHandle(\"127.0.0.1\",port),\"TimeClient-0001\").start();\n    }\n}\n```\n\n### TimeClientHandler\n\n\n```\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeClientHandle implements Runnable {\n\n    private String host;\n\n    private int port;\n\n    private Selector selector;\n\n    private SocketChannel socketChannel;\n\n    private volatile boolean stop;\n\n    /**\n     *初始化客户端参数，\n     * @param host 地址\n     * @param port 端口号\n     */\n    public TimeClientHandle(String host,int port){\n        this.host = host ==null?\"127.0.0.1\":host;\n        this.port = port;\n        try {\n            selector = Selector.open();\n            socketChannel = SocketChannel.open();\n            socketChannel.configureBlocking(false);\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n    }\n\n    @Override\n    public void run() {\n        try {\n            //连接\n            doConnect();\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n        while (!stop) {\n            try {\n                //每秒轮询遍历一次所有通道\n                selector.select(1000);\n                //获取所有通道到key\n                Set<SelectionKey> selectionKeys = selector.selectedKeys();\n                //遍历所有通道\n                Iterator<SelectionKey> it = selectionKeys.iterator();\n                SelectionKey key = null;\n                while (it.hasNext()){\n                    key = it.next();\n                    //将已遍历到通道从通道集合中移除\n                    it.remove();\n                    try {\n                        //处理当前通道事件\n                        handelInput(key);\n                    }catch (Exception e){\n                        //如果发生异常，将当前通道关闭\n                        if (key!= null){\n                            key.cancel();\n                            if (key.channel()!= null){\n                                key.channel().close();\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        //读完数据将多路复用选择器关闭\n        if (selector!=null){\n            try {\n                selector.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * 处理当前通道\n     * @param key 通道的key\n     * * @throws IOException\n     */\n    private void handelInput(SelectionKey key) throws IOException {\n        //如果当前通道是有效的\n        if (key.isValid()){\n            SocketChannel sc = (SocketChannel) key.channel();\n            //如果当前通道没有完成，或者没有\n            if (key.isConnectable()) {\n                if (sc.finishConnect()){\n                    //注册为读状态\n                    sc.register(selector,SelectionKey.OP_READ);\n                    //通过通道发送数据\n                    doWrite(sc);\n                }else {\n                    System.exit(1);\n                }\n            }\n            //如果当前通道是可读到\n            if (key.isReadable()){\n                ByteBuffer readBuffer = ByteBuffer.allocate(1024);\n                int readBytes = sc.read(readBuffer);\n                if (readBytes>0){\n                    readBuffer.flip();\n                    byte[] bytes = new byte[readBuffer.remaining()];\n                    readBuffer.get(bytes);\n                    String body = new String(bytes,\"UTF-8\");\n                    System.out.println(\"Now is：\"+  body);\n                    this.stop = true;\n                }else if (readBytes<0){\n                    //对端链路关闭\n                    key.cancel();\n                    sc.close();\n                }else {\n                    //读到0字节 忽略\n                }\n            }\n        }\n    }\n\n    /**\n     * 如果通信通道没有建立，则将通道绑定在多路复用器上；\n     * 如果通信通道已建立，将当前通道状态置为读\n     * @throws IOException\n     */\n    private void doConnect() throws IOException {\n        //如果通信通道已建立\n        if (socketChannel.connect(new InetSocketAddress(host,port))){\n            //注册到多路复用器上，状态为读。\n            socketChannel.register(selector,SelectionKey.OP_READ);\n            //发送请求数据\n            doWrite(socketChannel);\n        }else {\n            //如果通信通道没有建立，则向多路复用器发起连接\n            socketChannel.register(selector,SelectionKey.OP_CONNECT);\n        }\n    }\n\n    /**\n     *\n     * @param socketChannel socket通道\n     * @throws IOException\n     */\n    private void doWrite(SocketChannel socketChannel) throws IOException {\n        byte[] req = \"QUERY TIME ORDER\".getBytes();\n        ByteBuffer writeBuffer = ByteBuffer.allocate(req.length);\n        writeBuffer.put(req);\n        writeBuffer.flip();\n        socketChannel.write(writeBuffer);\n        if (!writeBuffer.hasRemaining()){\n            System.out.println(\"send order 2 server succeed\");\n        }\n    }\n}\n```\n\n","slug":"NIO","published":1,"updated":"2017-10-03T15:07:07.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxcp000710qskt82kz0g","content":"<h5 id=\"NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\"><a href=\"#NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\" class=\"headerlink\" title=\"NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\"></a>NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？</h5><ul>\n<li>客户端发送的请求是异步到，可以通过在多路复用器注册op_connect等待后续结果，不需要像之前客户端那样被同步阻塞</li>\n<li>SocketChannel操作都是异步的，如果没有可读写到操作他不会等待，而是返回。这样IO线程可以处理其他链路。</li>\n<li>线程模型优化，一个多路选择器线程可以同时处理成千上万个客户端连接，而且性能不会随着客户端连接数到增加而直线下降<h4 id=\"SocketChannel\"><a href=\"#SocketChannel\" class=\"headerlink\" title=\"SocketChannel\"></a>SocketChannel</h4><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjl7r8lbx7j30os0icq3n.jpg\" alt=\"\"><h4 id=\"ServerSocketChannel\"><a href=\"#ServerSocketChannel\" class=\"headerlink\" title=\"ServerSocketChannel\"></a>ServerSocketChannel</h4><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjl7pyzix5j30c90i2t98.jpg\" alt=\"\"></li>\n</ul>\n<h3 id=\"TimeServer\"><a href=\"#TimeServer\" class=\"headerlink\" title=\"TimeServer\"></a>TimeServer</h3><h4 id=\"服务端序列图\"><a href=\"#服务端序列图\" class=\"headerlink\" title=\"服务端序列图\"></a>服务端序列图</h4><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjlev8ff3jj30m90dkq5f.jpg\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServer &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义服务端到默认端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        //如果传了参数进来，端口号为外在参数</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //创建一个多路复用器，它是一个独立到线程，负责轮询多路复用器Selector，可以处理多个客户端到并发接入</div><div class=\"line\">        MultiplexerTimeServer timeServer = new MultiplexerTimeServer(port);</div><div class=\"line\">        new Thread (timeServer,&quot;NIO-MultiplexerTimeServer-001&quot;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"MultiplexerTimeServer\"><a href=\"#MultiplexerTimeServer\" class=\"headerlink\" title=\"MultiplexerTimeServer\"></a>MultiplexerTimeServer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.InetSocketAddress;</div><div class=\"line\">import java.nio.ByteBuffer;</div><div class=\"line\">import java.nio.channels.SelectionKey;</div><div class=\"line\">import java.nio.channels.Selector;</div><div class=\"line\">import java.nio.channels.ServerSocketChannel;</div><div class=\"line\">import java.nio.channels.SocketChannel;</div><div class=\"line\">import java.util.Date;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class MultiplexerTimeServer implements Runnable &#123;</div><div class=\"line\">    //多路复用器</div><div class=\"line\">    private Selector selector;</div><div class=\"line\"></div><div class=\"line\">    private ServerSocketChannel serverChannel;</div><div class=\"line\"></div><div class=\"line\">    private volatile boolean stop;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 初始化多路复用器，绑定监听端口</div><div class=\"line\">     * @param port 端口号</div><div class=\"line\">     */</div><div class=\"line\">    public  MultiplexerTimeServer(int port)&#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //设置多路复用器</div><div class=\"line\">            selector = Selector.open();</div><div class=\"line\">            //设置服务端通信通道，监听流式socket</div><div class=\"line\">            serverChannel = ServerSocketChannel.open();</div><div class=\"line\">            //设置服务端通信通道为非阻塞模式</div><div class=\"line\">            serverChannel.configureBlocking(false);</div><div class=\"line\">            //设置TCP的相关参数：地址，backlog</div><div class=\"line\">            serverChannel.socket().bind(new InetSocketAddress(port),1024);</div><div class=\"line\">            //将服务端通信通道注册到多路复用器上，监听SelectionKey.OP_ACCEPT操作位</div><div class=\"line\">            serverChannel.register(selector, SelectionKey.OP_ACCEPT);</div><div class=\"line\">            System.out.println(&quot;The time server is start int port :&quot;+port);</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.exit(1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void stop()&#123;</div><div class=\"line\">        this.stop = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        while(!stop)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                //每隔一秒多路复用器轮询一次准备就绪的channel</div><div class=\"line\">                selector.select(1000);</div><div class=\"line\">                //当有处于就绪状态的channel时，selector将返回channel的SelectionKey集合。</div><div class=\"line\">                Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</div><div class=\"line\">                //遍历SelectionKey集合，即遍历当前有效的通道</div><div class=\"line\">                Iterator&lt;SelectionKey&gt; it = selectedKeys.iterator();</div><div class=\"line\">                SelectionKey key = null;</div><div class=\"line\">                while (it.hasNext())&#123;</div><div class=\"line\">                    //获取当前所遍历的key，赋值给新的饮用</div><div class=\"line\">                    key = it.next();</div><div class=\"line\">                    //将当前遍历的key从集合里面移除</div><div class=\"line\">                    it.remove();</div><div class=\"line\">                    try &#123;</div><div class=\"line\">                        //处理当前的通道</div><div class=\"line\">                        handleInput(key);</div><div class=\"line\">                    &#125;catch (Exception e)&#123;</div><div class=\"line\">                        if (key != null)&#123;</div><div class=\"line\">                            key.cancel();</div><div class=\"line\">                            if (key.channel() != null)&#123;</div><div class=\"line\">                                key.channel().close();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (selector!=null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                selector.close();</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 处理新接入客户端请求消息，通过selectionKey判断网络事件类型</div><div class=\"line\">     * @param key 就绪状态的通道</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void handleInput(SelectionKey key) throws IOException &#123;</div><div class=\"line\">        //如果当前通道是有效的</div><div class=\"line\">        if (key.isValid())&#123;</div><div class=\"line\">            //下述操作相当于完成了TCP三次握手，TCP物理链路正式成立</div><div class=\"line\">            //如果当前key的通道已经准备好接收一个新的socket连接</div><div class=\"line\">            if (key.isAcceptable())&#123;</div><div class=\"line\">                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</div><div class=\"line\">                SocketChannel sc = ssc.accept();</div><div class=\"line\">                //设置SocketChannel为异步非阻塞模式</div><div class=\"line\">                sc.configureBlocking(false);</div><div class=\"line\">                sc.register(selector,SelectionKey.OP_READ);</div><div class=\"line\">            &#125;</div><div class=\"line\">            //如果当前key的通道准备好读取数据</div><div class=\"line\">            if (key.isReadable())&#123;</div><div class=\"line\">                SocketChannel sc = (SocketChannel) key.channel();</div><div class=\"line\">                //创建一个ByteBuffer,无法知道客户端发送的码流大小，开辟一个1MB到缓冲区</div><div class=\"line\">                ByteBuffer readBuffer = ByteBuffer.allocate(1024);</div><div class=\"line\">                //使用socketChannel到read方法读取请求码流</div><div class=\"line\">                int readBytes = sc.read(readBuffer);</div><div class=\"line\">                //返回值大于0表示读取到了字节，对字节进行编解码</div><div class=\"line\">                if (readBytes&gt;0)&#123;</div><div class=\"line\">                    //limit=position , position=0,重置mask。一般是结束buf操作，将buf写入输出流时调用，这个必须要调用，否则极有可能position!=limit，导致position后面没有数据，每次写入数据到输出流时，必须确保position=limit。</div><div class=\"line\">                    readBuffer.flip();</div><div class=\"line\">                    //返回缓冲区剩余容量，取值=容量-位置</div><div class=\"line\">                    byte [] bytes = new byte[readBuffer.remaining()];</div><div class=\"line\">                    readBuffer.get(bytes);</div><div class=\"line\">                    String body = new String (bytes,&quot;UTF-8&quot;);</div><div class=\"line\">                    System.out.println(&quot;The time server receive order:&quot;+body);</div><div class=\"line\">                    String currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(body)?new Date(System.currentTimeMillis()).toString():&quot;BAD QUERY&quot;;</div><div class=\"line\">                    doWrite(sc,currentTime);</div><div class=\"line\">                &#125;else if (readBytes&lt;0)&#123;</div><div class=\"line\">                    //返回值为-1表示链路已经关闭，需要关闭SocketChannel，释放资源</div><div class=\"line\">                    key.cancel();</div><div class=\"line\">                    sc.close();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    //=0表示没有读取到字节</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 将应答消息异步发送给客户端</div><div class=\"line\">     * @param channel 将要写入数据的通道</div><div class=\"line\">     * @param response 写入数据到内容</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void doWrite(SocketChannel channel,String response) throws IOException &#123;</div><div class=\"line\">        if (response!=null &amp;&amp; response.trim().length()&gt;0)&#123;</div><div class=\"line\">            //将字符串编码成字节数组</div><div class=\"line\">            byte[] bytes = response.getBytes();</div><div class=\"line\">            //根据字节数组到容量创建ByteBuffer</div><div class=\"line\">            ByteBuffer  writeBuffer  = ByteBuffer.allocate(bytes.length);</div><div class=\"line\">            //将自己数组复制到缓冲区</div><div class=\"line\">            writeBuffer.put(bytes);</div><div class=\"line\">            //对缓冲区进行flip操作</div><div class=\"line\">            writeBuffer.flip();</div><div class=\"line\">            //将缓冲区到字节数组发送出去</div><div class=\"line\">            channel.write(writeBuffer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Timeclient\"><a href=\"#Timeclient\" class=\"headerlink\" title=\"Timeclient\"></a>Timeclient</h3><h4 id=\"客户端序列图\"><a href=\"#客户端序列图\" class=\"headerlink\" title=\"客户端序列图\"></a>客户端序列图</h4><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjlew2dxbkj30l40gldj1.jpg\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeClient &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义要传输信息的服务端的端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //新建一个客户端线程发起连接</div><div class=\"line\">        new Thread(new TimeClientHandle(&quot;127.0.0.1&quot;,port),&quot;TimeClient-0001&quot;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TimeClientHandler\"><a href=\"#TimeClientHandler\" class=\"headerlink\" title=\"TimeClientHandler\"></a>TimeClientHandler</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.InetSocketAddress;</div><div class=\"line\">import java.nio.ByteBuffer;</div><div class=\"line\">import java.nio.channels.SelectionKey;</div><div class=\"line\">import java.nio.channels.Selector;</div><div class=\"line\">import java.nio.channels.SocketChannel;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeClientHandle implements Runnable &#123;</div><div class=\"line\"></div><div class=\"line\">    private String host;</div><div class=\"line\"></div><div class=\"line\">    private int port;</div><div class=\"line\"></div><div class=\"line\">    private Selector selector;</div><div class=\"line\"></div><div class=\"line\">    private SocketChannel socketChannel;</div><div class=\"line\"></div><div class=\"line\">    private volatile boolean stop;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     *初始化客户端参数，</div><div class=\"line\">     * @param host 地址</div><div class=\"line\">     * @param port 端口号</div><div class=\"line\">     */</div><div class=\"line\">    public TimeClientHandle(String host,int port)&#123;</div><div class=\"line\">        this.host = host ==null?&quot;127.0.0.1&quot;:host;</div><div class=\"line\">        this.port = port;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            selector = Selector.open();</div><div class=\"line\">            socketChannel = SocketChannel.open();</div><div class=\"line\">            socketChannel.configureBlocking(false);</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.exit(1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //连接</div><div class=\"line\">            doConnect();</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.exit(1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        while (!stop) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                //每秒轮询遍历一次所有通道</div><div class=\"line\">                selector.select(1000);</div><div class=\"line\">                //获取所有通道到key</div><div class=\"line\">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</div><div class=\"line\">                //遍历所有通道</div><div class=\"line\">                Iterator&lt;SelectionKey&gt; it = selectionKeys.iterator();</div><div class=\"line\">                SelectionKey key = null;</div><div class=\"line\">                while (it.hasNext())&#123;</div><div class=\"line\">                    key = it.next();</div><div class=\"line\">                    //将已遍历到通道从通道集合中移除</div><div class=\"line\">                    it.remove();</div><div class=\"line\">                    try &#123;</div><div class=\"line\">                        //处理当前通道事件</div><div class=\"line\">                        handelInput(key);</div><div class=\"line\">                    &#125;catch (Exception e)&#123;</div><div class=\"line\">                        //如果发生异常，将当前通道关闭</div><div class=\"line\">                        if (key!= null)&#123;</div><div class=\"line\">                            key.cancel();</div><div class=\"line\">                            if (key.channel()!= null)&#123;</div><div class=\"line\">                                key.channel().close();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //读完数据将多路复用选择器关闭</div><div class=\"line\">        if (selector!=null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                selector.close();</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 处理当前通道</div><div class=\"line\">     * @param key 通道的key</div><div class=\"line\">     * * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void handelInput(SelectionKey key) throws IOException &#123;</div><div class=\"line\">        //如果当前通道是有效的</div><div class=\"line\">        if (key.isValid())&#123;</div><div class=\"line\">            SocketChannel sc = (SocketChannel) key.channel();</div><div class=\"line\">            //如果当前通道没有完成，或者没有</div><div class=\"line\">            if (key.isConnectable()) &#123;</div><div class=\"line\">                if (sc.finishConnect())&#123;</div><div class=\"line\">                    //注册为读状态</div><div class=\"line\">                    sc.register(selector,SelectionKey.OP_READ);</div><div class=\"line\">                    //通过通道发送数据</div><div class=\"line\">                    doWrite(sc);</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    System.exit(1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //如果当前通道是可读到</div><div class=\"line\">            if (key.isReadable())&#123;</div><div class=\"line\">                ByteBuffer readBuffer = ByteBuffer.allocate(1024);</div><div class=\"line\">                int readBytes = sc.read(readBuffer);</div><div class=\"line\">                if (readBytes&gt;0)&#123;</div><div class=\"line\">                    readBuffer.flip();</div><div class=\"line\">                    byte[] bytes = new byte[readBuffer.remaining()];</div><div class=\"line\">                    readBuffer.get(bytes);</div><div class=\"line\">                    String body = new String(bytes,&quot;UTF-8&quot;);</div><div class=\"line\">                    System.out.println(&quot;Now is：&quot;+  body);</div><div class=\"line\">                    this.stop = true;</div><div class=\"line\">                &#125;else if (readBytes&lt;0)&#123;</div><div class=\"line\">                    //对端链路关闭</div><div class=\"line\">                    key.cancel();</div><div class=\"line\">                    sc.close();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    //读到0字节 忽略</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 如果通信通道没有建立，则将通道绑定在多路复用器上；</div><div class=\"line\">     * 如果通信通道已建立，将当前通道状态置为读</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void doConnect() throws IOException &#123;</div><div class=\"line\">        //如果通信通道已建立</div><div class=\"line\">        if (socketChannel.connect(new InetSocketAddress(host,port)))&#123;</div><div class=\"line\">            //注册到多路复用器上，状态为读。</div><div class=\"line\">            socketChannel.register(selector,SelectionKey.OP_READ);</div><div class=\"line\">            //发送请求数据</div><div class=\"line\">            doWrite(socketChannel);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //如果通信通道没有建立，则向多路复用器发起连接</div><div class=\"line\">            socketChannel.register(selector,SelectionKey.OP_CONNECT);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     *</div><div class=\"line\">     * @param socketChannel socket通道</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void doWrite(SocketChannel socketChannel) throws IOException &#123;</div><div class=\"line\">        byte[] req = &quot;QUERY TIME ORDER&quot;.getBytes();</div><div class=\"line\">        ByteBuffer writeBuffer = ByteBuffer.allocate(req.length);</div><div class=\"line\">        writeBuffer.put(req);</div><div class=\"line\">        writeBuffer.flip();</div><div class=\"line\">        socketChannel.write(writeBuffer);</div><div class=\"line\">        if (!writeBuffer.hasRemaining())&#123;</div><div class=\"line\">            System.out.println(&quot;send order 2 server succeed&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\"><a href=\"#NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\" class=\"headerlink\" title=\"NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？\"></a>NIO编程比BIO编程难度大很多，如果加上半包读，半包写代码会更复杂，为什么这么复杂NIO到应用越来越广泛了？</h5><ul>\n<li>客户端发送的请求是异步到，可以通过在多路复用器注册op_connect等待后续结果，不需要像之前客户端那样被同步阻塞</li>\n<li>SocketChannel操作都是异步的，如果没有可读写到操作他不会等待，而是返回。这样IO线程可以处理其他链路。</li>\n<li>线程模型优化，一个多路选择器线程可以同时处理成千上万个客户端连接，而且性能不会随着客户端连接数到增加而直线下降<h4 id=\"SocketChannel\"><a href=\"#SocketChannel\" class=\"headerlink\" title=\"SocketChannel\"></a>SocketChannel</h4><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjl7r8lbx7j30os0icq3n.jpg\" alt=\"\"><h4 id=\"ServerSocketChannel\"><a href=\"#ServerSocketChannel\" class=\"headerlink\" title=\"ServerSocketChannel\"></a>ServerSocketChannel</h4><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjl7pyzix5j30c90i2t98.jpg\" alt=\"\"></li>\n</ul>\n<h3 id=\"TimeServer\"><a href=\"#TimeServer\" class=\"headerlink\" title=\"TimeServer\"></a>TimeServer</h3><h4 id=\"服务端序列图\"><a href=\"#服务端序列图\" class=\"headerlink\" title=\"服务端序列图\"></a>服务端序列图</h4><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjlev8ff3jj30m90dkq5f.jpg\" alt=\"\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServer &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义服务端到默认端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        //如果传了参数进来，端口号为外在参数</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //创建一个多路复用器，它是一个独立到线程，负责轮询多路复用器Selector，可以处理多个客户端到并发接入</div><div class=\"line\">        MultiplexerTimeServer timeServer = new MultiplexerTimeServer(port);</div><div class=\"line\">        new Thread (timeServer,&quot;NIO-MultiplexerTimeServer-001&quot;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"MultiplexerTimeServer\"><a href=\"#MultiplexerTimeServer\" class=\"headerlink\" title=\"MultiplexerTimeServer\"></a>MultiplexerTimeServer</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.InetSocketAddress;</div><div class=\"line\">import java.nio.ByteBuffer;</div><div class=\"line\">import java.nio.channels.SelectionKey;</div><div class=\"line\">import java.nio.channels.Selector;</div><div class=\"line\">import java.nio.channels.ServerSocketChannel;</div><div class=\"line\">import java.nio.channels.SocketChannel;</div><div class=\"line\">import java.util.Date;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class MultiplexerTimeServer implements Runnable &#123;</div><div class=\"line\">    //多路复用器</div><div class=\"line\">    private Selector selector;</div><div class=\"line\"></div><div class=\"line\">    private ServerSocketChannel serverChannel;</div><div class=\"line\"></div><div class=\"line\">    private volatile boolean stop;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 初始化多路复用器，绑定监听端口</div><div class=\"line\">     * @param port 端口号</div><div class=\"line\">     */</div><div class=\"line\">    public  MultiplexerTimeServer(int port)&#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //设置多路复用器</div><div class=\"line\">            selector = Selector.open();</div><div class=\"line\">            //设置服务端通信通道，监听流式socket</div><div class=\"line\">            serverChannel = ServerSocketChannel.open();</div><div class=\"line\">            //设置服务端通信通道为非阻塞模式</div><div class=\"line\">            serverChannel.configureBlocking(false);</div><div class=\"line\">            //设置TCP的相关参数：地址，backlog</div><div class=\"line\">            serverChannel.socket().bind(new InetSocketAddress(port),1024);</div><div class=\"line\">            //将服务端通信通道注册到多路复用器上，监听SelectionKey.OP_ACCEPT操作位</div><div class=\"line\">            serverChannel.register(selector, SelectionKey.OP_ACCEPT);</div><div class=\"line\">            System.out.println(&quot;The time server is start int port :&quot;+port);</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.exit(1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public void stop()&#123;</div><div class=\"line\">        this.stop = true;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        while(!stop)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                //每隔一秒多路复用器轮询一次准备就绪的channel</div><div class=\"line\">                selector.select(1000);</div><div class=\"line\">                //当有处于就绪状态的channel时，selector将返回channel的SelectionKey集合。</div><div class=\"line\">                Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();</div><div class=\"line\">                //遍历SelectionKey集合，即遍历当前有效的通道</div><div class=\"line\">                Iterator&lt;SelectionKey&gt; it = selectedKeys.iterator();</div><div class=\"line\">                SelectionKey key = null;</div><div class=\"line\">                while (it.hasNext())&#123;</div><div class=\"line\">                    //获取当前所遍历的key，赋值给新的饮用</div><div class=\"line\">                    key = it.next();</div><div class=\"line\">                    //将当前遍历的key从集合里面移除</div><div class=\"line\">                    it.remove();</div><div class=\"line\">                    try &#123;</div><div class=\"line\">                        //处理当前的通道</div><div class=\"line\">                        handleInput(key);</div><div class=\"line\">                    &#125;catch (Exception e)&#123;</div><div class=\"line\">                        if (key != null)&#123;</div><div class=\"line\">                            key.cancel();</div><div class=\"line\">                            if (key.channel() != null)&#123;</div><div class=\"line\">                                key.channel().close();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        if (selector!=null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                selector.close();</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 处理新接入客户端请求消息，通过selectionKey判断网络事件类型</div><div class=\"line\">     * @param key 就绪状态的通道</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void handleInput(SelectionKey key) throws IOException &#123;</div><div class=\"line\">        //如果当前通道是有效的</div><div class=\"line\">        if (key.isValid())&#123;</div><div class=\"line\">            //下述操作相当于完成了TCP三次握手，TCP物理链路正式成立</div><div class=\"line\">            //如果当前key的通道已经准备好接收一个新的socket连接</div><div class=\"line\">            if (key.isAcceptable())&#123;</div><div class=\"line\">                ServerSocketChannel ssc = (ServerSocketChannel) key.channel();</div><div class=\"line\">                SocketChannel sc = ssc.accept();</div><div class=\"line\">                //设置SocketChannel为异步非阻塞模式</div><div class=\"line\">                sc.configureBlocking(false);</div><div class=\"line\">                sc.register(selector,SelectionKey.OP_READ);</div><div class=\"line\">            &#125;</div><div class=\"line\">            //如果当前key的通道准备好读取数据</div><div class=\"line\">            if (key.isReadable())&#123;</div><div class=\"line\">                SocketChannel sc = (SocketChannel) key.channel();</div><div class=\"line\">                //创建一个ByteBuffer,无法知道客户端发送的码流大小，开辟一个1MB到缓冲区</div><div class=\"line\">                ByteBuffer readBuffer = ByteBuffer.allocate(1024);</div><div class=\"line\">                //使用socketChannel到read方法读取请求码流</div><div class=\"line\">                int readBytes = sc.read(readBuffer);</div><div class=\"line\">                //返回值大于0表示读取到了字节，对字节进行编解码</div><div class=\"line\">                if (readBytes&gt;0)&#123;</div><div class=\"line\">                    //limit=position , position=0,重置mask。一般是结束buf操作，将buf写入输出流时调用，这个必须要调用，否则极有可能position!=limit，导致position后面没有数据，每次写入数据到输出流时，必须确保position=limit。</div><div class=\"line\">                    readBuffer.flip();</div><div class=\"line\">                    //返回缓冲区剩余容量，取值=容量-位置</div><div class=\"line\">                    byte [] bytes = new byte[readBuffer.remaining()];</div><div class=\"line\">                    readBuffer.get(bytes);</div><div class=\"line\">                    String body = new String (bytes,&quot;UTF-8&quot;);</div><div class=\"line\">                    System.out.println(&quot;The time server receive order:&quot;+body);</div><div class=\"line\">                    String currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(body)?new Date(System.currentTimeMillis()).toString():&quot;BAD QUERY&quot;;</div><div class=\"line\">                    doWrite(sc,currentTime);</div><div class=\"line\">                &#125;else if (readBytes&lt;0)&#123;</div><div class=\"line\">                    //返回值为-1表示链路已经关闭，需要关闭SocketChannel，释放资源</div><div class=\"line\">                    key.cancel();</div><div class=\"line\">                    sc.close();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    //=0表示没有读取到字节</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 将应答消息异步发送给客户端</div><div class=\"line\">     * @param channel 将要写入数据的通道</div><div class=\"line\">     * @param response 写入数据到内容</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void doWrite(SocketChannel channel,String response) throws IOException &#123;</div><div class=\"line\">        if (response!=null &amp;&amp; response.trim().length()&gt;0)&#123;</div><div class=\"line\">            //将字符串编码成字节数组</div><div class=\"line\">            byte[] bytes = response.getBytes();</div><div class=\"line\">            //根据字节数组到容量创建ByteBuffer</div><div class=\"line\">            ByteBuffer  writeBuffer  = ByteBuffer.allocate(bytes.length);</div><div class=\"line\">            //将自己数组复制到缓冲区</div><div class=\"line\">            writeBuffer.put(bytes);</div><div class=\"line\">            //对缓冲区进行flip操作</div><div class=\"line\">            writeBuffer.flip();</div><div class=\"line\">            //将缓冲区到字节数组发送出去</div><div class=\"line\">            channel.write(writeBuffer);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Timeclient\"><a href=\"#Timeclient\" class=\"headerlink\" title=\"Timeclient\"></a>Timeclient</h3><h4 id=\"客户端序列图\"><a href=\"#客户端序列图\" class=\"headerlink\" title=\"客户端序列图\"></a>客户端序列图</h4><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjlew2dxbkj30l40gldj1.jpg\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeClient &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义要传输信息的服务端的端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //新建一个客户端线程发起连接</div><div class=\"line\">        new Thread(new TimeClientHandle(&quot;127.0.0.1&quot;,port),&quot;TimeClient-0001&quot;).start();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"TimeClientHandler\"><a href=\"#TimeClientHandler\" class=\"headerlink\" title=\"TimeClientHandler\"></a>TimeClientHandler</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.InetSocketAddress;</div><div class=\"line\">import java.nio.ByteBuffer;</div><div class=\"line\">import java.nio.channels.SelectionKey;</div><div class=\"line\">import java.nio.channels.Selector;</div><div class=\"line\">import java.nio.channels.SocketChannel;</div><div class=\"line\">import java.util.Iterator;</div><div class=\"line\">import java.util.Set;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeClientHandle implements Runnable &#123;</div><div class=\"line\"></div><div class=\"line\">    private String host;</div><div class=\"line\"></div><div class=\"line\">    private int port;</div><div class=\"line\"></div><div class=\"line\">    private Selector selector;</div><div class=\"line\"></div><div class=\"line\">    private SocketChannel socketChannel;</div><div class=\"line\"></div><div class=\"line\">    private volatile boolean stop;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     *初始化客户端参数，</div><div class=\"line\">     * @param host 地址</div><div class=\"line\">     * @param port 端口号</div><div class=\"line\">     */</div><div class=\"line\">    public TimeClientHandle(String host,int port)&#123;</div><div class=\"line\">        this.host = host ==null?&quot;127.0.0.1&quot;:host;</div><div class=\"line\">        this.port = port;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            selector = Selector.open();</div><div class=\"line\">            socketChannel = SocketChannel.open();</div><div class=\"line\">            socketChannel.configureBlocking(false);</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.exit(1);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //连接</div><div class=\"line\">            doConnect();</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">            System.exit(1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        while (!stop) &#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                //每秒轮询遍历一次所有通道</div><div class=\"line\">                selector.select(1000);</div><div class=\"line\">                //获取所有通道到key</div><div class=\"line\">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</div><div class=\"line\">                //遍历所有通道</div><div class=\"line\">                Iterator&lt;SelectionKey&gt; it = selectionKeys.iterator();</div><div class=\"line\">                SelectionKey key = null;</div><div class=\"line\">                while (it.hasNext())&#123;</div><div class=\"line\">                    key = it.next();</div><div class=\"line\">                    //将已遍历到通道从通道集合中移除</div><div class=\"line\">                    it.remove();</div><div class=\"line\">                    try &#123;</div><div class=\"line\">                        //处理当前通道事件</div><div class=\"line\">                        handelInput(key);</div><div class=\"line\">                    &#125;catch (Exception e)&#123;</div><div class=\"line\">                        //如果发生异常，将当前通道关闭</div><div class=\"line\">                        if (key!= null)&#123;</div><div class=\"line\">                            key.cancel();</div><div class=\"line\">                            if (key.channel()!= null)&#123;</div><div class=\"line\">                                key.channel().close();</div><div class=\"line\">                            &#125;</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //读完数据将多路复用选择器关闭</div><div class=\"line\">        if (selector!=null)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                selector.close();</div><div class=\"line\">            &#125; catch (IOException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 处理当前通道</div><div class=\"line\">     * @param key 通道的key</div><div class=\"line\">     * * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void handelInput(SelectionKey key) throws IOException &#123;</div><div class=\"line\">        //如果当前通道是有效的</div><div class=\"line\">        if (key.isValid())&#123;</div><div class=\"line\">            SocketChannel sc = (SocketChannel) key.channel();</div><div class=\"line\">            //如果当前通道没有完成，或者没有</div><div class=\"line\">            if (key.isConnectable()) &#123;</div><div class=\"line\">                if (sc.finishConnect())&#123;</div><div class=\"line\">                    //注册为读状态</div><div class=\"line\">                    sc.register(selector,SelectionKey.OP_READ);</div><div class=\"line\">                    //通过通道发送数据</div><div class=\"line\">                    doWrite(sc);</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    System.exit(1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //如果当前通道是可读到</div><div class=\"line\">            if (key.isReadable())&#123;</div><div class=\"line\">                ByteBuffer readBuffer = ByteBuffer.allocate(1024);</div><div class=\"line\">                int readBytes = sc.read(readBuffer);</div><div class=\"line\">                if (readBytes&gt;0)&#123;</div><div class=\"line\">                    readBuffer.flip();</div><div class=\"line\">                    byte[] bytes = new byte[readBuffer.remaining()];</div><div class=\"line\">                    readBuffer.get(bytes);</div><div class=\"line\">                    String body = new String(bytes,&quot;UTF-8&quot;);</div><div class=\"line\">                    System.out.println(&quot;Now is：&quot;+  body);</div><div class=\"line\">                    this.stop = true;</div><div class=\"line\">                &#125;else if (readBytes&lt;0)&#123;</div><div class=\"line\">                    //对端链路关闭</div><div class=\"line\">                    key.cancel();</div><div class=\"line\">                    sc.close();</div><div class=\"line\">                &#125;else &#123;</div><div class=\"line\">                    //读到0字节 忽略</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * 如果通信通道没有建立，则将通道绑定在多路复用器上；</div><div class=\"line\">     * 如果通信通道已建立，将当前通道状态置为读</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void doConnect() throws IOException &#123;</div><div class=\"line\">        //如果通信通道已建立</div><div class=\"line\">        if (socketChannel.connect(new InetSocketAddress(host,port)))&#123;</div><div class=\"line\">            //注册到多路复用器上，状态为读。</div><div class=\"line\">            socketChannel.register(selector,SelectionKey.OP_READ);</div><div class=\"line\">            //发送请求数据</div><div class=\"line\">            doWrite(socketChannel);</div><div class=\"line\">        &#125;else &#123;</div><div class=\"line\">            //如果通信通道没有建立，则向多路复用器发起连接</div><div class=\"line\">            socketChannel.register(selector,SelectionKey.OP_CONNECT);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     *</div><div class=\"line\">     * @param socketChannel socket通道</div><div class=\"line\">     * @throws IOException</div><div class=\"line\">     */</div><div class=\"line\">    private void doWrite(SocketChannel socketChannel) throws IOException &#123;</div><div class=\"line\">        byte[] req = &quot;QUERY TIME ORDER&quot;.getBytes();</div><div class=\"line\">        ByteBuffer writeBuffer = ByteBuffer.allocate(req.length);</div><div class=\"line\">        writeBuffer.put(req);</div><div class=\"line\">        writeBuffer.flip();</div><div class=\"line\">        socketChannel.write(writeBuffer);</div><div class=\"line\">        if (!writeBuffer.hasRemaining())&#123;</div><div class=\"line\">            System.out.println(&quot;send order 2 server succeed&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"netty-构成","date":"2017-09-05T15:54:32.000Z","_content":"\n###### 非阻塞 I/O 不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步 I/O 起到了更进一步的作用<font color=\"#FF0000\">一个异步方法完成时立即返回并直接或稍后通知用户</font>。\n>Channel\n\n##### Channel 是 NIO <font color=\"#FF0000\">基本的结构</font>。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或多个不同的 I/O 操作（例如读或写）的开放连接。\n\n>Callback\n\n##### callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样<font color=\"#FF0000\">后者就可以在某个合适的时间调用前者</font>。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操作已完成。+\n\n##### Netty 内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口 ChannelHandler 的实现来处理。如下面的代码\n\n```\npublic class ConnectHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {   //1\n        System.out.println(\n                \"Client \" + ctx.channel().remoteAddress() + \" connected\");\n    }\n}\n```\n1. 当建立一个新的连接时调用 ChannelActive()\n\n> Future\n\n##### Future 提供了另外一种<font color=\"#FF0000\">通知应用操作已经完成的方式</font>。这个对象作为一个异步操作结果的占位符,它将在将来的某个时候完成并提供结果。\n\n##### ChannelFuture 提供多个附件方法来允许一个或者多个 ChannelFutureListener 实例.个回调方法 operationComplete() 会在操作完成时调用。<font color=\"#FF0000\">事件监听者能够确认这个操作是否成功或者是错误</font>。ChannelFutureListener 提供的通知机制不需要手动检查操作是否完成的。\n\n##### 每个 Netty 的 outbound I/O 操作都会返回一个 ChannelFuture;这样就不会阻塞。这就是 Netty 所谓的<font color=\"#FF0000\">自底向上的异步和事件驱动</font>。\n\n##### 下面代码描述了如何利用 ChannelFutureListener 。首先，连接到远程地址。接着，通过 ChannelFuture 调用 connect() 来 注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到 Channel，否则我们检索 ChannelFuture 中的Throwable。\n\n```\nChannel channel = ...;\n//不会阻塞\nChannelFuture future = channel.connect(            //1\n        new InetSocketAddress(\"192.168.0.1\", 25));\nfuture.addListener(new ChannelFutureListener() {  //2\n@Override\npublic void operationComplete(ChannelFuture future) {\n    if (future.isSuccess()) {                    //3\n        ByteBuf buffer = Unpooled.copiedBuffer(\n                \"Hello\", Charset.defaultCharset()); //4\n        ChannelFuture wf = future.channel().writeAndFlush(buffer);                //5\n        // ...\n    } else {\n        Throwable cause = future.cause();        //6\n        cause.printStackTrace();\n    }\n}\n});\n```\n1. 异步连接到远程对等节点。调用立即返回并提供 ChannelFuture。\n2. 操作完成后通知注册一个 ChannelFutureListener 。\n3. 当 operationComplete() 调用时检查操作的状态。\n4. 如果成功就创建一个 ByteBuf 来保存数据。\n5. 异步发送数据到远程。再次返回ChannelFuture。\n6. 如果有一个错误则抛出 Throwable,描述错误原因。\n> Event 和 Handler\n##### Netty 使用不同的事件来通知我们更改的状态或<font color=\"#FF0000\">操作的状态</font>.这使我们能够根据发生的事件触发适当的行为:\n- 日志\n- 数据转换\n- 流控制\n- 应用程序逻辑\n##### Netty 是一个网络框架,事件很清晰的跟<font color=\"#FF0000\">入站或出站数据流</font>相关。因为一些事件可能触发<font color=\"#FF0000\">传入的数据</font>或<font color=\"#FF0000\">状态的变化</font>:\n- 活动或非活动连接\n- 数据的读取\n- 用户事件\n- 错误\n出站事件是由于在<font color=\"#FF0000\">未来操来将触发</font>一个动作：\n- 打开或关闭一个连接到远程\n- 写或冲刷数据到 socket\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj948oocb5j30k507gjtl.jpg)\n##### Netty 的 ChannelHandler 是各种<font color=\"#FF0000\">处理程序的基本抽象</font>。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\n>整合\n\n1. FUTURE, CALLBACK 和 HANDLER\n##### Netty 的异步编程模型是建立在 future 和 callback 的概念上的。\n\n##### 拦截操作和转换入站或出站数据只需要您提供回调或利用 future 操作返回的。这使得链操作简单、高效,促进编写可重用的、通用的代码。一个 Netty 的设计的主要目标是促进<font color=\"#FF0000\">关注点分离</font>:你的业务逻辑从网络基础设施应用程序中分离。\n2. SELECTOR, EVENT 和 EVENT LOOP\n##### Netty 通过触发事件从应用程序中抽象出 Selector，从而避免手写调度代码。EventLoop 分配给每个 Channel 来处理所有的事件，包括\n- 注册感兴趣的事件\n- 调度事件到 ChannelHandler\n- 安排进一步行动\n##### EventLoop 本身是由只有一个线程驱动，它给一个 Channel 处理所有的 I/O 事件，并且在 EventLoop 的生命周期内不会改变。\n","source":"_posts/netty-构成.md","raw":"---\ntitle: netty-构成\ndate: 2017-09-05 23:54:32\ntags: javaWeb\ncategories: javaWeb\n---\n\n###### 非阻塞 I/O 不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步 I/O 起到了更进一步的作用<font color=\"#FF0000\">一个异步方法完成时立即返回并直接或稍后通知用户</font>。\n>Channel\n\n##### Channel 是 NIO <font color=\"#FF0000\">基本的结构</font>。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或多个不同的 I/O 操作（例如读或写）的开放连接。\n\n>Callback\n\n##### callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样<font color=\"#FF0000\">后者就可以在某个合适的时间调用前者</font>。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操作已完成。+\n\n##### Netty 内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口 ChannelHandler 的实现来处理。如下面的代码\n\n```\npublic class ConnectHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {   //1\n        System.out.println(\n                \"Client \" + ctx.channel().remoteAddress() + \" connected\");\n    }\n}\n```\n1. 当建立一个新的连接时调用 ChannelActive()\n\n> Future\n\n##### Future 提供了另外一种<font color=\"#FF0000\">通知应用操作已经完成的方式</font>。这个对象作为一个异步操作结果的占位符,它将在将来的某个时候完成并提供结果。\n\n##### ChannelFuture 提供多个附件方法来允许一个或者多个 ChannelFutureListener 实例.个回调方法 operationComplete() 会在操作完成时调用。<font color=\"#FF0000\">事件监听者能够确认这个操作是否成功或者是错误</font>。ChannelFutureListener 提供的通知机制不需要手动检查操作是否完成的。\n\n##### 每个 Netty 的 outbound I/O 操作都会返回一个 ChannelFuture;这样就不会阻塞。这就是 Netty 所谓的<font color=\"#FF0000\">自底向上的异步和事件驱动</font>。\n\n##### 下面代码描述了如何利用 ChannelFutureListener 。首先，连接到远程地址。接着，通过 ChannelFuture 调用 connect() 来 注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到 Channel，否则我们检索 ChannelFuture 中的Throwable。\n\n```\nChannel channel = ...;\n//不会阻塞\nChannelFuture future = channel.connect(            //1\n        new InetSocketAddress(\"192.168.0.1\", 25));\nfuture.addListener(new ChannelFutureListener() {  //2\n@Override\npublic void operationComplete(ChannelFuture future) {\n    if (future.isSuccess()) {                    //3\n        ByteBuf buffer = Unpooled.copiedBuffer(\n                \"Hello\", Charset.defaultCharset()); //4\n        ChannelFuture wf = future.channel().writeAndFlush(buffer);                //5\n        // ...\n    } else {\n        Throwable cause = future.cause();        //6\n        cause.printStackTrace();\n    }\n}\n});\n```\n1. 异步连接到远程对等节点。调用立即返回并提供 ChannelFuture。\n2. 操作完成后通知注册一个 ChannelFutureListener 。\n3. 当 operationComplete() 调用时检查操作的状态。\n4. 如果成功就创建一个 ByteBuf 来保存数据。\n5. 异步发送数据到远程。再次返回ChannelFuture。\n6. 如果有一个错误则抛出 Throwable,描述错误原因。\n> Event 和 Handler\n##### Netty 使用不同的事件来通知我们更改的状态或<font color=\"#FF0000\">操作的状态</font>.这使我们能够根据发生的事件触发适当的行为:\n- 日志\n- 数据转换\n- 流控制\n- 应用程序逻辑\n##### Netty 是一个网络框架,事件很清晰的跟<font color=\"#FF0000\">入站或出站数据流</font>相关。因为一些事件可能触发<font color=\"#FF0000\">传入的数据</font>或<font color=\"#FF0000\">状态的变化</font>:\n- 活动或非活动连接\n- 数据的读取\n- 用户事件\n- 错误\n出站事件是由于在<font color=\"#FF0000\">未来操来将触发</font>一个动作：\n- 打开或关闭一个连接到远程\n- 写或冲刷数据到 socket\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj948oocb5j30k507gjtl.jpg)\n##### Netty 的 ChannelHandler 是各种<font color=\"#FF0000\">处理程序的基本抽象</font>。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\n>整合\n\n1. FUTURE, CALLBACK 和 HANDLER\n##### Netty 的异步编程模型是建立在 future 和 callback 的概念上的。\n\n##### 拦截操作和转换入站或出站数据只需要您提供回调或利用 future 操作返回的。这使得链操作简单、高效,促进编写可重用的、通用的代码。一个 Netty 的设计的主要目标是促进<font color=\"#FF0000\">关注点分离</font>:你的业务逻辑从网络基础设施应用程序中分离。\n2. SELECTOR, EVENT 和 EVENT LOOP\n##### Netty 通过触发事件从应用程序中抽象出 Selector，从而避免手写调度代码。EventLoop 分配给每个 Channel 来处理所有的事件，包括\n- 注册感兴趣的事件\n- 调度事件到 ChannelHandler\n- 安排进一步行动\n##### EventLoop 本身是由只有一个线程驱动，它给一个 Channel 处理所有的 I/O 事件，并且在 EventLoop 的生命周期内不会改变。\n","slug":"netty-构成","published":1,"updated":"2017-09-05T16:15:14.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxcu000810qsjp3r5duw","content":"<h6 id=\"非阻塞-I-O-不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步-I-O-起到了更进一步的作用一个异步方法完成时立即返回并直接或稍后通知用户。\"><a href=\"#非阻塞-I-O-不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步-I-O-起到了更进一步的作用一个异步方法完成时立即返回并直接或稍后通知用户。\" class=\"headerlink\" title=\"非阻塞 I/O 不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步 I/O 起到了更进一步的作用一个异步方法完成时立即返回并直接或稍后通知用户。\"></a>非阻塞 I/O 不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步 I/O 起到了更进一步的作用<font color=\"#FF0000\">一个异步方法完成时立即返回并直接或稍后通知用户</font>。</h6><blockquote>\n<p>Channel</p>\n</blockquote>\n<h5 id=\"Channel-是-NIO-基本的结构。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件-能够执行一个或多个不同的-I-O-操作（例如读或写）的开放连接。\"><a href=\"#Channel-是-NIO-基本的结构。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件-能够执行一个或多个不同的-I-O-操作（例如读或写）的开放连接。\" class=\"headerlink\" title=\"Channel 是 NIO 基本的结构。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或多个不同的 I/O 操作（例如读或写）的开放连接。\"></a>Channel 是 NIO <font color=\"#FF0000\">基本的结构</font>。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或多个不同的 I/O 操作（例如读或写）的开放连接。</h5><blockquote>\n<p>Callback</p>\n</blockquote>\n<h5 id=\"callback-回调-是一个简单的方法-提供给另一种方法作为引用-这样后者就可以在某个合适的时间调用前者。这种技术被广泛使用在各种编程的情况下-最常见的方法之一通知给其他人操作已完成。\"><a href=\"#callback-回调-是一个简单的方法-提供给另一种方法作为引用-这样后者就可以在某个合适的时间调用前者。这种技术被广泛使用在各种编程的情况下-最常见的方法之一通知给其他人操作已完成。\" class=\"headerlink\" title=\"callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样后者就可以在某个合适的时间调用前者。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操作已完成。+\"></a>callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样<font color=\"#FF0000\">后者就可以在某个合适的时间调用前者</font>。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操作已完成。+</h5><h5 id=\"Netty-内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口-ChannelHandler-的实现来处理。如下面的代码\"><a href=\"#Netty-内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口-ChannelHandler-的实现来处理。如下面的代码\" class=\"headerlink\" title=\"Netty 内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口 ChannelHandler 的实现来处理。如下面的代码\"></a>Netty 内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口 ChannelHandler 的实现来处理。如下面的代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ConnectHandler extends ChannelInboundHandlerAdapter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;   //1</div><div class=\"line\">        System.out.println(</div><div class=\"line\">                &quot;Client &quot; + ctx.channel().remoteAddress() + &quot; connected&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>当建立一个新的连接时调用 ChannelActive()</li>\n</ol>\n<blockquote>\n<p>Future</p>\n</blockquote>\n<h5 id=\"Future-提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占位符-它将在将来的某个时候完成并提供结果。\"><a href=\"#Future-提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占位符-它将在将来的某个时候完成并提供结果。\" class=\"headerlink\" title=\"Future 提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占位符,它将在将来的某个时候完成并提供结果。\"></a>Future 提供了另外一种<font color=\"#FF0000\">通知应用操作已经完成的方式</font>。这个对象作为一个异步操作结果的占位符,它将在将来的某个时候完成并提供结果。</h5><h5 id=\"ChannelFuture-提供多个附件方法来允许一个或者多个-ChannelFutureListener-实例-个回调方法-operationComplete-会在操作完成时调用。事件监听者能够确认这个操作是否成功或者是错误。ChannelFutureListener-提供的通知机制不需要手动检查操作是否完成的。\"><a href=\"#ChannelFuture-提供多个附件方法来允许一个或者多个-ChannelFutureListener-实例-个回调方法-operationComplete-会在操作完成时调用。事件监听者能够确认这个操作是否成功或者是错误。ChannelFutureListener-提供的通知机制不需要手动检查操作是否完成的。\" class=\"headerlink\" title=\"ChannelFuture 提供多个附件方法来允许一个或者多个 ChannelFutureListener 实例.个回调方法 operationComplete() 会在操作完成时调用。事件监听者能够确认这个操作是否成功或者是错误。ChannelFutureListener 提供的通知机制不需要手动检查操作是否完成的。\"></a>ChannelFuture 提供多个附件方法来允许一个或者多个 ChannelFutureListener 实例.个回调方法 operationComplete() 会在操作完成时调用。<font color=\"#FF0000\">事件监听者能够确认这个操作是否成功或者是错误</font>。ChannelFutureListener 提供的通知机制不需要手动检查操作是否完成的。</h5><h5 id=\"每个-Netty-的-outbound-I-O-操作都会返回一个-ChannelFuture-这样就不会阻塞。这就是-Netty-所谓的自底向上的异步和事件驱动。\"><a href=\"#每个-Netty-的-outbound-I-O-操作都会返回一个-ChannelFuture-这样就不会阻塞。这就是-Netty-所谓的自底向上的异步和事件驱动。\" class=\"headerlink\" title=\"每个 Netty 的 outbound I/O 操作都会返回一个 ChannelFuture;这样就不会阻塞。这就是 Netty 所谓的自底向上的异步和事件驱动。\"></a>每个 Netty 的 outbound I/O 操作都会返回一个 ChannelFuture;这样就不会阻塞。这就是 Netty 所谓的<font color=\"#FF0000\">自底向上的异步和事件驱动</font>。</h5><h5 id=\"下面代码描述了如何利用-ChannelFutureListener-。首先，连接到远程地址。接着，通过-ChannelFuture-调用-connect-来-注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到-Channel，否则我们检索-ChannelFuture-中的Throwable。\"><a href=\"#下面代码描述了如何利用-ChannelFutureListener-。首先，连接到远程地址。接着，通过-ChannelFuture-调用-connect-来-注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到-Channel，否则我们检索-ChannelFuture-中的Throwable。\" class=\"headerlink\" title=\"下面代码描述了如何利用 ChannelFutureListener 。首先，连接到远程地址。接着，通过 ChannelFuture 调用 connect() 来 注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到 Channel，否则我们检索 ChannelFuture 中的Throwable。\"></a>下面代码描述了如何利用 ChannelFutureListener 。首先，连接到远程地址。接着，通过 ChannelFuture 调用 connect() 来 注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到 Channel，否则我们检索 ChannelFuture 中的Throwable。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Channel channel = ...;</div><div class=\"line\">//不会阻塞</div><div class=\"line\">ChannelFuture future = channel.connect(            //1</div><div class=\"line\">        new InetSocketAddress(&quot;192.168.0.1&quot;, 25));</div><div class=\"line\">future.addListener(new ChannelFutureListener() &#123;  //2</div><div class=\"line\">@Override</div><div class=\"line\">public void operationComplete(ChannelFuture future) &#123;</div><div class=\"line\">    if (future.isSuccess()) &#123;                    //3</div><div class=\"line\">        ByteBuf buffer = Unpooled.copiedBuffer(</div><div class=\"line\">                &quot;Hello&quot;, Charset.defaultCharset()); //4</div><div class=\"line\">        ChannelFuture wf = future.channel().writeAndFlush(buffer);                //5</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        Throwable cause = future.cause();        //6</div><div class=\"line\">        cause.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol>\n<li>异步连接到远程对等节点。调用立即返回并提供 ChannelFuture。</li>\n<li>操作完成后通知注册一个 ChannelFutureListener 。</li>\n<li>当 operationComplete() 调用时检查操作的状态。</li>\n<li>如果成功就创建一个 ByteBuf 来保存数据。</li>\n<li>异步发送数据到远程。再次返回ChannelFuture。</li>\n<li>如果有一个错误则抛出 Throwable,描述错误原因。<blockquote>\n<p>Event 和 Handler</p>\n<h5 id=\"Netty-使用不同的事件来通知我们更改的状态或操作的状态-这使我们能够根据发生的事件触发适当的行为\"><a href=\"#Netty-使用不同的事件来通知我们更改的状态或操作的状态-这使我们能够根据发生的事件触发适当的行为\" class=\"headerlink\" title=\"Netty 使用不同的事件来通知我们更改的状态或操作的状态.这使我们能够根据发生的事件触发适当的行为:\"></a>Netty 使用不同的事件来通知我们更改的状态或<font color=\"#FF0000\">操作的状态</font>.这使我们能够根据发生的事件触发适当的行为:</h5></blockquote>\n</li>\n</ol>\n<ul>\n<li>日志</li>\n<li>数据转换</li>\n<li>流控制</li>\n<li>应用程序逻辑<h5 id=\"Netty-是一个网络框架-事件很清晰的跟入站或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化\"><a href=\"#Netty-是一个网络框架-事件很清晰的跟入站或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化\" class=\"headerlink\" title=\"Netty 是一个网络框架,事件很清晰的跟入站或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化:\"></a>Netty 是一个网络框架,事件很清晰的跟<font color=\"#FF0000\">入站或出站数据流</font>相关。因为一些事件可能触发<font color=\"#FF0000\">传入的数据</font>或<font color=\"#FF0000\">状态的变化</font>:</h5></li>\n<li>活动或非活动连接</li>\n<li>数据的读取</li>\n<li>用户事件</li>\n<li>错误<br>出站事件是由于在<font color=\"#FF0000\">未来操来将触发</font>一个动作：</li>\n<li>打开或关闭一个连接到远程</li>\n<li>写或冲刷数据到 socket<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj948oocb5j30k507gjtl.jpg\" alt=\"\"><h5 id=\"Netty-的-ChannelHandler-是各种处理程序的基本抽象。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\"><a href=\"#Netty-的-ChannelHandler-是各种处理程序的基本抽象。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\" class=\"headerlink\" title=\"Netty 的 ChannelHandler 是各种处理程序的基本抽象。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\"></a>Netty 的 ChannelHandler 是各种<font color=\"#FF0000\">处理程序的基本抽象</font>。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。</h5><blockquote>\n<p>整合</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>FUTURE, CALLBACK 和 HANDLER<h5 id=\"Netty-的异步编程模型是建立在-future-和-callback-的概念上的。\"><a href=\"#Netty-的异步编程模型是建立在-future-和-callback-的概念上的。\" class=\"headerlink\" title=\"Netty 的异步编程模型是建立在 future 和 callback 的概念上的。\"></a>Netty 的异步编程模型是建立在 future 和 callback 的概念上的。</h5></li>\n</ol>\n<h5 id=\"拦截操作和转换入站或出站数据只需要您提供回调或利用-future-操作返回的。这使得链操作简单、高效-促进编写可重用的、通用的代码。一个-Netty-的设计的主要目标是促进关注点分离-你的业务逻辑从网络基础设施应用程序中分离。\"><a href=\"#拦截操作和转换入站或出站数据只需要您提供回调或利用-future-操作返回的。这使得链操作简单、高效-促进编写可重用的、通用的代码。一个-Netty-的设计的主要目标是促进关注点分离-你的业务逻辑从网络基础设施应用程序中分离。\" class=\"headerlink\" title=\"拦截操作和转换入站或出站数据只需要您提供回调或利用 future 操作返回的。这使得链操作简单、高效,促进编写可重用的、通用的代码。一个 Netty 的设计的主要目标是促进关注点分离:你的业务逻辑从网络基础设施应用程序中分离。\"></a>拦截操作和转换入站或出站数据只需要您提供回调或利用 future 操作返回的。这使得链操作简单、高效,促进编写可重用的、通用的代码。一个 Netty 的设计的主要目标是促进<font color=\"#FF0000\">关注点分离</font>:你的业务逻辑从网络基础设施应用程序中分离。</h5><ol>\n<li>SELECTOR, EVENT 和 EVENT LOOP<h5 id=\"Netty-通过触发事件从应用程序中抽象出-Selector，从而避免手写调度代码。EventLoop-分配给每个-Channel-来处理所有的事件，包括\"><a href=\"#Netty-通过触发事件从应用程序中抽象出-Selector，从而避免手写调度代码。EventLoop-分配给每个-Channel-来处理所有的事件，包括\" class=\"headerlink\" title=\"Netty 通过触发事件从应用程序中抽象出 Selector，从而避免手写调度代码。EventLoop 分配给每个 Channel 来处理所有的事件，包括\"></a>Netty 通过触发事件从应用程序中抽象出 Selector，从而避免手写调度代码。EventLoop 分配给每个 Channel 来处理所有的事件，包括</h5></li>\n</ol>\n<ul>\n<li>注册感兴趣的事件</li>\n<li>调度事件到 ChannelHandler</li>\n<li>安排进一步行动<h5 id=\"EventLoop-本身是由只有一个线程驱动，它给一个-Channel-处理所有的-I-O-事件，并且在-EventLoop-的生命周期内不会改变。\"><a href=\"#EventLoop-本身是由只有一个线程驱动，它给一个-Channel-处理所有的-I-O-事件，并且在-EventLoop-的生命周期内不会改变。\" class=\"headerlink\" title=\"EventLoop 本身是由只有一个线程驱动，它给一个 Channel 处理所有的 I/O 事件，并且在 EventLoop 的生命周期内不会改变。\"></a>EventLoop 本身是由只有一个线程驱动，它给一个 Channel 处理所有的 I/O 事件，并且在 EventLoop 的生命周期内不会改变。</h5></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h6 id=\"非阻塞-I-O-不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步-I-O-起到了更进一步的作用一个异步方法完成时立即返回并直接或稍后通知用户。\"><a href=\"#非阻塞-I-O-不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步-I-O-起到了更进一步的作用一个异步方法完成时立即返回并直接或稍后通知用户。\" class=\"headerlink\" title=\"非阻塞 I/O 不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步 I/O 起到了更进一步的作用一个异步方法完成时立即返回并直接或稍后通知用户。\"></a>非阻塞 I/O 不会强迫我们等待操作的完成。在这种能力的基础上，真正的异步 I/O 起到了更进一步的作用<font color=\"#FF0000\">一个异步方法完成时立即返回并直接或稍后通知用户</font>。</h6><blockquote>\n<p>Channel</p>\n</blockquote>\n<h5 id=\"Channel-是-NIO-基本的结构。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件-能够执行一个或多个不同的-I-O-操作（例如读或写）的开放连接。\"><a href=\"#Channel-是-NIO-基本的结构。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件-能够执行一个或多个不同的-I-O-操作（例如读或写）的开放连接。\" class=\"headerlink\" title=\"Channel 是 NIO 基本的结构。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或多个不同的 I/O 操作（例如读或写）的开放连接。\"></a>Channel 是 NIO <font color=\"#FF0000\">基本的结构</font>。它代表了一个用于连接到实体如硬件设备、文件、网络套接字或程序组件,能够执行一个或多个不同的 I/O 操作（例如读或写）的开放连接。</h5><blockquote>\n<p>Callback</p>\n</blockquote>\n<h5 id=\"callback-回调-是一个简单的方法-提供给另一种方法作为引用-这样后者就可以在某个合适的时间调用前者。这种技术被广泛使用在各种编程的情况下-最常见的方法之一通知给其他人操作已完成。\"><a href=\"#callback-回调-是一个简单的方法-提供给另一种方法作为引用-这样后者就可以在某个合适的时间调用前者。这种技术被广泛使用在各种编程的情况下-最常见的方法之一通知给其他人操作已完成。\" class=\"headerlink\" title=\"callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样后者就可以在某个合适的时间调用前者。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操作已完成。+\"></a>callback (回调)是一个简单的方法,提供给另一种方法作为引用,这样<font color=\"#FF0000\">后者就可以在某个合适的时间调用前者</font>。这种技术被广泛使用在各种编程的情况下,最常见的方法之一通知给其他人操作已完成。+</h5><h5 id=\"Netty-内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口-ChannelHandler-的实现来处理。如下面的代码\"><a href=\"#Netty-内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口-ChannelHandler-的实现来处理。如下面的代码\" class=\"headerlink\" title=\"Netty 内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口 ChannelHandler 的实现来处理。如下面的代码\"></a>Netty 内部使用回调处理事件时。一旦这样的回调被触发，事件可以由接口 ChannelHandler 的实现来处理。如下面的代码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">public class ConnectHandler extends ChannelInboundHandlerAdapter &#123;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void channelActive(ChannelHandlerContext ctx) throws Exception &#123;   //1</div><div class=\"line\">        System.out.println(</div><div class=\"line\">                &quot;Client &quot; + ctx.channel().remoteAddress() + &quot; connected&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>当建立一个新的连接时调用 ChannelActive()</li>\n</ol>\n<blockquote>\n<p>Future</p>\n</blockquote>\n<h5 id=\"Future-提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占位符-它将在将来的某个时候完成并提供结果。\"><a href=\"#Future-提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占位符-它将在将来的某个时候完成并提供结果。\" class=\"headerlink\" title=\"Future 提供了另外一种通知应用操作已经完成的方式。这个对象作为一个异步操作结果的占位符,它将在将来的某个时候完成并提供结果。\"></a>Future 提供了另外一种<font color=\"#FF0000\">通知应用操作已经完成的方式</font>。这个对象作为一个异步操作结果的占位符,它将在将来的某个时候完成并提供结果。</h5><h5 id=\"ChannelFuture-提供多个附件方法来允许一个或者多个-ChannelFutureListener-实例-个回调方法-operationComplete-会在操作完成时调用。事件监听者能够确认这个操作是否成功或者是错误。ChannelFutureListener-提供的通知机制不需要手动检查操作是否完成的。\"><a href=\"#ChannelFuture-提供多个附件方法来允许一个或者多个-ChannelFutureListener-实例-个回调方法-operationComplete-会在操作完成时调用。事件监听者能够确认这个操作是否成功或者是错误。ChannelFutureListener-提供的通知机制不需要手动检查操作是否完成的。\" class=\"headerlink\" title=\"ChannelFuture 提供多个附件方法来允许一个或者多个 ChannelFutureListener 实例.个回调方法 operationComplete() 会在操作完成时调用。事件监听者能够确认这个操作是否成功或者是错误。ChannelFutureListener 提供的通知机制不需要手动检查操作是否完成的。\"></a>ChannelFuture 提供多个附件方法来允许一个或者多个 ChannelFutureListener 实例.个回调方法 operationComplete() 会在操作完成时调用。<font color=\"#FF0000\">事件监听者能够确认这个操作是否成功或者是错误</font>。ChannelFutureListener 提供的通知机制不需要手动检查操作是否完成的。</h5><h5 id=\"每个-Netty-的-outbound-I-O-操作都会返回一个-ChannelFuture-这样就不会阻塞。这就是-Netty-所谓的自底向上的异步和事件驱动。\"><a href=\"#每个-Netty-的-outbound-I-O-操作都会返回一个-ChannelFuture-这样就不会阻塞。这就是-Netty-所谓的自底向上的异步和事件驱动。\" class=\"headerlink\" title=\"每个 Netty 的 outbound I/O 操作都会返回一个 ChannelFuture;这样就不会阻塞。这就是 Netty 所谓的自底向上的异步和事件驱动。\"></a>每个 Netty 的 outbound I/O 操作都会返回一个 ChannelFuture;这样就不会阻塞。这就是 Netty 所谓的<font color=\"#FF0000\">自底向上的异步和事件驱动</font>。</h5><h5 id=\"下面代码描述了如何利用-ChannelFutureListener-。首先，连接到远程地址。接着，通过-ChannelFuture-调用-connect-来-注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到-Channel，否则我们检索-ChannelFuture-中的Throwable。\"><a href=\"#下面代码描述了如何利用-ChannelFutureListener-。首先，连接到远程地址。接着，通过-ChannelFuture-调用-connect-来-注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到-Channel，否则我们检索-ChannelFuture-中的Throwable。\" class=\"headerlink\" title=\"下面代码描述了如何利用 ChannelFutureListener 。首先，连接到远程地址。接着，通过 ChannelFuture 调用 connect() 来 注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到 Channel，否则我们检索 ChannelFuture 中的Throwable。\"></a>下面代码描述了如何利用 ChannelFutureListener 。首先，连接到远程地址。接着，通过 ChannelFuture 调用 connect() 来 注册一个新ChannelFutureListener。当监听器被通知连接完成，我们检查状态。如果是成功，就写数据到 Channel，否则我们检索 ChannelFuture 中的Throwable。</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">Channel channel = ...;</div><div class=\"line\">//不会阻塞</div><div class=\"line\">ChannelFuture future = channel.connect(            //1</div><div class=\"line\">        new InetSocketAddress(&quot;192.168.0.1&quot;, 25));</div><div class=\"line\">future.addListener(new ChannelFutureListener() &#123;  //2</div><div class=\"line\">@Override</div><div class=\"line\">public void operationComplete(ChannelFuture future) &#123;</div><div class=\"line\">    if (future.isSuccess()) &#123;                    //3</div><div class=\"line\">        ByteBuf buffer = Unpooled.copiedBuffer(</div><div class=\"line\">                &quot;Hello&quot;, Charset.defaultCharset()); //4</div><div class=\"line\">        ChannelFuture wf = future.channel().writeAndFlush(buffer);                //5</div><div class=\"line\">        // ...</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        Throwable cause = future.cause();        //6</div><div class=\"line\">        cause.printStackTrace();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ol>\n<li>异步连接到远程对等节点。调用立即返回并提供 ChannelFuture。</li>\n<li>操作完成后通知注册一个 ChannelFutureListener 。</li>\n<li>当 operationComplete() 调用时检查操作的状态。</li>\n<li>如果成功就创建一个 ByteBuf 来保存数据。</li>\n<li>异步发送数据到远程。再次返回ChannelFuture。</li>\n<li>如果有一个错误则抛出 Throwable,描述错误原因。<blockquote>\n<p>Event 和 Handler</p>\n<h5 id=\"Netty-使用不同的事件来通知我们更改的状态或操作的状态-这使我们能够根据发生的事件触发适当的行为\"><a href=\"#Netty-使用不同的事件来通知我们更改的状态或操作的状态-这使我们能够根据发生的事件触发适当的行为\" class=\"headerlink\" title=\"Netty 使用不同的事件来通知我们更改的状态或操作的状态.这使我们能够根据发生的事件触发适当的行为:\"></a>Netty 使用不同的事件来通知我们更改的状态或<font color=\"#FF0000\">操作的状态</font>.这使我们能够根据发生的事件触发适当的行为:</h5></blockquote>\n</li>\n</ol>\n<ul>\n<li>日志</li>\n<li>数据转换</li>\n<li>流控制</li>\n<li>应用程序逻辑<h5 id=\"Netty-是一个网络框架-事件很清晰的跟入站或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化\"><a href=\"#Netty-是一个网络框架-事件很清晰的跟入站或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化\" class=\"headerlink\" title=\"Netty 是一个网络框架,事件很清晰的跟入站或出站数据流相关。因为一些事件可能触发传入的数据或状态的变化:\"></a>Netty 是一个网络框架,事件很清晰的跟<font color=\"#FF0000\">入站或出站数据流</font>相关。因为一些事件可能触发<font color=\"#FF0000\">传入的数据</font>或<font color=\"#FF0000\">状态的变化</font>:</h5></li>\n<li>活动或非活动连接</li>\n<li>数据的读取</li>\n<li>用户事件</li>\n<li>错误<br>出站事件是由于在<font color=\"#FF0000\">未来操来将触发</font>一个动作：</li>\n<li>打开或关闭一个连接到远程</li>\n<li>写或冲刷数据到 socket<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj948oocb5j30k507gjtl.jpg\" alt=\"\"><h5 id=\"Netty-的-ChannelHandler-是各种处理程序的基本抽象。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\"><a href=\"#Netty-的-ChannelHandler-是各种处理程序的基本抽象。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\" class=\"headerlink\" title=\"Netty 的 ChannelHandler 是各种处理程序的基本抽象。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。\"></a>Netty 的 ChannelHandler 是各种<font color=\"#FF0000\">处理程序的基本抽象</font>。想象下，每个处理器实例就是一个回调，用于执行对各种事件的响应。</h5><blockquote>\n<p>整合</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>FUTURE, CALLBACK 和 HANDLER<h5 id=\"Netty-的异步编程模型是建立在-future-和-callback-的概念上的。\"><a href=\"#Netty-的异步编程模型是建立在-future-和-callback-的概念上的。\" class=\"headerlink\" title=\"Netty 的异步编程模型是建立在 future 和 callback 的概念上的。\"></a>Netty 的异步编程模型是建立在 future 和 callback 的概念上的。</h5></li>\n</ol>\n<h5 id=\"拦截操作和转换入站或出站数据只需要您提供回调或利用-future-操作返回的。这使得链操作简单、高效-促进编写可重用的、通用的代码。一个-Netty-的设计的主要目标是促进关注点分离-你的业务逻辑从网络基础设施应用程序中分离。\"><a href=\"#拦截操作和转换入站或出站数据只需要您提供回调或利用-future-操作返回的。这使得链操作简单、高效-促进编写可重用的、通用的代码。一个-Netty-的设计的主要目标是促进关注点分离-你的业务逻辑从网络基础设施应用程序中分离。\" class=\"headerlink\" title=\"拦截操作和转换入站或出站数据只需要您提供回调或利用 future 操作返回的。这使得链操作简单、高效,促进编写可重用的、通用的代码。一个 Netty 的设计的主要目标是促进关注点分离:你的业务逻辑从网络基础设施应用程序中分离。\"></a>拦截操作和转换入站或出站数据只需要您提供回调或利用 future 操作返回的。这使得链操作简单、高效,促进编写可重用的、通用的代码。一个 Netty 的设计的主要目标是促进<font color=\"#FF0000\">关注点分离</font>:你的业务逻辑从网络基础设施应用程序中分离。</h5><ol>\n<li>SELECTOR, EVENT 和 EVENT LOOP<h5 id=\"Netty-通过触发事件从应用程序中抽象出-Selector，从而避免手写调度代码。EventLoop-分配给每个-Channel-来处理所有的事件，包括\"><a href=\"#Netty-通过触发事件从应用程序中抽象出-Selector，从而避免手写调度代码。EventLoop-分配给每个-Channel-来处理所有的事件，包括\" class=\"headerlink\" title=\"Netty 通过触发事件从应用程序中抽象出 Selector，从而避免手写调度代码。EventLoop 分配给每个 Channel 来处理所有的事件，包括\"></a>Netty 通过触发事件从应用程序中抽象出 Selector，从而避免手写调度代码。EventLoop 分配给每个 Channel 来处理所有的事件，包括</h5></li>\n</ol>\n<ul>\n<li>注册感兴趣的事件</li>\n<li>调度事件到 ChannelHandler</li>\n<li>安排进一步行动<h5 id=\"EventLoop-本身是由只有一个线程驱动，它给一个-Channel-处理所有的-I-O-事件，并且在-EventLoop-的生命周期内不会改变。\"><a href=\"#EventLoop-本身是由只有一个线程驱动，它给一个-Channel-处理所有的-I-O-事件，并且在-EventLoop-的生命周期内不会改变。\" class=\"headerlink\" title=\"EventLoop 本身是由只有一个线程驱动，它给一个 Channel 处理所有的 I/O 事件，并且在 EventLoop 的生命周期内不会改变。\"></a>EventLoop 本身是由只有一个线程驱动，它给一个 Channel 处理所有的 I/O 事件，并且在 EventLoop 的生命周期内不会改变。</h5></li>\n</ul>\n"},{"title":"Mybatis","date":"2017-08-26T02:09:03.000Z","_content":"# mybatis 架构图\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww0d1m92j30my0gxadu.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww3tfyv2j30kz0irjud.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww4d8yz5j30lr07hwes.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww6l5zxnj30t40pkjuk.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwanqpy7j30x20o2q6l.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwbre8spj30x40nkjum.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwcqxmznj30wr0btwfo.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwdf5c55j31190hudiv.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwepb871j30pj0fadgt.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwf9a6vnj30w20ey0ty.jpg)","source":"_posts/Mybatis.md","raw":"---\ntitle: Mybatis\ndate: 2017-08-26 10:09:03\ntags: javaWeb\ncategories: javaWeb\n---\n# mybatis 架构图\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww0d1m92j30my0gxadu.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww3tfyv2j30kz0irjud.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww4d8yz5j30lr07hwes.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiww6l5zxnj30t40pkjuk.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwanqpy7j30x20o2q6l.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwbre8spj30x40nkjum.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwcqxmznj30wr0btwfo.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwdf5c55j31190hudiv.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwepb871j30pj0fadgt.jpg)\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fiwwf9a6vnj30w20ey0ty.jpg)","slug":"Mybatis","published":1,"updated":"2017-09-02T13:18:54.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxcw000910qs7wjbak8x","content":"<h1 id=\"mybatis-架构图\"><a href=\"#mybatis-架构图\" class=\"headerlink\" title=\"mybatis 架构图\"></a>mybatis 架构图</h1><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww0d1m92j30my0gxadu.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww3tfyv2j30kz0irjud.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww4d8yz5j30lr07hwes.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww6l5zxnj30t40pkjuk.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwanqpy7j30x20o2q6l.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwbre8spj30x40nkjum.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwcqxmznj30wr0btwfo.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwdf5c55j31190hudiv.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwepb871j30pj0fadgt.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwf9a6vnj30w20ey0ty.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mybatis-架构图\"><a href=\"#mybatis-架构图\" class=\"headerlink\" title=\"mybatis 架构图\"></a>mybatis 架构图</h1><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww0d1m92j30my0gxadu.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww3tfyv2j30kz0irjud.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww4d8yz5j30lr07hwes.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiww6l5zxnj30t40pkjuk.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwanqpy7j30x20o2q6l.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwbre8spj30x40nkjum.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwcqxmznj30wr0btwfo.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwdf5c55j31190hudiv.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwepb871j30pj0fadgt.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fiwwf9a6vnj30w20ey0ty.jpg\" alt=\"\"></p>\n"},{"title":"伪异步IO","date":"2017-10-02T15:55:08.000Z","_content":"### BIO改进\n同步阻塞IO面临一个链路需要一个线程处理到问题。后来有人对他到线程进行优化：后端使用一个线程池来处理多个客户端的请求接入，形成客户端个数M 线程池最大线程数N的比例关系，其中M可以远远大于N。通过线程池可以灵活到调配线程资源，减少了创建与销毁线程到开销。设置线程到最大值，防止由于海量并发接入导致到线程耗尽。\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk7pn65g3j30p007n0xd.jpg)\n如图：伪异步IO跟同步阻塞式IO的差别是多了一个环节--线程池，客户端是没有变化的。\n\n### TimeServer 服务端\n\n```\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeServer {\n    public static void main(String[] args) throws IOException {\n        //定义服务端到默认端口号\n        int port = 8080;\n        //如果传了参数进来，端口号为外在参数\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        ServerSocket server = null;\n        try {\n            //新建一个服务端socket\n            server = new ServerSocket(port);\n            System.out.println(\"The time server is  start in port:\"+port);\n            Socket socket = null;\n            //新建一个线程池\n            TimeServerHandlerExecutePool  singleExecutor = new TimeServerHandlerExecutePool(50,1000);\n            while (true) {\n                //如果没有请求过来阻塞在accept\n                socket = server.accept();\n                //如果有请求过来交由线程池来管理\n                singleExecutor.execute(new TimeServerHandler(socket));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }finally {\n            if (server!= null) {\n                System.out.println(\"The time server close\");\n                server.close();\n                server = null;\n            }\n        }\n    }\n}\n```\n### 线程池定义\n\n```\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeServerHandlerExecutePool {\n    //声明ExecutorService线程池\n    private ExecutorService executor;\n    //构造方法给线程池赋值\n    public TimeServerHandlerExecutePool(int maxPoolSize , int queueSize) {\n        executor = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),\n                maxPoolSize,\n                120L,\n                TimeUnit.SECONDS,\n                new ArrayBlockingQueue<Runnable>(queueSize));\n    }\n    //线程执行方法\n    public void execute(java.lang.Runnable task) {\n        executor.execute(task);\n    }\n}\n```\n\n### 线程池类图：\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk8ych9cjj306b096q31.jpg)\n\n","source":"_posts/伪异步IO.md","raw":"---\ntitle: 伪异步IO\ndate: 2017-10-02 23:55:08\ntags: 通信\ncategories: Netty\n---\n### BIO改进\n同步阻塞IO面临一个链路需要一个线程处理到问题。后来有人对他到线程进行优化：后端使用一个线程池来处理多个客户端的请求接入，形成客户端个数M 线程池最大线程数N的比例关系，其中M可以远远大于N。通过线程池可以灵活到调配线程资源，减少了创建与销毁线程到开销。设置线程到最大值，防止由于海量并发接入导致到线程耗尽。\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk7pn65g3j30p007n0xd.jpg)\n如图：伪异步IO跟同步阻塞式IO的差别是多了一个环节--线程池，客户端是没有变化的。\n\n### TimeServer 服务端\n\n```\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeServer {\n    public static void main(String[] args) throws IOException {\n        //定义服务端到默认端口号\n        int port = 8080;\n        //如果传了参数进来，端口号为外在参数\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        ServerSocket server = null;\n        try {\n            //新建一个服务端socket\n            server = new ServerSocket(port);\n            System.out.println(\"The time server is  start in port:\"+port);\n            Socket socket = null;\n            //新建一个线程池\n            TimeServerHandlerExecutePool  singleExecutor = new TimeServerHandlerExecutePool(50,1000);\n            while (true) {\n                //如果没有请求过来阻塞在accept\n                socket = server.accept();\n                //如果有请求过来交由线程池来管理\n                singleExecutor.execute(new TimeServerHandler(socket));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }finally {\n            if (server!= null) {\n                System.out.println(\"The time server close\");\n                server.close();\n                server = null;\n            }\n        }\n    }\n}\n```\n### 线程池定义\n\n```\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * Created by hadoop on 2017/9/15.\n */\npublic class TimeServerHandlerExecutePool {\n    //声明ExecutorService线程池\n    private ExecutorService executor;\n    //构造方法给线程池赋值\n    public TimeServerHandlerExecutePool(int maxPoolSize , int queueSize) {\n        executor = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),\n                maxPoolSize,\n                120L,\n                TimeUnit.SECONDS,\n                new ArrayBlockingQueue<Runnable>(queueSize));\n    }\n    //线程执行方法\n    public void execute(java.lang.Runnable task) {\n        executor.execute(task);\n    }\n}\n```\n\n### 线程池类图：\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk8ych9cjj306b096q31.jpg)\n\n","slug":"伪异步IO","published":1,"updated":"2017-10-03T15:07:07.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxcy000d10qs6fe8r5q5","content":"<h3 id=\"BIO改进\"><a href=\"#BIO改进\" class=\"headerlink\" title=\"BIO改进\"></a>BIO改进</h3><p>同步阻塞IO面临一个链路需要一个线程处理到问题。后来有人对他到线程进行优化：后端使用一个线程池来处理多个客户端的请求接入，形成客户端个数M 线程池最大线程数N的比例关系，其中M可以远远大于N。通过线程池可以灵活到调配线程资源，减少了创建与销毁线程到开销。设置线程到最大值，防止由于海量并发接入导致到线程耗尽。<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk7pn65g3j30p007n0xd.jpg\" alt=\"\"><br>如图：伪异步IO跟同步阻塞式IO的差别是多了一个环节–线程池，客户端是没有变化的。</p>\n<h3 id=\"TimeServer-服务端\"><a href=\"#TimeServer-服务端\" class=\"headerlink\" title=\"TimeServer 服务端\"></a>TimeServer 服务端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.ServerSocket;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServer &#123;</div><div class=\"line\">    public static void main(String[] args) throws IOException &#123;</div><div class=\"line\">        //定义服务端到默认端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        //如果传了参数进来，端口号为外在参数</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ServerSocket server = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //新建一个服务端socket</div><div class=\"line\">            server = new ServerSocket(port);</div><div class=\"line\">            System.out.println(&quot;The time server is  start in port:&quot;+port);</div><div class=\"line\">            Socket socket = null;</div><div class=\"line\">            //新建一个线程池</div><div class=\"line\">            TimeServerHandlerExecutePool  singleExecutor = new TimeServerHandlerExecutePool(50,1000);</div><div class=\"line\">            while (true) &#123;</div><div class=\"line\">                //如果没有请求过来阻塞在accept</div><div class=\"line\">                socket = server.accept();</div><div class=\"line\">                //如果有请求过来交由线程池来管理</div><div class=\"line\">                singleExecutor.execute(new TimeServerHandler(socket));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;finally &#123;</div><div class=\"line\">            if (server!= null) &#123;</div><div class=\"line\">                System.out.println(&quot;The time server close&quot;);</div><div class=\"line\">                server.close();</div><div class=\"line\">                server = null;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"线程池定义\"><a href=\"#线程池定义\" class=\"headerlink\" title=\"线程池定义\"></a>线程池定义</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.concurrent.ArrayBlockingQueue;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.ThreadPoolExecutor;</div><div class=\"line\">import java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServerHandlerExecutePool &#123;</div><div class=\"line\">    //声明ExecutorService线程池</div><div class=\"line\">    private ExecutorService executor;</div><div class=\"line\">    //构造方法给线程池赋值</div><div class=\"line\">    public TimeServerHandlerExecutePool(int maxPoolSize , int queueSize) &#123;</div><div class=\"line\">        executor = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),</div><div class=\"line\">                maxPoolSize,</div><div class=\"line\">                120L,</div><div class=\"line\">                TimeUnit.SECONDS,</div><div class=\"line\">                new ArrayBlockingQueue&lt;Runnable&gt;(queueSize));</div><div class=\"line\">    &#125;</div><div class=\"line\">    //线程执行方法</div><div class=\"line\">    public void execute(java.lang.Runnable task) &#123;</div><div class=\"line\">        executor.execute(task);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"线程池类图：\"><a href=\"#线程池类图：\" class=\"headerlink\" title=\"线程池类图：\"></a>线程池类图：</h3><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk8ych9cjj306b096q31.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BIO改进\"><a href=\"#BIO改进\" class=\"headerlink\" title=\"BIO改进\"></a>BIO改进</h3><p>同步阻塞IO面临一个链路需要一个线程处理到问题。后来有人对他到线程进行优化：后端使用一个线程池来处理多个客户端的请求接入，形成客户端个数M 线程池最大线程数N的比例关系，其中M可以远远大于N。通过线程池可以灵活到调配线程资源，减少了创建与销毁线程到开销。设置线程到最大值，防止由于海量并发接入导致到线程耗尽。<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk7pn65g3j30p007n0xd.jpg\" alt=\"\"><br>如图：伪异步IO跟同步阻塞式IO的差别是多了一个环节–线程池，客户端是没有变化的。</p>\n<h3 id=\"TimeServer-服务端\"><a href=\"#TimeServer-服务端\" class=\"headerlink\" title=\"TimeServer 服务端\"></a>TimeServer 服务端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.ServerSocket;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServer &#123;</div><div class=\"line\">    public static void main(String[] args) throws IOException &#123;</div><div class=\"line\">        //定义服务端到默认端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        //如果传了参数进来，端口号为外在参数</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ServerSocket server = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //新建一个服务端socket</div><div class=\"line\">            server = new ServerSocket(port);</div><div class=\"line\">            System.out.println(&quot;The time server is  start in port:&quot;+port);</div><div class=\"line\">            Socket socket = null;</div><div class=\"line\">            //新建一个线程池</div><div class=\"line\">            TimeServerHandlerExecutePool  singleExecutor = new TimeServerHandlerExecutePool(50,1000);</div><div class=\"line\">            while (true) &#123;</div><div class=\"line\">                //如果没有请求过来阻塞在accept</div><div class=\"line\">                socket = server.accept();</div><div class=\"line\">                //如果有请求过来交由线程池来管理</div><div class=\"line\">                singleExecutor.execute(new TimeServerHandler(socket));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; catch (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;finally &#123;</div><div class=\"line\">            if (server!= null) &#123;</div><div class=\"line\">                System.out.println(&quot;The time server close&quot;);</div><div class=\"line\">                server.close();</div><div class=\"line\">                server = null;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"线程池定义\"><a href=\"#线程池定义\" class=\"headerlink\" title=\"线程池定义\"></a>线程池定义</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.util.concurrent.ArrayBlockingQueue;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.ThreadPoolExecutor;</div><div class=\"line\">import java.util.concurrent.TimeUnit;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/15.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServerHandlerExecutePool &#123;</div><div class=\"line\">    //声明ExecutorService线程池</div><div class=\"line\">    private ExecutorService executor;</div><div class=\"line\">    //构造方法给线程池赋值</div><div class=\"line\">    public TimeServerHandlerExecutePool(int maxPoolSize , int queueSize) &#123;</div><div class=\"line\">        executor = new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors(),</div><div class=\"line\">                maxPoolSize,</div><div class=\"line\">                120L,</div><div class=\"line\">                TimeUnit.SECONDS,</div><div class=\"line\">                new ArrayBlockingQueue&lt;Runnable&gt;(queueSize));</div><div class=\"line\">    &#125;</div><div class=\"line\">    //线程执行方法</div><div class=\"line\">    public void execute(java.lang.Runnable task) &#123;</div><div class=\"line\">        executor.execute(task);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"线程池类图：\"><a href=\"#线程池类图：\" class=\"headerlink\" title=\"线程池类图：\"></a>线程池类图：</h3><p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk8ych9cjj306b096q31.jpg\" alt=\"\"></p>\n"},{"title":"单例模式","date":"2017-10-02T15:53:11.000Z","_content":"- ### 适用场景\n1. 系统只需要一个实例对象：如系统要求提供一个唯一的序列号生成器或资源管理器\n2. 客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。\n- ### 特点\n1. 禁止类的外部直接使用new来创建对象，因此需要将构造函数的可见性改为private\n2. 类的外部无法再使用new来创建对象，但是在类的内部还是可以创建的，可见性只对类外有效\n3. 提供一个可供外部调用的公用静态方法，实例化该成员变量\n- ### 主要优点\n1. 单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。\n2. 由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。\n3. 允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。\n- ### 主要缺点\n1. 由于单例模式中没有抽象层，因此单例类的扩展有很大的困难\n2. 单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。\n3. 现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失。\n- ### 实现手段\n1. 饿汉式：优点在于无须考虑多线程访问问题，可以确保实例的唯一性；从调用速度和反应时间角度来讲，由于单例对象一开始就得以创建，因此要优于懒汉式单例。  由于在类加载时该对象就需要创建，因此从资源利用效率角度来讲，饿汉式单例不及懒汉式单例\n```\nclass EagerSingleton {   \n    private static final EagerSingleton instance = new EagerSingleton();   \n    private EagerSingleton() { }   \n\n    public static EagerSingleton getInstance() {  \n        return instance;   \n    }     \n}\n```\n2. 懒汉式：无须一直占用系统资源，实现了延迟加载。需要通过双重检查锁定等机制进行控制，这将导致系统性能受到一定影响。\n\n```\nclass LazySingleton {   \n    private volatile static LazySingleton instance = null;   \n\n    private LazySingleton() { }   \n\n    public static LazySingleton getInstance() {   \n        //第一重判断  \n        if (instance == null) {  \n            //锁定代码块  \n            synchronized (LazySingleton.class) {  \n                //第二重判断  \n                if (instance == null) {  \n                    instance = new LazySingleton(); //创建单例实例  \n                }  \n            }  \n        }  \n        return instance;   \n    }  \n}\n```\n3.Initialization Demand Holder (IoDH)技术：能够将上面两种单例的缺点都克服，而将两者的优点合二为一。其缺点是与编程语言本身的特性相关，很多面向对象语言不支持IoDH\n\n```\n//Initialization on Demand Holder  \nclass Singleton {  \n    private Singleton() {  \n    }  \n   //内部类在初始化加载的时候不会加载 （延迟特性）\n    private static class HolderClass {  \n            //final 表示初始化赋值后不会再改变\n            private final static Singleton instance = new Singleton();  \n    }  \n\n    public static Singleton getInstance() {  \n        return HolderClass.instance;  \n    }  \n\n}\n```\n\n","source":"_posts/单例模式.md","raw":"---\ntitle: 单例模式\ndate: 2017-10-02 23:53:11\ntags: 设计模式\ncategories: 设计模式\n---\n- ### 适用场景\n1. 系统只需要一个实例对象：如系统要求提供一个唯一的序列号生成器或资源管理器\n2. 客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。\n- ### 特点\n1. 禁止类的外部直接使用new来创建对象，因此需要将构造函数的可见性改为private\n2. 类的外部无法再使用new来创建对象，但是在类的内部还是可以创建的，可见性只对类外有效\n3. 提供一个可供外部调用的公用静态方法，实例化该成员变量\n- ### 主要优点\n1. 单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。\n2. 由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。\n3. 允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。\n- ### 主要缺点\n1. 由于单例模式中没有抽象层，因此单例类的扩展有很大的困难\n2. 单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。\n3. 现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失。\n- ### 实现手段\n1. 饿汉式：优点在于无须考虑多线程访问问题，可以确保实例的唯一性；从调用速度和反应时间角度来讲，由于单例对象一开始就得以创建，因此要优于懒汉式单例。  由于在类加载时该对象就需要创建，因此从资源利用效率角度来讲，饿汉式单例不及懒汉式单例\n```\nclass EagerSingleton {   \n    private static final EagerSingleton instance = new EagerSingleton();   \n    private EagerSingleton() { }   \n\n    public static EagerSingleton getInstance() {  \n        return instance;   \n    }     \n}\n```\n2. 懒汉式：无须一直占用系统资源，实现了延迟加载。需要通过双重检查锁定等机制进行控制，这将导致系统性能受到一定影响。\n\n```\nclass LazySingleton {   \n    private volatile static LazySingleton instance = null;   \n\n    private LazySingleton() { }   \n\n    public static LazySingleton getInstance() {   \n        //第一重判断  \n        if (instance == null) {  \n            //锁定代码块  \n            synchronized (LazySingleton.class) {  \n                //第二重判断  \n                if (instance == null) {  \n                    instance = new LazySingleton(); //创建单例实例  \n                }  \n            }  \n        }  \n        return instance;   \n    }  \n}\n```\n3.Initialization Demand Holder (IoDH)技术：能够将上面两种单例的缺点都克服，而将两者的优点合二为一。其缺点是与编程语言本身的特性相关，很多面向对象语言不支持IoDH\n\n```\n//Initialization on Demand Holder  \nclass Singleton {  \n    private Singleton() {  \n    }  \n   //内部类在初始化加载的时候不会加载 （延迟特性）\n    private static class HolderClass {  \n            //final 表示初始化赋值后不会再改变\n            private final static Singleton instance = new Singleton();  \n    }  \n\n    public static Singleton getInstance() {  \n        return HolderClass.instance;  \n    }  \n\n}\n```\n\n","slug":"单例模式","published":1,"updated":"2017-10-03T15:07:07.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxd0000f10qsf38tgaom","content":"<ul>\n<li><h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3></li>\n</ul>\n<ol>\n<li>系统只需要一个实例对象：如系统要求提供一个唯一的序列号生成器或资源管理器</li>\n<li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li>\n</ol>\n<ul>\n<li><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3></li>\n</ul>\n<ol>\n<li>禁止类的外部直接使用new来创建对象，因此需要将构造函数的可见性改为private</li>\n<li>类的外部无法再使用new来创建对象，但是在类的内部还是可以创建的，可见性只对类外有效</li>\n<li>提供一个可供外部调用的公用静态方法，实例化该成员变量</li>\n</ol>\n<ul>\n<li><h3 id=\"主要优点\"><a href=\"#主要优点\" class=\"headerlink\" title=\"主要优点\"></a>主要优点</h3></li>\n</ul>\n<ol>\n<li>单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。</li>\n<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。</li>\n<li>允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。</li>\n</ol>\n<ul>\n<li><h3 id=\"主要缺点\"><a href=\"#主要缺点\" class=\"headerlink\" title=\"主要缺点\"></a>主要缺点</h3></li>\n</ul>\n<ol>\n<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</li>\n<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li>\n<li>现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失。</li>\n</ol>\n<ul>\n<li><h3 id=\"实现手段\"><a href=\"#实现手段\" class=\"headerlink\" title=\"实现手段\"></a>实现手段</h3></li>\n</ul>\n<ol>\n<li><p>饿汉式：优点在于无须考虑多线程访问问题，可以确保实例的唯一性；从调用速度和反应时间角度来讲，由于单例对象一开始就得以创建，因此要优于懒汉式单例。  由于在类加载时该对象就需要创建，因此从资源利用效率角度来讲，饿汉式单例不及懒汉式单例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">class EagerSingleton &#123;   </div><div class=\"line\">    private static final EagerSingleton instance = new EagerSingleton();   </div><div class=\"line\">    private EagerSingleton() &#123; &#125;   </div><div class=\"line\"></div><div class=\"line\">    public static EagerSingleton getInstance() &#123;  </div><div class=\"line\">        return instance;   </div><div class=\"line\">    &#125;     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>懒汉式：无须一直占用系统资源，实现了延迟加载。需要通过双重检查锁定等机制进行控制，这将导致系统性能受到一定影响。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class LazySingleton &#123;   </div><div class=\"line\">    private volatile static LazySingleton instance = null;   </div><div class=\"line\"></div><div class=\"line\">    private LazySingleton() &#123; &#125;   </div><div class=\"line\"></div><div class=\"line\">    public static LazySingleton getInstance() &#123;   </div><div class=\"line\">        //第一重判断  </div><div class=\"line\">        if (instance == null) &#123;  </div><div class=\"line\">            //锁定代码块  </div><div class=\"line\">            synchronized (LazySingleton.class) &#123;  </div><div class=\"line\">                //第二重判断  </div><div class=\"line\">                if (instance == null) &#123;  </div><div class=\"line\">                    instance = new LazySingleton(); //创建单例实例  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        return instance;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.Initialization Demand Holder (IoDH)技术：能够将上面两种单例的缺点都克服，而将两者的优点合二为一。其缺点是与编程语言本身的特性相关，很多面向对象语言不支持IoDH</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Initialization on Demand Holder  </div><div class=\"line\">class Singleton &#123;  </div><div class=\"line\">    private Singleton() &#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   //内部类在初始化加载的时候不会加载 （延迟特性）</div><div class=\"line\">    private static class HolderClass &#123;  </div><div class=\"line\">            //final 表示初始化赋值后不会再改变</div><div class=\"line\">            private final static Singleton instance = new Singleton();  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    public static Singleton getInstance() &#123;  </div><div class=\"line\">        return HolderClass.instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h3 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h3></li>\n</ul>\n<ol>\n<li>系统只需要一个实例对象：如系统要求提供一个唯一的序列号生成器或资源管理器</li>\n<li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li>\n</ol>\n<ul>\n<li><h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3></li>\n</ul>\n<ol>\n<li>禁止类的外部直接使用new来创建对象，因此需要将构造函数的可见性改为private</li>\n<li>类的外部无法再使用new来创建对象，但是在类的内部还是可以创建的，可见性只对类外有效</li>\n<li>提供一个可供外部调用的公用静态方法，实例化该成员变量</li>\n</ol>\n<ul>\n<li><h3 id=\"主要优点\"><a href=\"#主要优点\" class=\"headerlink\" title=\"主要优点\"></a>主要优点</h3></li>\n</ul>\n<ol>\n<li>单例模式提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它。</li>\n<li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象单例模式无疑可以提高系统的性能。</li>\n<li>允许可变数目的实例。基于单例模式我们可以进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例，既节省系统资源，又解决了单例单例对象共享过多有损性能的问题。</li>\n</ol>\n<ul>\n<li><h3 id=\"主要缺点\"><a href=\"#主要缺点\" class=\"headerlink\" title=\"主要缺点\"></a>主要缺点</h3></li>\n</ul>\n<ol>\n<li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</li>\n<li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起。</li>\n<li>现在很多面向对象语言(如Java、C#)的运行环境都提供了自动垃圾回收的技术，因此，如果实例化的共享对象长时间不被利用，系统会认为它是垃圾，会自动销毁并回收资源，下次利用时又将重新实例化，这将导致共享的单例对象状态的丢失。</li>\n</ol>\n<ul>\n<li><h3 id=\"实现手段\"><a href=\"#实现手段\" class=\"headerlink\" title=\"实现手段\"></a>实现手段</h3></li>\n</ul>\n<ol>\n<li><p>饿汉式：优点在于无须考虑多线程访问问题，可以确保实例的唯一性；从调用速度和反应时间角度来讲，由于单例对象一开始就得以创建，因此要优于懒汉式单例。  由于在类加载时该对象就需要创建，因此从资源利用效率角度来讲，饿汉式单例不及懒汉式单例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">class EagerSingleton &#123;   </div><div class=\"line\">    private static final EagerSingleton instance = new EagerSingleton();   </div><div class=\"line\">    private EagerSingleton() &#123; &#125;   </div><div class=\"line\"></div><div class=\"line\">    public static EagerSingleton getInstance() &#123;  </div><div class=\"line\">        return instance;   </div><div class=\"line\">    &#125;     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>懒汉式：无须一直占用系统资源，实现了延迟加载。需要通过双重检查锁定等机制进行控制，这将导致系统性能受到一定影响。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">class LazySingleton &#123;   </div><div class=\"line\">    private volatile static LazySingleton instance = null;   </div><div class=\"line\"></div><div class=\"line\">    private LazySingleton() &#123; &#125;   </div><div class=\"line\"></div><div class=\"line\">    public static LazySingleton getInstance() &#123;   </div><div class=\"line\">        //第一重判断  </div><div class=\"line\">        if (instance == null) &#123;  </div><div class=\"line\">            //锁定代码块  </div><div class=\"line\">            synchronized (LazySingleton.class) &#123;  </div><div class=\"line\">                //第二重判断  </div><div class=\"line\">                if (instance == null) &#123;  </div><div class=\"line\">                    instance = new LazySingleton(); //创建单例实例  </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        return instance;   </div><div class=\"line\">    &#125;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>3.Initialization Demand Holder (IoDH)技术：能够将上面两种单例的缺点都克服，而将两者的优点合二为一。其缺点是与编程语言本身的特性相关，很多面向对象语言不支持IoDH</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Initialization on Demand Holder  </div><div class=\"line\">class Singleton &#123;  </div><div class=\"line\">    private Singleton() &#123;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">   //内部类在初始化加载的时候不会加载 （延迟特性）</div><div class=\"line\">    private static class HolderClass &#123;  </div><div class=\"line\">            //final 表示初始化赋值后不会再改变</div><div class=\"line\">            private final static Singleton instance = new Singleton();  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">    public static Singleton getInstance() &#123;  </div><div class=\"line\">        return HolderClass.instance;  </div><div class=\"line\">    &#125;  </div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"同步阻塞式IO","date":"2017-10-02T15:56:33.000Z","_content":"### BIO通信模型\n通常由一个独立到Acceptor线程负责监听客户端连接，他接收到客户端连接请求后，为每个客户端创建一个新的线程进行链路处理。处理完后通过输出流返回给客户端，线程销毁。这是典型到一请求一应答通信模型。\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk0aouwa0j30nh07yadu.jpg)\n\n#### 服务端TimeServer\n\n```\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * Created by hadoop on 2017/9/14.\n */\npublic class TimeServer {\n    public static void main(String[] args) {\n        //定义服务端到默认端口号\n        int port = 8080;\n        //如果传了参数进来，端口号为外在参数\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        ServerSocket server = null;\n        try {\n            //创建一个服务端socket\n            server = new ServerSocket(port);\n            System.out.println(\"the time server is start in port:\"+port);\n            Socket socket =    null;\n            //利用循环来监听客户端到连接，\n            while(true){\n                //如果没有连接接入，则阻塞在这一步\n                socket = server.accept();\n                //如果有连接接入\n                new Thread(new TimeServerHandler(socket)).start();\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }finally {\n            if (server != null){\n                System.out.println(\"The time server close\");\n                try {\n                    server.close();\n                }catch (IOException e){\n                    e.printStackTrace();\n                }\n                server=null;\n            }\n        }\n\n    }\n}\n```\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk3muq2nkj30gl078mxc.jpg)\n\n上图是java visual vm 的service线程的堆栈信息的一部分。如图：服务端启动后，会阻塞在循环的31行的accept方法。如果有客户端发送连接过来，跳出accept，执行下面的命令，产生一个新的线程跟客户端通信。\n\n#### 服务端处理方法 TimeServerHandler\n\n```\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.util.Date;\n\n/**\n * Created by hadoop on 2017/9/14.\n */\npublic class TimeServerHandler implements Runnable {\n    private Socket socket;\n    //获取服务端的ServerSocket\n    public TimeServerHandler(Socket socket){\n        this.socket = socket;\n    }\n    @Override\n    public void run() {\n        //定义IO流读方法\n        BufferedReader in = null;\n        //定义IO流写方法\n        PrintWriter  out = null;\n        try {\n            //读取socket的输入流\n            in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n            //写到socket到输出流\n            out = new PrintWriter(this.socket.getOutputStream(),true);\n            String currentTime = null;\n            String body = null;\n            while (true){\n                body = in.readLine();\n                if (body ==null){\n                    break;\n                }\n                System.out.println(\"The time server receive order\");\n                //如果从socket获取到数据是QUERY TIME ORDER，将当前到系统时间发送给客户端，否则将BAD ORDER发送给客户端\n                currentTime = \"QUERY TIME ORDER\".equalsIgnoreCase(body)? new Date(System.currentTimeMillis()).toString():\"BAD ORDER\";\n                out.println(currentTime);\n            }\n        }catch (Exception e){\n            if (in != null){\n                try {\n                    //关闭输入流\n                    in.close();\n                }catch (Exception el){\n                    el.printStackTrace();\n                }\n            }\n            if (out!= null){\n                //关闭输出流\n                out.close();\n                out=null;\n            }\n            if (this.socket!=null){\n                try{\n                    //关闭socket\n                    this.socket.close();\n                }catch (IOException e1){\n                    e1.printStackTrace();\n                }\n                this.socket = null;\n            }\n\n        }\n    }\n}\n```\n#### BIO客户端\n\n```\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\n/**\n * Created by hadoop on 2017/9/14.\n */\npublic class TimeClient {\n    public static void main(String[] args) {\n        //定义要传输信息的服务端的端口号\n        int port = 8080;\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        Socket socket = null;\n        BufferedReader in = null;\n        PrintWriter out = null;\n        try{\n            //新建socket连接\n            socket = new Socket(\"127.0.0.1\",port);\n            //从socket通道读取数据\n            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            //写取数据到socket通道\n            out = new PrintWriter(socket.getOutputStream(),true);\n            //先向socket发送数据，然后从socket读取数据，再打印出来\n            out.println(\"QUERY TIME ORDER\");\n            System.out.println(\"send order 2 server succeed\");\n            String resp = in.readLine();\n            System.out.println(\"now is :\"+resp);\n        }catch (Exception e){\n\n        }finally {\n            //关闭输出流\n            if (out!=null){\n                out.close();\n                out= null;\n            }\n            //关闭输入流\n            if (in != null){\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                in=null;\n            }\n            //关闭socket通道\n            if (socket != null){\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                socket = null;\n            }\n        }\n\n    }\n}\n\n```\n","source":"_posts/同步阻塞式IO.md","raw":"---\ntitle: 同步阻塞式IO\ndate: 2017-10-02 23:56:33\ntags: 通信\ncategories: Netty\n---\n### BIO通信模型\n通常由一个独立到Acceptor线程负责监听客户端连接，他接收到客户端连接请求后，为每个客户端创建一个新的线程进行链路处理。处理完后通过输出流返回给客户端，线程销毁。这是典型到一请求一应答通信模型。\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk0aouwa0j30nh07yadu.jpg)\n\n#### 服务端TimeServer\n\n```\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n/**\n * Created by hadoop on 2017/9/14.\n */\npublic class TimeServer {\n    public static void main(String[] args) {\n        //定义服务端到默认端口号\n        int port = 8080;\n        //如果传了参数进来，端口号为外在参数\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        ServerSocket server = null;\n        try {\n            //创建一个服务端socket\n            server = new ServerSocket(port);\n            System.out.println(\"the time server is start in port:\"+port);\n            Socket socket =    null;\n            //利用循环来监听客户端到连接，\n            while(true){\n                //如果没有连接接入，则阻塞在这一步\n                socket = server.accept();\n                //如果有连接接入\n                new Thread(new TimeServerHandler(socket)).start();\n            }\n        }catch (Exception e){\n            e.printStackTrace();\n        }finally {\n            if (server != null){\n                System.out.println(\"The time server close\");\n                try {\n                    server.close();\n                }catch (IOException e){\n                    e.printStackTrace();\n                }\n                server=null;\n            }\n        }\n\n    }\n}\n```\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fjk3muq2nkj30gl078mxc.jpg)\n\n上图是java visual vm 的service线程的堆栈信息的一部分。如图：服务端启动后，会阻塞在循环的31行的accept方法。如果有客户端发送连接过来，跳出accept，执行下面的命令，产生一个新的线程跟客户端通信。\n\n#### 服务端处理方法 TimeServerHandler\n\n```\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.util.Date;\n\n/**\n * Created by hadoop on 2017/9/14.\n */\npublic class TimeServerHandler implements Runnable {\n    private Socket socket;\n    //获取服务端的ServerSocket\n    public TimeServerHandler(Socket socket){\n        this.socket = socket;\n    }\n    @Override\n    public void run() {\n        //定义IO流读方法\n        BufferedReader in = null;\n        //定义IO流写方法\n        PrintWriter  out = null;\n        try {\n            //读取socket的输入流\n            in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n            //写到socket到输出流\n            out = new PrintWriter(this.socket.getOutputStream(),true);\n            String currentTime = null;\n            String body = null;\n            while (true){\n                body = in.readLine();\n                if (body ==null){\n                    break;\n                }\n                System.out.println(\"The time server receive order\");\n                //如果从socket获取到数据是QUERY TIME ORDER，将当前到系统时间发送给客户端，否则将BAD ORDER发送给客户端\n                currentTime = \"QUERY TIME ORDER\".equalsIgnoreCase(body)? new Date(System.currentTimeMillis()).toString():\"BAD ORDER\";\n                out.println(currentTime);\n            }\n        }catch (Exception e){\n            if (in != null){\n                try {\n                    //关闭输入流\n                    in.close();\n                }catch (Exception el){\n                    el.printStackTrace();\n                }\n            }\n            if (out!= null){\n                //关闭输出流\n                out.close();\n                out=null;\n            }\n            if (this.socket!=null){\n                try{\n                    //关闭socket\n                    this.socket.close();\n                }catch (IOException e1){\n                    e1.printStackTrace();\n                }\n                this.socket = null;\n            }\n\n        }\n    }\n}\n```\n#### BIO客户端\n\n```\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\n/**\n * Created by hadoop on 2017/9/14.\n */\npublic class TimeClient {\n    public static void main(String[] args) {\n        //定义要传输信息的服务端的端口号\n        int port = 8080;\n        if (args != null && args.length>0){\n            try {\n                port = Integer.valueOf(args[0]);\n            }catch (NumberFormatException e){\n                e.printStackTrace();\n            }\n        }\n        Socket socket = null;\n        BufferedReader in = null;\n        PrintWriter out = null;\n        try{\n            //新建socket连接\n            socket = new Socket(\"127.0.0.1\",port);\n            //从socket通道读取数据\n            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            //写取数据到socket通道\n            out = new PrintWriter(socket.getOutputStream(),true);\n            //先向socket发送数据，然后从socket读取数据，再打印出来\n            out.println(\"QUERY TIME ORDER\");\n            System.out.println(\"send order 2 server succeed\");\n            String resp = in.readLine();\n            System.out.println(\"now is :\"+resp);\n        }catch (Exception e){\n\n        }finally {\n            //关闭输出流\n            if (out!=null){\n                out.close();\n                out= null;\n            }\n            //关闭输入流\n            if (in != null){\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                in=null;\n            }\n            //关闭socket通道\n            if (socket != null){\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                socket = null;\n            }\n        }\n\n    }\n}\n\n```\n","slug":"同步阻塞式IO","published":1,"updated":"2017-10-03T15:07:07.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxd3000i10qs9i8gmw5v","content":"<h3 id=\"BIO通信模型\"><a href=\"#BIO通信模型\" class=\"headerlink\" title=\"BIO通信模型\"></a>BIO通信模型</h3><p>通常由一个独立到Acceptor线程负责监听客户端连接，他接收到客户端连接请求后，为每个客户端创建一个新的线程进行链路处理。处理完后通过输出流返回给客户端，线程销毁。这是典型到一请求一应答通信模型。<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk0aouwa0j30nh07yadu.jpg\" alt=\"\"></p>\n<h4 id=\"服务端TimeServer\"><a href=\"#服务端TimeServer\" class=\"headerlink\" title=\"服务端TimeServer\"></a>服务端TimeServer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.ServerSocket;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/14.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServer &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义服务端到默认端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        //如果传了参数进来，端口号为外在参数</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ServerSocket server = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //创建一个服务端socket</div><div class=\"line\">            server = new ServerSocket(port);</div><div class=\"line\">            System.out.println(&quot;the time server is start in port:&quot;+port);</div><div class=\"line\">            Socket socket =    null;</div><div class=\"line\">            //利用循环来监听客户端到连接，</div><div class=\"line\">            while(true)&#123;</div><div class=\"line\">                //如果没有连接接入，则阻塞在这一步</div><div class=\"line\">                socket = server.accept();</div><div class=\"line\">                //如果有连接接入</div><div class=\"line\">                new Thread(new TimeServerHandler(socket)).start();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;catch (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;finally &#123;</div><div class=\"line\">            if (server != null)&#123;</div><div class=\"line\">                System.out.println(&quot;The time server close&quot;);</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    server.close();</div><div class=\"line\">                &#125;catch (IOException e)&#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                server=null;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk3muq2nkj30gl078mxc.jpg\" alt=\"\"></p>\n<p>上图是java visual vm 的service线程的堆栈信息的一部分。如图：服务端启动后，会阻塞在循环的31行的accept方法。如果有客户端发送连接过来，跳出accept，执行下面的命令，产生一个新的线程跟客户端通信。</p>\n<h4 id=\"服务端处理方法-TimeServerHandler\"><a href=\"#服务端处理方法-TimeServerHandler\" class=\"headerlink\" title=\"服务端处理方法 TimeServerHandler\"></a>服务端处理方法 TimeServerHandler</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.io.PrintWriter;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\">import java.util.Date;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/14.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServerHandler implements Runnable &#123;</div><div class=\"line\">    private Socket socket;</div><div class=\"line\">    //获取服务端的ServerSocket</div><div class=\"line\">    public TimeServerHandler(Socket socket)&#123;</div><div class=\"line\">        this.socket = socket;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        //定义IO流读方法</div><div class=\"line\">        BufferedReader in = null;</div><div class=\"line\">        //定义IO流写方法</div><div class=\"line\">        PrintWriter  out = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //读取socket的输入流</div><div class=\"line\">            in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));</div><div class=\"line\">            //写到socket到输出流</div><div class=\"line\">            out = new PrintWriter(this.socket.getOutputStream(),true);</div><div class=\"line\">            String currentTime = null;</div><div class=\"line\">            String body = null;</div><div class=\"line\">            while (true)&#123;</div><div class=\"line\">                body = in.readLine();</div><div class=\"line\">                if (body ==null)&#123;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(&quot;The time server receive order&quot;);</div><div class=\"line\">                //如果从socket获取到数据是QUERY TIME ORDER，将当前到系统时间发送给客户端，否则将BAD ORDER发送给客户端</div><div class=\"line\">                currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(body)? new Date(System.currentTimeMillis()).toString():&quot;BAD ORDER&quot;;</div><div class=\"line\">                out.println(currentTime);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;catch (Exception e)&#123;</div><div class=\"line\">            if (in != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    //关闭输入流</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125;catch (Exception el)&#123;</div><div class=\"line\">                    el.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (out!= null)&#123;</div><div class=\"line\">                //关闭输出流</div><div class=\"line\">                out.close();</div><div class=\"line\">                out=null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (this.socket!=null)&#123;</div><div class=\"line\">                try&#123;</div><div class=\"line\">                    //关闭socket</div><div class=\"line\">                    this.socket.close();</div><div class=\"line\">                &#125;catch (IOException e1)&#123;</div><div class=\"line\">                    e1.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.socket = null;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"BIO客户端\"><a href=\"#BIO客户端\" class=\"headerlink\" title=\"BIO客户端\"></a>BIO客户端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.io.PrintWriter;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/14.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeClient &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义要传输信息的服务端的端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Socket socket = null;</div><div class=\"line\">        BufferedReader in = null;</div><div class=\"line\">        PrintWriter out = null;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            //新建socket连接</div><div class=\"line\">            socket = new Socket(&quot;127.0.0.1&quot;,port);</div><div class=\"line\">            //从socket通道读取数据</div><div class=\"line\">            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</div><div class=\"line\">            //写取数据到socket通道</div><div class=\"line\">            out = new PrintWriter(socket.getOutputStream(),true);</div><div class=\"line\">            //先向socket发送数据，然后从socket读取数据，再打印出来</div><div class=\"line\">            out.println(&quot;QUERY TIME ORDER&quot;);</div><div class=\"line\">            System.out.println(&quot;send order 2 server succeed&quot;);</div><div class=\"line\">            String resp = in.readLine();</div><div class=\"line\">            System.out.println(&quot;now is :&quot;+resp);</div><div class=\"line\">        &#125;catch (Exception e)&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;finally &#123;</div><div class=\"line\">            //关闭输出流</div><div class=\"line\">            if (out!=null)&#123;</div><div class=\"line\">                out.close();</div><div class=\"line\">                out= null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //关闭输入流</div><div class=\"line\">            if (in != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125; catch (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                in=null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //关闭socket通道</div><div class=\"line\">            if (socket != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    socket.close();</div><div class=\"line\">                &#125; catch (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                socket = null;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"BIO通信模型\"><a href=\"#BIO通信模型\" class=\"headerlink\" title=\"BIO通信模型\"></a>BIO通信模型</h3><p>通常由一个独立到Acceptor线程负责监听客户端连接，他接收到客户端连接请求后，为每个客户端创建一个新的线程进行链路处理。处理完后通过输出流返回给客户端，线程销毁。这是典型到一请求一应答通信模型。<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk0aouwa0j30nh07yadu.jpg\" alt=\"\"></p>\n<h4 id=\"服务端TimeServer\"><a href=\"#服务端TimeServer\" class=\"headerlink\" title=\"服务端TimeServer\"></a>服务端TimeServer</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.net.ServerSocket;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/14.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServer &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义服务端到默认端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        //如果传了参数进来，端口号为外在参数</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        ServerSocket server = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //创建一个服务端socket</div><div class=\"line\">            server = new ServerSocket(port);</div><div class=\"line\">            System.out.println(&quot;the time server is start in port:&quot;+port);</div><div class=\"line\">            Socket socket =    null;</div><div class=\"line\">            //利用循环来监听客户端到连接，</div><div class=\"line\">            while(true)&#123;</div><div class=\"line\">                //如果没有连接接入，则阻塞在这一步</div><div class=\"line\">                socket = server.accept();</div><div class=\"line\">                //如果有连接接入</div><div class=\"line\">                new Thread(new TimeServerHandler(socket)).start();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;catch (Exception e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;finally &#123;</div><div class=\"line\">            if (server != null)&#123;</div><div class=\"line\">                System.out.println(&quot;The time server close&quot;);</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    server.close();</div><div class=\"line\">                &#125;catch (IOException e)&#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                server=null;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fjk3muq2nkj30gl078mxc.jpg\" alt=\"\"></p>\n<p>上图是java visual vm 的service线程的堆栈信息的一部分。如图：服务端启动后，会阻塞在循环的31行的accept方法。如果有客户端发送连接过来，跳出accept，执行下面的命令，产生一个新的线程跟客户端通信。</p>\n<h4 id=\"服务端处理方法-TimeServerHandler\"><a href=\"#服务端处理方法-TimeServerHandler\" class=\"headerlink\" title=\"服务端处理方法 TimeServerHandler\"></a>服务端处理方法 TimeServerHandler</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.io.PrintWriter;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\">import java.util.Date;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/14.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeServerHandler implements Runnable &#123;</div><div class=\"line\">    private Socket socket;</div><div class=\"line\">    //获取服务端的ServerSocket</div><div class=\"line\">    public TimeServerHandler(Socket socket)&#123;</div><div class=\"line\">        this.socket = socket;</div><div class=\"line\">    &#125;</div><div class=\"line\">    @Override</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        //定义IO流读方法</div><div class=\"line\">        BufferedReader in = null;</div><div class=\"line\">        //定义IO流写方法</div><div class=\"line\">        PrintWriter  out = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //读取socket的输入流</div><div class=\"line\">            in = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));</div><div class=\"line\">            //写到socket到输出流</div><div class=\"line\">            out = new PrintWriter(this.socket.getOutputStream(),true);</div><div class=\"line\">            String currentTime = null;</div><div class=\"line\">            String body = null;</div><div class=\"line\">            while (true)&#123;</div><div class=\"line\">                body = in.readLine();</div><div class=\"line\">                if (body ==null)&#123;</div><div class=\"line\">                    break;</div><div class=\"line\">                &#125;</div><div class=\"line\">                System.out.println(&quot;The time server receive order&quot;);</div><div class=\"line\">                //如果从socket获取到数据是QUERY TIME ORDER，将当前到系统时间发送给客户端，否则将BAD ORDER发送给客户端</div><div class=\"line\">                currentTime = &quot;QUERY TIME ORDER&quot;.equalsIgnoreCase(body)? new Date(System.currentTimeMillis()).toString():&quot;BAD ORDER&quot;;</div><div class=\"line\">                out.println(currentTime);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;catch (Exception e)&#123;</div><div class=\"line\">            if (in != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    //关闭输入流</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125;catch (Exception el)&#123;</div><div class=\"line\">                    el.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (out!= null)&#123;</div><div class=\"line\">                //关闭输出流</div><div class=\"line\">                out.close();</div><div class=\"line\">                out=null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (this.socket!=null)&#123;</div><div class=\"line\">                try&#123;</div><div class=\"line\">                    //关闭socket</div><div class=\"line\">                    this.socket.close();</div><div class=\"line\">                &#125;catch (IOException e1)&#123;</div><div class=\"line\">                    e1.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.socket = null;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"BIO客户端\"><a href=\"#BIO客户端\" class=\"headerlink\" title=\"BIO客户端\"></a>BIO客户端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">import java.io.BufferedReader;</div><div class=\"line\">import java.io.IOException;</div><div class=\"line\">import java.io.InputStreamReader;</div><div class=\"line\">import java.io.PrintWriter;</div><div class=\"line\">import java.net.Socket;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/9/14.</div><div class=\"line\"> */</div><div class=\"line\">public class TimeClient &#123;</div><div class=\"line\">    public static void main(String[] args) &#123;</div><div class=\"line\">        //定义要传输信息的服务端的端口号</div><div class=\"line\">        int port = 8080;</div><div class=\"line\">        if (args != null &amp;&amp; args.length&gt;0)&#123;</div><div class=\"line\">            try &#123;</div><div class=\"line\">                port = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;catch (NumberFormatException e)&#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        Socket socket = null;</div><div class=\"line\">        BufferedReader in = null;</div><div class=\"line\">        PrintWriter out = null;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            //新建socket连接</div><div class=\"line\">            socket = new Socket(&quot;127.0.0.1&quot;,port);</div><div class=\"line\">            //从socket通道读取数据</div><div class=\"line\">            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));</div><div class=\"line\">            //写取数据到socket通道</div><div class=\"line\">            out = new PrintWriter(socket.getOutputStream(),true);</div><div class=\"line\">            //先向socket发送数据，然后从socket读取数据，再打印出来</div><div class=\"line\">            out.println(&quot;QUERY TIME ORDER&quot;);</div><div class=\"line\">            System.out.println(&quot;send order 2 server succeed&quot;);</div><div class=\"line\">            String resp = in.readLine();</div><div class=\"line\">            System.out.println(&quot;now is :&quot;+resp);</div><div class=\"line\">        &#125;catch (Exception e)&#123;</div><div class=\"line\"></div><div class=\"line\">        &#125;finally &#123;</div><div class=\"line\">            //关闭输出流</div><div class=\"line\">            if (out!=null)&#123;</div><div class=\"line\">                out.close();</div><div class=\"line\">                out= null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //关闭输入流</div><div class=\"line\">            if (in != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    in.close();</div><div class=\"line\">                &#125; catch (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                in=null;</div><div class=\"line\">            &#125;</div><div class=\"line\">            //关闭socket通道</div><div class=\"line\">            if (socket != null)&#123;</div><div class=\"line\">                try &#123;</div><div class=\"line\">                    socket.close();</div><div class=\"line\">                &#125; catch (IOException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">                socket = null;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Tread Soft To You","date":"2017-09-01T15:54:52.000Z","_content":">Today ,I took part in an English Salotto,I meet one project:\"Whthere you treat villain soft?\".\n\n\"villain is bad man , so I should disdain,abominate it \". this is my first thinking , I said that to my friend.\n\nbut I have been worryied , arter a second.\n\n\"May I can always be a good man?\"\n\nI don't believe that. May be. I should tread bad one more soft. May be , I could be a villain ,at nest second. every body are two aspect. he/she must do some thing wrong.\n\nI wish I was treated soft when I make some mistake. becaulse ,I was already be paint. so ....","source":"_posts/Tread-Soft-To-You.md","raw":"---\ntitle: Tread Soft To You\ndate: 2017-09-01 23:54:52\ntags: 随笔集\ncategories: 随笔集\n---\n>Today ,I took part in an English Salotto,I meet one project:\"Whthere you treat villain soft?\".\n\n\"villain is bad man , so I should disdain,abominate it \". this is my first thinking , I said that to my friend.\n\nbut I have been worryied , arter a second.\n\n\"May I can always be a good man?\"\n\nI don't believe that. May be. I should tread bad one more soft. May be , I could be a villain ,at nest second. every body are two aspect. he/she must do some thing wrong.\n\nI wish I was treated soft when I make some mistake. becaulse ,I was already be paint. so ....","slug":"Tread-Soft-To-You","published":1,"updated":"2017-09-02T13:18:54.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxd5000k10qsxona3m4s","content":"<blockquote>\n<p>Today ,I took part in an English Salotto,I meet one project:”Whthere you treat villain soft?”.</p>\n</blockquote>\n<p>“villain is bad man , so I should disdain,abominate it “. this is my first thinking , I said that to my friend.</p>\n<p>but I have been worryied , arter a second.</p>\n<p>“May I can always be a good man?”</p>\n<p>I don’t believe that. May be. I should tread bad one more soft. May be , I could be a villain ,at nest second. every body are two aspect. he/she must do some thing wrong.</p>\n<p>I wish I was treated soft when I make some mistake. becaulse ,I was already be paint. so ….</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Today ,I took part in an English Salotto,I meet one project:”Whthere you treat villain soft?”.</p>\n</blockquote>\n<p>“villain is bad man , so I should disdain,abominate it “. this is my first thinking , I said that to my friend.</p>\n<p>but I have been worryied , arter a second.</p>\n<p>“May I can always be a good man?”</p>\n<p>I don’t believe that. May be. I should tread bad one more soft. May be , I could be a villain ,at nest second. every body are two aspect. he/she must do some thing wrong.</p>\n<p>I wish I was treated soft when I make some mistake. becaulse ,I was already be paint. so ….</p>\n"},{"title":"忍受痛苦，享受宁静，追寻未来","date":"2017-10-09T15:49:09.000Z","_content":"","source":"_posts/忍受痛苦，享受宁静，追寻未来.md","raw":"---\ntitle: 忍受痛苦，享受宁静，追寻未来\ndate: 2017-10-09 23:49:09\ntags:\n---\n","slug":"忍受痛苦，享受宁静，追寻未来","published":1,"updated":"2017-10-09T15:49:09.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxda000p10qs32ri91um","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"常怀敬畏之心 常守慎独之境","date":"2017-10-02T16:09:30.000Z","_content":"### 常怀敬畏之心\n###### 必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\n### 常守慎独之境\n###### 人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。","source":"_posts/常怀敬畏之心-常守慎独之境.md","raw":"---\ntitle: 常怀敬畏之心 常守慎独之境\ndate: 2017-10-03 00:09:30\ntags: 修炼\ncategories: 修炼\n---\n### 常怀敬畏之心\n###### 必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\n### 常守慎独之境\n###### 人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。","slug":"常怀敬畏之心-常守慎独之境","published":1,"updated":"2017-10-03T15:07:07.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdb000s10qs8aqlz61n","content":"<h3 id=\"常怀敬畏之心\"><a href=\"#常怀敬畏之心\" class=\"headerlink\" title=\"常怀敬畏之心\"></a>常怀敬畏之心</h3><h6 id=\"必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\"><a href=\"#必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\" class=\"headerlink\" title=\"必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\"></a>必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。</h6><h3 id=\"常守慎独之境\"><a href=\"#常守慎独之境\" class=\"headerlink\" title=\"常守慎独之境\"></a>常守慎独之境</h3><h6 id=\"人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。\"><a href=\"#人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。\" class=\"headerlink\" title=\"人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。\"></a>人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。</h6>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常怀敬畏之心\"><a href=\"#常怀敬畏之心\" class=\"headerlink\" title=\"常怀敬畏之心\"></a>常怀敬畏之心</h3><h6 id=\"必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\"><a href=\"#必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\" class=\"headerlink\" title=\"必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。\"></a>必须有敬畏之心，敬畏生命，敬畏自然，天地之间留给我们的是小道，只有有所敬，有所畏，才能脚踏实地的往前行走，避免生命不能承受之轻。</h6><h3 id=\"常守慎独之境\"><a href=\"#常守慎独之境\" class=\"headerlink\" title=\"常守慎独之境\"></a>常守慎独之境</h3><h6 id=\"人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。\"><a href=\"#人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。\" class=\"headerlink\" title=\"人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。\"></a>人之品行，莫见乎隐，莫显乎微。慎独，就是个人独处、无人监督时，仍能自我约束、严于律己，做到“欲不纵而尘不染”，它是一种情操、一种修养、一种境界、一种坦荡。</h6>"},{"title":"hadoop general 1","date":"2017-09-01T15:43:23.000Z","_content":"这是一片翻译文章，详情请参考[single node](http://hadoop.apache.org/docs/r2.7.4/hadoop-project-dist/hadoop-common/SingleCluster.html)\n> 伪分布式(单节点集群)搭建\n\n1. 概述：该文章是用来描述怎么快速的安装和配置一个单节点hadoop，这样可以让你能够快速使用hadoop的 MapReduce以及HDFS组件。\n2. 支持平台：GNU和linux是hadoop的开发平台和生产平台，如果使用GNU或者linux系统作为系统节点，节点数可达到2000个。当然hadoop也支持windows系统，这里就不作介绍了。详情请go to [windows](https://wiki.apache.org/hadoop/Hadoop2OnWindows)\n3. 软件要求:jdk是必须要安装的，选择oraclejdk1.7+或者openjdk1.7+就可以了。为了方便hadoop脚本管理和调用hadoop的守护进程，ssh也是必须安装的。\n4. 软件安装：对于ubantu系统，安装SSH可以这么做，其他系统请自行摸索，如果是center os 7.0+ 可以参考本人前面的博客。\n    ```\n     sudo apt-get install ssh\n    sudo apt-get install rsync\n    ```\n5. 下载：[可以去这里下载hadoop的镜像](http://www.apache.org/dyn/closer.cgi/hadoop/common/)\n6. 准备开始一个hadoop集群的搭建：先将hadoop的分布式系统解压缩，然后编辑etc/hadoop/hadoop-env.sh，加入java的环境变量\n    ```\n      # set to the root of your Java installation\n    export JAVA_HOME=/usr/java/latest\n    ```\n    执行下面的指令\n    ```\n    bin/hadoop\n    ```\n    系统将会展示3haodoop脚本的个使用辅助程序\n    ```\n    Local (Standalone) Mode\n    Pseudo-Distributed Mode\n    Fully-Distributed Mode\n    ```\n    选中其中的任意一个都可以开始你的hadoop集群。\n7. 单节点操作：一般的，hadoop被配置运行在非分布式模式中，也就是说是一个独立的java程序，可以用来debbug调试问题。下面创建一个input目录，用来存储所有的xml文件，并作为输入，output文件夹作为输出。\n·\nmkdir input\ncp etc/hadoop/*.xml input\nbin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output 'dfs[a-z.]+'\ncat output/*\n·\n8. 伪分布式操作：hadoop可以在伪分布式模式下运行单个节点，在这种情况下，每个hadoop的守护程序都是一个独立的java进程。配置文件如下：\n\n    etc/hadoop/core-site.xml:\n    ```\n    <configuration>\n        <property>\n            <name>fs.defaultFS</name>\n            <value>hdfs://localhost:9000</value>\n        </property>\n    </configuration>\n    ```\n    etc/hadoop/hdfs-site.xml:\n    ```\n    <configuration>\n        <property>\n           <name>dfs.replication</name>\n           <value>1</value>\n         </property>\n    </configuration>\n    ```\n9. 配置伪分布式的ssh\n    ```\n    ssh localhost\n    ```\n    如果不需要密码可以直接登ssh到本地执行下面的指令：\n    ```\n    ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n    chmod 0600 ~/.ssh/authorized_keys\n    ```\n10. 执行：下面的指令是执行本地MapReduce任务的命令\n    ```\n    1.初始化文件系统\n    bin/hdfs namenode -format\n    2.启动命名节点守护进程以及数据节点守护进程\n    sbin/start-dfs.sh\n    hadoop的日志输出目录是 $HADOOP_LOG_DIR所示的值，默认是HADOOP_HOME/logs\n    3.打开名字节点的web接口。默认是\n    NameNode - http://localhost:50070/\n    4.创建HDFS目录，用来执行MapReduce目录\n    bin/hdfs dfs -mkdir /user\n    bin/hdfs dfs -mkdir /user/<username>\n    5.复制输入目录的东西到分布式目录\n    bin/hdfs dfs -put etc/hadoop input\n    6.运行示例\n    bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output 'dfs[a-z.]+'\n    7.审核输出文件目录，将输出文件的内容从分布式目录里拷贝到本地文件系统里面，然后审核\n    bin/hdfs dfs -get output output\n    cat output/*\n    或者直接在分布式系统里面查看文件\n    bin/hdfs dfs -cat output/*\n    8.关闭守护陈旭\n    sbin/stop-dfs.sh\n    ```\n11. 单节点的分布式文件系统：通过设置少量参数，额外运行资源管理守护程序，和节点管理守护程序，达到在为分布式模式下分布式文件系统中运行MapReduce工程。接下来的指令是在上一步的1-4点都完成的情况下执行。\n    1.配置etc/hadoop/mapred-site.xml文件\n     ```<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n\t</configuration>    ```\n    配置etc/hadoop/yarn-site.xml:文件\n    ```\n    <configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n</configuration>\n    ```\n    2.启动资源管理守护程序和数据节点守护程序\n    ```\n\tsbin/start-yarn.sh    \n\t```\n    3.打开资源管理的web接口，默认值是下面的\n    ```\n\tResourceManager - http://localhost:8088/    \n\t```\n    4.运行mapreduce程序\n    5.关闭资源节点\n    ```\n\tsbin/stop-yarn.sh    \n\t```","source":"_posts/hadoop-general-1.md","raw":"---\ntitle: hadoop general 1\ndate: 2017-09-01 23:43:23\ntags: hadoop\ncategories: hadoop\n---\n这是一片翻译文章，详情请参考[single node](http://hadoop.apache.org/docs/r2.7.4/hadoop-project-dist/hadoop-common/SingleCluster.html)\n> 伪分布式(单节点集群)搭建\n\n1. 概述：该文章是用来描述怎么快速的安装和配置一个单节点hadoop，这样可以让你能够快速使用hadoop的 MapReduce以及HDFS组件。\n2. 支持平台：GNU和linux是hadoop的开发平台和生产平台，如果使用GNU或者linux系统作为系统节点，节点数可达到2000个。当然hadoop也支持windows系统，这里就不作介绍了。详情请go to [windows](https://wiki.apache.org/hadoop/Hadoop2OnWindows)\n3. 软件要求:jdk是必须要安装的，选择oraclejdk1.7+或者openjdk1.7+就可以了。为了方便hadoop脚本管理和调用hadoop的守护进程，ssh也是必须安装的。\n4. 软件安装：对于ubantu系统，安装SSH可以这么做，其他系统请自行摸索，如果是center os 7.0+ 可以参考本人前面的博客。\n    ```\n     sudo apt-get install ssh\n    sudo apt-get install rsync\n    ```\n5. 下载：[可以去这里下载hadoop的镜像](http://www.apache.org/dyn/closer.cgi/hadoop/common/)\n6. 准备开始一个hadoop集群的搭建：先将hadoop的分布式系统解压缩，然后编辑etc/hadoop/hadoop-env.sh，加入java的环境变量\n    ```\n      # set to the root of your Java installation\n    export JAVA_HOME=/usr/java/latest\n    ```\n    执行下面的指令\n    ```\n    bin/hadoop\n    ```\n    系统将会展示3haodoop脚本的个使用辅助程序\n    ```\n    Local (Standalone) Mode\n    Pseudo-Distributed Mode\n    Fully-Distributed Mode\n    ```\n    选中其中的任意一个都可以开始你的hadoop集群。\n7. 单节点操作：一般的，hadoop被配置运行在非分布式模式中，也就是说是一个独立的java程序，可以用来debbug调试问题。下面创建一个input目录，用来存储所有的xml文件，并作为输入，output文件夹作为输出。\n·\nmkdir input\ncp etc/hadoop/*.xml input\nbin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output 'dfs[a-z.]+'\ncat output/*\n·\n8. 伪分布式操作：hadoop可以在伪分布式模式下运行单个节点，在这种情况下，每个hadoop的守护程序都是一个独立的java进程。配置文件如下：\n\n    etc/hadoop/core-site.xml:\n    ```\n    <configuration>\n        <property>\n            <name>fs.defaultFS</name>\n            <value>hdfs://localhost:9000</value>\n        </property>\n    </configuration>\n    ```\n    etc/hadoop/hdfs-site.xml:\n    ```\n    <configuration>\n        <property>\n           <name>dfs.replication</name>\n           <value>1</value>\n         </property>\n    </configuration>\n    ```\n9. 配置伪分布式的ssh\n    ```\n    ssh localhost\n    ```\n    如果不需要密码可以直接登ssh到本地执行下面的指令：\n    ```\n    ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\n    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys\n    chmod 0600 ~/.ssh/authorized_keys\n    ```\n10. 执行：下面的指令是执行本地MapReduce任务的命令\n    ```\n    1.初始化文件系统\n    bin/hdfs namenode -format\n    2.启动命名节点守护进程以及数据节点守护进程\n    sbin/start-dfs.sh\n    hadoop的日志输出目录是 $HADOOP_LOG_DIR所示的值，默认是HADOOP_HOME/logs\n    3.打开名字节点的web接口。默认是\n    NameNode - http://localhost:50070/\n    4.创建HDFS目录，用来执行MapReduce目录\n    bin/hdfs dfs -mkdir /user\n    bin/hdfs dfs -mkdir /user/<username>\n    5.复制输入目录的东西到分布式目录\n    bin/hdfs dfs -put etc/hadoop input\n    6.运行示例\n    bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output 'dfs[a-z.]+'\n    7.审核输出文件目录，将输出文件的内容从分布式目录里拷贝到本地文件系统里面，然后审核\n    bin/hdfs dfs -get output output\n    cat output/*\n    或者直接在分布式系统里面查看文件\n    bin/hdfs dfs -cat output/*\n    8.关闭守护陈旭\n    sbin/stop-dfs.sh\n    ```\n11. 单节点的分布式文件系统：通过设置少量参数，额外运行资源管理守护程序，和节点管理守护程序，达到在为分布式模式下分布式文件系统中运行MapReduce工程。接下来的指令是在上一步的1-4点都完成的情况下执行。\n    1.配置etc/hadoop/mapred-site.xml文件\n     ```<configuration>\n    <property>\n        <name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n\t</configuration>    ```\n    配置etc/hadoop/yarn-site.xml:文件\n    ```\n    <configuration>\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n</configuration>\n    ```\n    2.启动资源管理守护程序和数据节点守护程序\n    ```\n\tsbin/start-yarn.sh    \n\t```\n    3.打开资源管理的web接口，默认值是下面的\n    ```\n\tResourceManager - http://localhost:8088/    \n\t```\n    4.运行mapreduce程序\n    5.关闭资源节点\n    ```\n\tsbin/stop-yarn.sh    \n\t```","slug":"hadoop-general-1","published":1,"updated":"2017-09-02T13:18:54.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdh000w10qsqt3tl81k","content":"<p>这是一片翻译文章，详情请参考<a href=\"http://hadoop.apache.org/docs/r2.7.4/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"external\">single node</a></p>\n<blockquote>\n<p>伪分布式(单节点集群)搭建</p>\n</blockquote>\n<ol>\n<li>概述：该文章是用来描述怎么快速的安装和配置一个单节点hadoop，这样可以让你能够快速使用hadoop的 MapReduce以及HDFS组件。</li>\n<li>支持平台：GNU和linux是hadoop的开发平台和生产平台，如果使用GNU或者linux系统作为系统节点，节点数可达到2000个。当然hadoop也支持windows系统，这里就不作介绍了。详情请go to <a href=\"https://wiki.apache.org/hadoop/Hadoop2OnWindows\" target=\"_blank\" rel=\"external\">windows</a></li>\n<li>软件要求:jdk是必须要安装的，选择oraclejdk1.7+或者openjdk1.7+就可以了。为了方便hadoop脚本管理和调用hadoop的守护进程，ssh也是必须安装的。</li>\n<li><p>软件安装：对于ubantu系统，安装SSH可以这么做，其他系统请自行摸索，如果是center os 7.0+ 可以参考本人前面的博客。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> sudo apt-get install ssh</div><div class=\"line\">sudo apt-get install rsync</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载：<a href=\"http://www.apache.org/dyn/closer.cgi/hadoop/common/\" target=\"_blank\" rel=\"external\">可以去这里下载hadoop的镜像</a></p>\n</li>\n<li><p>准备开始一个hadoop集群的搭建：先将hadoop的分布式系统解压缩，然后编辑etc/hadoop/hadoop-env.sh，加入java的环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  # set to the root of your Java installation</div><div class=\"line\">export JAVA_HOME=/usr/java/latest</div></pre></td></tr></table></figure>\n<p> 执行下面的指令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/hadoop</div></pre></td></tr></table></figure>\n<p> 系统将会展示3haodoop脚本的个使用辅助程序</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Local (Standalone) Mode</div><div class=\"line\">Pseudo-Distributed Mode</div><div class=\"line\">Fully-Distributed Mode</div></pre></td></tr></table></figure>\n<p> 选中其中的任意一个都可以开始你的hadoop集群。</p>\n</li>\n<li>单节点操作：一般的，hadoop被配置运行在非分布式模式中，也就是说是一个独立的java程序，可以用来debbug调试问题。下面创建一个input目录，用来存储所有的xml文件，并作为输入，output文件夹作为输出。<br>·<br>mkdir input<br>cp etc/hadoop/<em>.xml input<br>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output ‘dfs[a-z.]+’<br>cat output/</em><br>·</li>\n<li><p>伪分布式操作：hadoop可以在伪分布式模式下运行单个节点，在这种情况下，每个hadoop的守护程序都是一个独立的java进程。配置文件如下：</p>\n<p> etc/hadoop/core-site.xml:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property&gt;</div><div class=\"line\">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class=\"line\">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class=\"line\">    &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p> etc/hadoop/hdfs-site.xml:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property&gt;</div><div class=\"line\">       &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class=\"line\">       &lt;value&gt;1&lt;/value&gt;</div><div class=\"line\">     &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置伪分布式的ssh</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh localhost</div></pre></td></tr></table></figure>\n<p> 如果不需要密码可以直接登ssh到本地执行下面的指令：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa</div><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class=\"line\">chmod 0600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行：下面的指令是执行本地MapReduce任务的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.初始化文件系统</div><div class=\"line\">bin/hdfs namenode -format</div><div class=\"line\">2.启动命名节点守护进程以及数据节点守护进程</div><div class=\"line\">sbin/start-dfs.sh</div><div class=\"line\">hadoop的日志输出目录是 $HADOOP_LOG_DIR所示的值，默认是HADOOP_HOME/logs</div><div class=\"line\">3.打开名字节点的web接口。默认是</div><div class=\"line\">NameNode - http://localhost:50070/</div><div class=\"line\">4.创建HDFS目录，用来执行MapReduce目录</div><div class=\"line\">bin/hdfs dfs -mkdir /user</div><div class=\"line\">bin/hdfs dfs -mkdir /user/&lt;username&gt;</div><div class=\"line\">5.复制输入目录的东西到分布式目录</div><div class=\"line\">bin/hdfs dfs -put etc/hadoop input</div><div class=\"line\">6.运行示例</div><div class=\"line\">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output &apos;dfs[a-z.]+&apos;</div><div class=\"line\">7.审核输出文件目录，将输出文件的内容从分布式目录里拷贝到本地文件系统里面，然后审核</div><div class=\"line\">bin/hdfs dfs -get output output</div><div class=\"line\">cat output/*</div><div class=\"line\">或者直接在分布式系统里面查看文件</div><div class=\"line\">bin/hdfs dfs -cat output/*</div><div class=\"line\">8.关闭守护陈旭</div><div class=\"line\">sbin/stop-dfs.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>单节点的分布式文件系统：通过设置少量参数，额外运行资源管理守护程序，和节点管理守护程序，达到在为分布式模式下分布式文件系统中运行MapReduce工程。接下来的指令是在上一步的1-4点都完成的情况下执行。<br>1.配置etc/hadoop/mapred-site.xml文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   &lt;property&gt;</div><div class=\"line\">       &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class=\"line\">       &lt;value&gt;yarn&lt;/value&gt;</div><div class=\"line\">   &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>配置etc/hadoop/yarn-site.xml:文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;configuration&gt;</div><div class=\"line\">    &lt;property&gt;</div><div class=\"line\">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class=\"line\">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class=\"line\">    &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>2.启动资源管理守护程序和数据节点守护程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sbin/start-yarn.sh</div></pre></td></tr></table></figure>\n<p>3.打开资源管理的web接口，默认值是下面的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResourceManager - http://localhost:8088/</div></pre></td></tr></table></figure>\n<p>4.运行mapreduce程序<br>5.关闭资源节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sbin/stop-yarn.sh</div></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>这是一片翻译文章，详情请参考<a href=\"http://hadoop.apache.org/docs/r2.7.4/hadoop-project-dist/hadoop-common/SingleCluster.html\" target=\"_blank\" rel=\"external\">single node</a></p>\n<blockquote>\n<p>伪分布式(单节点集群)搭建</p>\n</blockquote>\n<ol>\n<li>概述：该文章是用来描述怎么快速的安装和配置一个单节点hadoop，这样可以让你能够快速使用hadoop的 MapReduce以及HDFS组件。</li>\n<li>支持平台：GNU和linux是hadoop的开发平台和生产平台，如果使用GNU或者linux系统作为系统节点，节点数可达到2000个。当然hadoop也支持windows系统，这里就不作介绍了。详情请go to <a href=\"https://wiki.apache.org/hadoop/Hadoop2OnWindows\" target=\"_blank\" rel=\"external\">windows</a></li>\n<li>软件要求:jdk是必须要安装的，选择oraclejdk1.7+或者openjdk1.7+就可以了。为了方便hadoop脚本管理和调用hadoop的守护进程，ssh也是必须安装的。</li>\n<li><p>软件安装：对于ubantu系统，安装SSH可以这么做，其他系统请自行摸索，如果是center os 7.0+ 可以参考本人前面的博客。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> sudo apt-get install ssh</div><div class=\"line\">sudo apt-get install rsync</div></pre></td></tr></table></figure>\n</li>\n<li><p>下载：<a href=\"http://www.apache.org/dyn/closer.cgi/hadoop/common/\" target=\"_blank\" rel=\"external\">可以去这里下载hadoop的镜像</a></p>\n</li>\n<li><p>准备开始一个hadoop集群的搭建：先将hadoop的分布式系统解压缩，然后编辑etc/hadoop/hadoop-env.sh，加入java的环境变量</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">  # set to the root of your Java installation</div><div class=\"line\">export JAVA_HOME=/usr/java/latest</div></pre></td></tr></table></figure>\n<p> 执行下面的指令</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bin/hadoop</div></pre></td></tr></table></figure>\n<p> 系统将会展示3haodoop脚本的个使用辅助程序</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Local (Standalone) Mode</div><div class=\"line\">Pseudo-Distributed Mode</div><div class=\"line\">Fully-Distributed Mode</div></pre></td></tr></table></figure>\n<p> 选中其中的任意一个都可以开始你的hadoop集群。</p>\n</li>\n<li>单节点操作：一般的，hadoop被配置运行在非分布式模式中，也就是说是一个独立的java程序，可以用来debbug调试问题。下面创建一个input目录，用来存储所有的xml文件，并作为输入，output文件夹作为输出。<br>·<br>mkdir input<br>cp etc/hadoop/<em>.xml input<br>bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output ‘dfs[a-z.]+’<br>cat output/</em><br>·</li>\n<li><p>伪分布式操作：hadoop可以在伪分布式模式下运行单个节点，在这种情况下，每个hadoop的守护程序都是一个独立的java进程。配置文件如下：</p>\n<p> etc/hadoop/core-site.xml:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property&gt;</div><div class=\"line\">        &lt;name&gt;fs.defaultFS&lt;/name&gt;</div><div class=\"line\">        &lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class=\"line\">    &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p> etc/hadoop/hdfs-site.xml:</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    &lt;property&gt;</div><div class=\"line\">       &lt;name&gt;dfs.replication&lt;/name&gt;</div><div class=\"line\">       &lt;value&gt;1&lt;/value&gt;</div><div class=\"line\">     &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>配置伪分布式的ssh</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh localhost</div></pre></td></tr></table></figure>\n<p> 如果不需要密码可以直接登ssh到本地执行下面的指令：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -P &apos;&apos; -f ~/.ssh/id_rsa</div><div class=\"line\">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class=\"line\">chmod 0600 ~/.ssh/authorized_keys</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行：下面的指令是执行本地MapReduce任务的命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.初始化文件系统</div><div class=\"line\">bin/hdfs namenode -format</div><div class=\"line\">2.启动命名节点守护进程以及数据节点守护进程</div><div class=\"line\">sbin/start-dfs.sh</div><div class=\"line\">hadoop的日志输出目录是 $HADOOP_LOG_DIR所示的值，默认是HADOOP_HOME/logs</div><div class=\"line\">3.打开名字节点的web接口。默认是</div><div class=\"line\">NameNode - http://localhost:50070/</div><div class=\"line\">4.创建HDFS目录，用来执行MapReduce目录</div><div class=\"line\">bin/hdfs dfs -mkdir /user</div><div class=\"line\">bin/hdfs dfs -mkdir /user/&lt;username&gt;</div><div class=\"line\">5.复制输入目录的东西到分布式目录</div><div class=\"line\">bin/hdfs dfs -put etc/hadoop input</div><div class=\"line\">6.运行示例</div><div class=\"line\">bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.4.jar grep input output &apos;dfs[a-z.]+&apos;</div><div class=\"line\">7.审核输出文件目录，将输出文件的内容从分布式目录里拷贝到本地文件系统里面，然后审核</div><div class=\"line\">bin/hdfs dfs -get output output</div><div class=\"line\">cat output/*</div><div class=\"line\">或者直接在分布式系统里面查看文件</div><div class=\"line\">bin/hdfs dfs -cat output/*</div><div class=\"line\">8.关闭守护陈旭</div><div class=\"line\">sbin/stop-dfs.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>单节点的分布式文件系统：通过设置少量参数，额外运行资源管理守护程序，和节点管理守护程序，达到在为分布式模式下分布式文件系统中运行MapReduce工程。接下来的指令是在上一步的1-4点都完成的情况下执行。<br>1.配置etc/hadoop/mapred-site.xml文件</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">   &lt;property&gt;</div><div class=\"line\">       &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</div><div class=\"line\">       &lt;value&gt;yarn&lt;/value&gt;</div><div class=\"line\">   &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>配置etc/hadoop/yarn-site.xml:文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">    &lt;configuration&gt;</div><div class=\"line\">    &lt;property&gt;</div><div class=\"line\">        &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</div><div class=\"line\">        &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</div><div class=\"line\">    &lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure>\n<p>2.启动资源管理守护程序和数据节点守护程序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sbin/start-yarn.sh</div></pre></td></tr></table></figure>\n<p>3.打开资源管理的web接口，默认值是下面的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ResourceManager - http://localhost:8088/</div></pre></td></tr></table></figure>\n<p>4.运行mapreduce程序<br>5.关闭资源节点</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sbin/stop-yarn.sh</div></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"flume日志多线程下压力测试","date":"2017-09-11T03:00:50.000Z","_content":"#### 实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\n#####    1. 从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\n#####    2. 设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\n#####    3. 设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\n#####    4. 输出线程执行的情况\n    \n#### pom配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>jsonflume</groupId>\n    <artifactId>flume</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <log4j.version>2.8.2</log4j.version>\n        <slf4j.version>2.8.2</slf4j.version>\n        <flume-ng.versiopn>2.8.2</flume-ng.versiopn>\n        <jackson.version>2.7.0</jackson.version>\n    </properties>\n\n    <dependencies>\n        <!-- log4j -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>${log4j.version}</version>\n        </dependency>\n\n        <!-- slf4j -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- flume -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-flume-ng</artifactId>\n            <version>${flume-ng.versiopn}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>1.4</version>\n                <configuration>\n                    <createDependencyReducedPom>true</createDependencyReducedPom>\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer\n                                        implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>LaoutTest</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n#### log4j2配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n    <!--自定义flume日志级别-->\n    <!--<CustomLevels>-->\n        <!--<CustomLevel name=\"FLUME\" intLevel=\"88\" />-->\n    <!--</CustomLevels>-->\n    <!--定义输出日志的地方-->\n    <Appenders>\n        <!--控制台输出-->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d %-7level %logger{36} - %msg%n\"/>\n        </Console>\n        <!--log文件输出-->\n        <File name=\"MyFile\" fileName=\"logs/app.log\">\n            <PatternLayout pattern=\"%d %-7level %logger{36} - %msg%n\"/>\n        </File>\n        <!--输出到flume-->\n        <!--<Flume name=\"eventLogger\" compress=\"false\">-->\n            <!--<Agent host=\"192.168.1.111\" port=\"41414\"/>-->\n            <!--&lt;!&ndash;输出方式为json&ndash;&gt;-->\n            <!--<JSONLayout/>-->\n        <!--</Flume>-->\n    </Appenders>\n    <!--配置不同的日志级别输出到不同地点-->\n    <Loggers>\n        <!--root代表默认日志级别-->\n        <Root level=\"error\">\n            <!--设定flume级别及以上的日志通过flume-appender输出-->\n            <!--<AppenderRef ref=\"eventLogger\" level=\"FLUME\" />-->\n            <!--设定console级别及以上的日志通过控制台输出-->\n            <AppenderRef ref=\"Console\" level=\"info\" />\n            <!--设定error及以上的日志通过log文件输出-->\n            <AppenderRef ref=\"MyFile\" level=\"error\" />\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n#### 压力测试\n\n```\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.commons.lang.StringUtils;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Created by hadoop on 2017/7/28.\n */\npublic class LaoutTest {\n    static Logger logger = LogManager.getLogger(LaoutTest.class);\n    public static void main(String[] args) throws InterruptedException {\n        //初始化参数\n        int num= 100000;\n        int threadNum =10;\n        //args.length>0表示有参数传递进来，那么num的值为第一个参数，表示每个线程发送的日志次数 threadNum为第二个参数，表示要测试的线程个数\n        if (args.length >0 ){\n            if (StringUtils.isNotEmpty(args[0])){\n                num = Integer.valueOf(args[0]);\n            }\n            if (StringUtils.isNotEmpty(args[1])){\n                threadNum = Integer.valueOf(args[1]);\n            }\n        }\n        //CountDownLatch是一个线程计数器，初始化一个可以计数threadNum个线程的线程计数器\n        CountDownLatch countDownLatch = new CountDownLatch(threadNum);\n        //获取开始时间\n        long time1 = new Date().getTime();\n        //创建线程池\n        ExecutorService executor = Executors.newFixedThreadPool(threadNum);\n        for (int i=0;i<threadNum;i++){\n            executor.execute(new FlumeThread(countDownLatch,num));\n        }\n        try{\n            // 阻塞当前线程，直到倒数计数器倒数到0\n            countDownLatch.await();\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n\n        //获取结束时间\n        long time2 = new Date().getTime();\n        //对时间进行处理\n        SimpleDateFormat formatter = new SimpleDateFormat (\"yyyy.MM.dd hh:mm:ss z\");\n        String startTime = formatter.format(time1);\n        String endTime = formatter.format(time2);\n        double interval = (time2-time1)/1000;\n        double numPerSecond = (num+1.0)*threadNum/interval;\n        System.out.println(threadNum +\"个线程\"+\"每个线程\"+num+\"条数据，共\"+num*threadNum/10000+\"W 条数据耗时-----\"+interval+\"秒.平均每秒传递收集\"+numPerSecond+\"条数据实验开始时间-----\"+startTime+\"结束时间-----\"+endTime);\n    }\n}\n\n/**\n * describe:flume线程实现类，执行num次flume日志打印，线程执行完线程计数器减一\n *\n */\nclass FlumeThread implements Runnable{\n    static Logger logger = LogManager.getLogger(FlumeThread.class);\n    private  int num;\n    private CountDownLatch countDownLatch;\n    FlumeThread(CountDownLatch countDownLatch,int num){\n        this.countDownLatch = countDownLatch;\n        this.num = num;\n    }\n    public void run() {\n        int i=0;\n        while (i<num) {\n            i++;\n            logger.log(Level.getLevel(\"FLUME\"), \"LFH01|some message\");\n        }\n        // 倒数器减1\n        countDownLatch.countDown();\n    }\n}\n\n\n\n```","source":"_posts/flume日志多线程下压力测试.md","raw":"---\ntitle: flume日志多线程下压力测试\ndate: 2017-09-11 11:00:50\ntags: hadoop\ncategories: hadoop\n---\n#### 实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\n#####    1. 从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\n#####    2. 设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\n#####    3. 设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\n#####    4. 输出线程执行的情况\n    \n#### pom配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>jsonflume</groupId>\n    <artifactId>flume</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <properties>\n        <log4j.version>2.8.2</log4j.version>\n        <slf4j.version>2.8.2</slf4j.version>\n        <flume-ng.versiopn>2.8.2</flume-ng.versiopn>\n        <jackson.version>2.7.0</jackson.version>\n    </properties>\n\n    <dependencies>\n        <!-- log4j -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>${log4j.version}</version>\n        </dependency>\n\n        <!-- slf4j -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-slf4j-impl</artifactId>\n            <version>${slf4j.version}</version>\n        </dependency>\n\n        <!-- flume -->\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-flume-ng</artifactId>\n            <version>${flume-ng.versiopn}</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-core</artifactId>\n            <version>2.7.0</version>\n        </dependency>\n\n        <dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>${jackson.version}</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>1.4</version>\n                <configuration>\n                    <createDependencyReducedPom>true</createDependencyReducedPom>\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <transformers>\n                                <transformer\n                                        implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>LaoutTest</mainClass>\n                                </transformer>\n                            </transformers>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n\n\n</project>\n```\n\n#### log4j2配置\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n    <!--自定义flume日志级别-->\n    <!--<CustomLevels>-->\n        <!--<CustomLevel name=\"FLUME\" intLevel=\"88\" />-->\n    <!--</CustomLevels>-->\n    <!--定义输出日志的地方-->\n    <Appenders>\n        <!--控制台输出-->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"%d %-7level %logger{36} - %msg%n\"/>\n        </Console>\n        <!--log文件输出-->\n        <File name=\"MyFile\" fileName=\"logs/app.log\">\n            <PatternLayout pattern=\"%d %-7level %logger{36} - %msg%n\"/>\n        </File>\n        <!--输出到flume-->\n        <!--<Flume name=\"eventLogger\" compress=\"false\">-->\n            <!--<Agent host=\"192.168.1.111\" port=\"41414\"/>-->\n            <!--&lt;!&ndash;输出方式为json&ndash;&gt;-->\n            <!--<JSONLayout/>-->\n        <!--</Flume>-->\n    </Appenders>\n    <!--配置不同的日志级别输出到不同地点-->\n    <Loggers>\n        <!--root代表默认日志级别-->\n        <Root level=\"error\">\n            <!--设定flume级别及以上的日志通过flume-appender输出-->\n            <!--<AppenderRef ref=\"eventLogger\" level=\"FLUME\" />-->\n            <!--设定console级别及以上的日志通过控制台输出-->\n            <AppenderRef ref=\"Console\" level=\"info\" />\n            <!--设定error及以上的日志通过log文件输出-->\n            <AppenderRef ref=\"MyFile\" level=\"error\" />\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n#### 压力测试\n\n```\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.commons.lang.StringUtils;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Created by hadoop on 2017/7/28.\n */\npublic class LaoutTest {\n    static Logger logger = LogManager.getLogger(LaoutTest.class);\n    public static void main(String[] args) throws InterruptedException {\n        //初始化参数\n        int num= 100000;\n        int threadNum =10;\n        //args.length>0表示有参数传递进来，那么num的值为第一个参数，表示每个线程发送的日志次数 threadNum为第二个参数，表示要测试的线程个数\n        if (args.length >0 ){\n            if (StringUtils.isNotEmpty(args[0])){\n                num = Integer.valueOf(args[0]);\n            }\n            if (StringUtils.isNotEmpty(args[1])){\n                threadNum = Integer.valueOf(args[1]);\n            }\n        }\n        //CountDownLatch是一个线程计数器，初始化一个可以计数threadNum个线程的线程计数器\n        CountDownLatch countDownLatch = new CountDownLatch(threadNum);\n        //获取开始时间\n        long time1 = new Date().getTime();\n        //创建线程池\n        ExecutorService executor = Executors.newFixedThreadPool(threadNum);\n        for (int i=0;i<threadNum;i++){\n            executor.execute(new FlumeThread(countDownLatch,num));\n        }\n        try{\n            // 阻塞当前线程，直到倒数计数器倒数到0\n            countDownLatch.await();\n        }catch (InterruptedException e){\n            e.printStackTrace();\n        }\n\n        //获取结束时间\n        long time2 = new Date().getTime();\n        //对时间进行处理\n        SimpleDateFormat formatter = new SimpleDateFormat (\"yyyy.MM.dd hh:mm:ss z\");\n        String startTime = formatter.format(time1);\n        String endTime = formatter.format(time2);\n        double interval = (time2-time1)/1000;\n        double numPerSecond = (num+1.0)*threadNum/interval;\n        System.out.println(threadNum +\"个线程\"+\"每个线程\"+num+\"条数据，共\"+num*threadNum/10000+\"W 条数据耗时-----\"+interval+\"秒.平均每秒传递收集\"+numPerSecond+\"条数据实验开始时间-----\"+startTime+\"结束时间-----\"+endTime);\n    }\n}\n\n/**\n * describe:flume线程实现类，执行num次flume日志打印，线程执行完线程计数器减一\n *\n */\nclass FlumeThread implements Runnable{\n    static Logger logger = LogManager.getLogger(FlumeThread.class);\n    private  int num;\n    private CountDownLatch countDownLatch;\n    FlumeThread(CountDownLatch countDownLatch,int num){\n        this.countDownLatch = countDownLatch;\n        this.num = num;\n    }\n    public void run() {\n        int i=0;\n        while (i<num) {\n            i++;\n            logger.log(Level.getLevel(\"FLUME\"), \"LFH01|some message\");\n        }\n        // 倒数器减1\n        countDownLatch.countDown();\n    }\n}\n\n\n\n```","slug":"flume日志多线程下压力测试","published":1,"updated":"2017-10-02T16:01:34.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdi000y10qs4taw046v","content":"<h4 id=\"实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\"><a href=\"#实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\" class=\"headerlink\" title=\"实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\"></a>实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是</h4><h5 id=\"1-从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\"><a href=\"#1-从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\" class=\"headerlink\" title=\"1. 从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\"></a>1. 从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。</h5><h5 id=\"2-设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\"><a href=\"#2-设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\" class=\"headerlink\" title=\"2. 设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\"></a>2. 设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。</h5><h5 id=\"3-设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\"><a href=\"#3-设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\" class=\"headerlink\" title=\"3. 设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\"></a>3. 设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。</h5><h5 id=\"4-输出线程执行的情况\"><a href=\"#4-输出线程执行的情况\" class=\"headerlink\" title=\"4. 输出线程执行的情况\"></a>4. 输出线程执行的情况</h5><h4 id=\"pom配置\"><a href=\"#pom配置\" class=\"headerlink\" title=\"pom配置\"></a>pom配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;jsonflume&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;flume&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;properties&gt;</div><div class=\"line\">        &lt;log4j.version&gt;2.8.2&lt;/log4j.version&gt;</div><div class=\"line\">        &lt;slf4j.version&gt;2.8.2&lt;/slf4j.version&gt;</div><div class=\"line\">        &lt;flume-ng.versiopn&gt;2.8.2&lt;/flume-ng.versiopn&gt;</div><div class=\"line\">        &lt;jackson.version&gt;2.7.0&lt;/jackson.version&gt;</div><div class=\"line\">    &lt;/properties&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">        &lt;!-- log4j --&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- slf4j --&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- flume --&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;log4j-flume-ng&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;flume-ng.versiopn&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;1.4&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;createDependencyReducedPom&gt;true&lt;/createDependencyReducedPom&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">                &lt;executions&gt;</div><div class=\"line\">                    &lt;execution&gt;</div><div class=\"line\">                        &lt;phase&gt;package&lt;/phase&gt;</div><div class=\"line\">                        &lt;goals&gt;</div><div class=\"line\">                            &lt;goal&gt;shade&lt;/goal&gt;</div><div class=\"line\">                        &lt;/goals&gt;</div><div class=\"line\">                        &lt;configuration&gt;</div><div class=\"line\">                            &lt;transformers&gt;</div><div class=\"line\">                                &lt;transformer</div><div class=\"line\">                                        implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</div><div class=\"line\">                                    &lt;mainClass&gt;LaoutTest&lt;/mainClass&gt;</div><div class=\"line\">                                &lt;/transformer&gt;</div><div class=\"line\">                            &lt;/transformers&gt;</div><div class=\"line\">                        &lt;/configuration&gt;</div><div class=\"line\">                    &lt;/execution&gt;</div><div class=\"line\">                &lt;/executions&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"log4j2配置\"><a href=\"#log4j2配置\" class=\"headerlink\" title=\"log4j2配置\"></a>log4j2配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;Configuration status=&quot;WARN&quot;&gt;</div><div class=\"line\">    &lt;!--自定义flume日志级别--&gt;</div><div class=\"line\">    &lt;!--&lt;CustomLevels&gt;--&gt;</div><div class=\"line\">        &lt;!--&lt;CustomLevel name=&quot;FLUME&quot; intLevel=&quot;88&quot; /&gt;--&gt;</div><div class=\"line\">    &lt;!--&lt;/CustomLevels&gt;--&gt;</div><div class=\"line\">    &lt;!--定义输出日志的地方--&gt;</div><div class=\"line\">    &lt;Appenders&gt;</div><div class=\"line\">        &lt;!--控制台输出--&gt;</div><div class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</div><div class=\"line\">            &lt;PatternLayout pattern=&quot;%d %-7level %logger&#123;36&#125; - %msg%n&quot;/&gt;</div><div class=\"line\">        &lt;/Console&gt;</div><div class=\"line\">        &lt;!--log文件输出--&gt;</div><div class=\"line\">        &lt;File name=&quot;MyFile&quot; fileName=&quot;logs/app.log&quot;&gt;</div><div class=\"line\">            &lt;PatternLayout pattern=&quot;%d %-7level %logger&#123;36&#125; - %msg%n&quot;/&gt;</div><div class=\"line\">        &lt;/File&gt;</div><div class=\"line\">        &lt;!--输出到flume--&gt;</div><div class=\"line\">        &lt;!--&lt;Flume name=&quot;eventLogger&quot; compress=&quot;false&quot;&gt;--&gt;</div><div class=\"line\">            &lt;!--&lt;Agent host=&quot;192.168.1.111&quot; port=&quot;41414&quot;/&gt;--&gt;</div><div class=\"line\">            &lt;!--&amp;lt;!&amp;ndash;输出方式为json&amp;ndash;&amp;gt;--&gt;</div><div class=\"line\">            &lt;!--&lt;JSONLayout/&gt;--&gt;</div><div class=\"line\">        &lt;!--&lt;/Flume&gt;--&gt;</div><div class=\"line\">    &lt;/Appenders&gt;</div><div class=\"line\">    &lt;!--配置不同的日志级别输出到不同地点--&gt;</div><div class=\"line\">    &lt;Loggers&gt;</div><div class=\"line\">        &lt;!--root代表默认日志级别--&gt;</div><div class=\"line\">        &lt;Root level=&quot;error&quot;&gt;</div><div class=\"line\">            &lt;!--设定flume级别及以上的日志通过flume-appender输出--&gt;</div><div class=\"line\">            &lt;!--&lt;AppenderRef ref=&quot;eventLogger&quot; level=&quot;FLUME&quot; /&gt;--&gt;</div><div class=\"line\">            &lt;!--设定console级别及以上的日志通过控制台输出--&gt;</div><div class=\"line\">            &lt;AppenderRef ref=&quot;Console&quot; level=&quot;info&quot; /&gt;</div><div class=\"line\">            &lt;!--设定error及以上的日志通过log文件输出--&gt;</div><div class=\"line\">            &lt;AppenderRef ref=&quot;MyFile&quot; level=&quot;error&quot; /&gt;</div><div class=\"line\">        &lt;/Root&gt;</div><div class=\"line\">    &lt;/Loggers&gt;</div><div class=\"line\">&lt;/Configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\">import org.apache.logging.log4j.Level;</div><div class=\"line\">import org.apache.logging.log4j.LogManager;</div><div class=\"line\">import org.apache.logging.log4j.Logger;</div><div class=\"line\">import org.apache.commons.lang.StringUtils;</div><div class=\"line\"></div><div class=\"line\">import java.text.SimpleDateFormat;</div><div class=\"line\">import java.util.Date;</div><div class=\"line\">import java.util.concurrent.CountDownLatch;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/7/28.</div><div class=\"line\"> */</div><div class=\"line\">public class LaoutTest &#123;</div><div class=\"line\">    static Logger logger = LogManager.getLogger(LaoutTest.class);</div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        //初始化参数</div><div class=\"line\">        int num= 100000;</div><div class=\"line\">        int threadNum =10;</div><div class=\"line\">        //args.length&gt;0表示有参数传递进来，那么num的值为第一个参数，表示每个线程发送的日志次数 threadNum为第二个参数，表示要测试的线程个数</div><div class=\"line\">        if (args.length &gt;0 )&#123;</div><div class=\"line\">            if (StringUtils.isNotEmpty(args[0]))&#123;</div><div class=\"line\">                num = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (StringUtils.isNotEmpty(args[1]))&#123;</div><div class=\"line\">                threadNum = Integer.valueOf(args[1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //CountDownLatch是一个线程计数器，初始化一个可以计数threadNum个线程的线程计数器</div><div class=\"line\">        CountDownLatch countDownLatch = new CountDownLatch(threadNum);</div><div class=\"line\">        //获取开始时间</div><div class=\"line\">        long time1 = new Date().getTime();</div><div class=\"line\">        //创建线程池</div><div class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(threadNum);</div><div class=\"line\">        for (int i=0;i&lt;threadNum;i++)&#123;</div><div class=\"line\">            executor.execute(new FlumeThread(countDownLatch,num));</div><div class=\"line\">        &#125;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            // 阻塞当前线程，直到倒数计数器倒数到0</div><div class=\"line\">            countDownLatch.await();</div><div class=\"line\">        &#125;catch (InterruptedException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //获取结束时间</div><div class=\"line\">        long time2 = new Date().getTime();</div><div class=\"line\">        //对时间进行处理</div><div class=\"line\">        SimpleDateFormat formatter = new SimpleDateFormat (&quot;yyyy.MM.dd hh:mm:ss z&quot;);</div><div class=\"line\">        String startTime = formatter.format(time1);</div><div class=\"line\">        String endTime = formatter.format(time2);</div><div class=\"line\">        double interval = (time2-time1)/1000;</div><div class=\"line\">        double numPerSecond = (num+1.0)*threadNum/interval;</div><div class=\"line\">        System.out.println(threadNum +&quot;个线程&quot;+&quot;每个线程&quot;+num+&quot;条数据，共&quot;+num*threadNum/10000+&quot;W 条数据耗时-----&quot;+interval+&quot;秒.平均每秒传递收集&quot;+numPerSecond+&quot;条数据实验开始时间-----&quot;+startTime+&quot;结束时间-----&quot;+endTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * describe:flume线程实现类，执行num次flume日志打印，线程执行完线程计数器减一</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">class FlumeThread implements Runnable&#123;</div><div class=\"line\">    static Logger logger = LogManager.getLogger(FlumeThread.class);</div><div class=\"line\">    private  int num;</div><div class=\"line\">    private CountDownLatch countDownLatch;</div><div class=\"line\">    FlumeThread(CountDownLatch countDownLatch,int num)&#123;</div><div class=\"line\">        this.countDownLatch = countDownLatch;</div><div class=\"line\">        this.num = num;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        int i=0;</div><div class=\"line\">        while (i&lt;num) &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">            logger.log(Level.getLevel(&quot;FLUME&quot;), &quot;LFH01|some message&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 倒数器减1</div><div class=\"line\">        countDownLatch.countDown();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\"><a href=\"#实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\" class=\"headerlink\" title=\"实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是\"></a>实际工作中会要用到在多线程的情况下对程序进行压力测试。实现思路是</h4><h5 id=\"1-从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\"><a href=\"#1-从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\" class=\"headerlink\" title=\"1. 从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。\"></a>1. 从外部传入两个参数，代表要开启的线程数以及每个线程要传输的数据条数。如果外界没有传入取默认值。</h5><h5 id=\"2-设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\"><a href=\"#2-设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\" class=\"headerlink\" title=\"2. 设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。\"></a>2. 设置一个线程计数器，CountDownLatch，初始化值为传入的线程个数。并在主线程结束前阻塞主线程的完成。</h5><h5 id=\"3-设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\"><a href=\"#3-设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\" class=\"headerlink\" title=\"3. 设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。\"></a>3. 设置一个线程池，线程池循环生成线程。每个线程执行各自的数据传输事项，并在线程执行完后将计数器减一。</h5><h5 id=\"4-输出线程执行的情况\"><a href=\"#4-输出线程执行的情况\" class=\"headerlink\" title=\"4. 输出线程执行的情况\"></a>4. 输出线程执行的情况</h5><h4 id=\"pom配置\"><a href=\"#pom配置\" class=\"headerlink\" title=\"pom配置\"></a>pom配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</div><div class=\"line\">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class=\"line\">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</div><div class=\"line\">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;groupId&gt;jsonflume&lt;/groupId&gt;</div><div class=\"line\">    &lt;artifactId&gt;flume&lt;/artifactId&gt;</div><div class=\"line\">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</div><div class=\"line\">    &lt;properties&gt;</div><div class=\"line\">        &lt;log4j.version&gt;2.8.2&lt;/log4j.version&gt;</div><div class=\"line\">        &lt;slf4j.version&gt;2.8.2&lt;/slf4j.version&gt;</div><div class=\"line\">        &lt;flume-ng.versiopn&gt;2.8.2&lt;/flume-ng.versiopn&gt;</div><div class=\"line\">        &lt;jackson.version&gt;2.7.0&lt;/jackson.version&gt;</div><div class=\"line\">    &lt;/properties&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;dependencies&gt;</div><div class=\"line\">        &lt;!-- log4j --&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;log4j.version&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- slf4j --&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;log4j-slf4j-impl&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;slf4j.version&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;!-- flume --&gt;</div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;log4j-flume-ng&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;flume-ng.versiopn&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;2.7.0&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\"></div><div class=\"line\">        &lt;dependency&gt;</div><div class=\"line\">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</div><div class=\"line\">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</div><div class=\"line\">            &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;</div><div class=\"line\">        &lt;/dependency&gt;</div><div class=\"line\">    &lt;/dependencies&gt;</div><div class=\"line\">    &lt;build&gt;</div><div class=\"line\">        &lt;plugins&gt;</div><div class=\"line\">            &lt;plugin&gt;</div><div class=\"line\">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class=\"line\">                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</div><div class=\"line\">                &lt;version&gt;1.4&lt;/version&gt;</div><div class=\"line\">                &lt;configuration&gt;</div><div class=\"line\">                    &lt;createDependencyReducedPom&gt;true&lt;/createDependencyReducedPom&gt;</div><div class=\"line\">                &lt;/configuration&gt;</div><div class=\"line\">                &lt;executions&gt;</div><div class=\"line\">                    &lt;execution&gt;</div><div class=\"line\">                        &lt;phase&gt;package&lt;/phase&gt;</div><div class=\"line\">                        &lt;goals&gt;</div><div class=\"line\">                            &lt;goal&gt;shade&lt;/goal&gt;</div><div class=\"line\">                        &lt;/goals&gt;</div><div class=\"line\">                        &lt;configuration&gt;</div><div class=\"line\">                            &lt;transformers&gt;</div><div class=\"line\">                                &lt;transformer</div><div class=\"line\">                                        implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;</div><div class=\"line\">                                    &lt;mainClass&gt;LaoutTest&lt;/mainClass&gt;</div><div class=\"line\">                                &lt;/transformer&gt;</div><div class=\"line\">                            &lt;/transformers&gt;</div><div class=\"line\">                        &lt;/configuration&gt;</div><div class=\"line\">                    &lt;/execution&gt;</div><div class=\"line\">                &lt;/executions&gt;</div><div class=\"line\">            &lt;/plugin&gt;</div><div class=\"line\">        &lt;/plugins&gt;</div><div class=\"line\">    &lt;/build&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">&lt;/project&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"log4j2配置\"><a href=\"#log4j2配置\" class=\"headerlink\" title=\"log4j2配置\"></a>log4j2配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class=\"line\">&lt;Configuration status=&quot;WARN&quot;&gt;</div><div class=\"line\">    &lt;!--自定义flume日志级别--&gt;</div><div class=\"line\">    &lt;!--&lt;CustomLevels&gt;--&gt;</div><div class=\"line\">        &lt;!--&lt;CustomLevel name=&quot;FLUME&quot; intLevel=&quot;88&quot; /&gt;--&gt;</div><div class=\"line\">    &lt;!--&lt;/CustomLevels&gt;--&gt;</div><div class=\"line\">    &lt;!--定义输出日志的地方--&gt;</div><div class=\"line\">    &lt;Appenders&gt;</div><div class=\"line\">        &lt;!--控制台输出--&gt;</div><div class=\"line\">        &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt;</div><div class=\"line\">            &lt;PatternLayout pattern=&quot;%d %-7level %logger&#123;36&#125; - %msg%n&quot;/&gt;</div><div class=\"line\">        &lt;/Console&gt;</div><div class=\"line\">        &lt;!--log文件输出--&gt;</div><div class=\"line\">        &lt;File name=&quot;MyFile&quot; fileName=&quot;logs/app.log&quot;&gt;</div><div class=\"line\">            &lt;PatternLayout pattern=&quot;%d %-7level %logger&#123;36&#125; - %msg%n&quot;/&gt;</div><div class=\"line\">        &lt;/File&gt;</div><div class=\"line\">        &lt;!--输出到flume--&gt;</div><div class=\"line\">        &lt;!--&lt;Flume name=&quot;eventLogger&quot; compress=&quot;false&quot;&gt;--&gt;</div><div class=\"line\">            &lt;!--&lt;Agent host=&quot;192.168.1.111&quot; port=&quot;41414&quot;/&gt;--&gt;</div><div class=\"line\">            &lt;!--&amp;lt;!&amp;ndash;输出方式为json&amp;ndash;&amp;gt;--&gt;</div><div class=\"line\">            &lt;!--&lt;JSONLayout/&gt;--&gt;</div><div class=\"line\">        &lt;!--&lt;/Flume&gt;--&gt;</div><div class=\"line\">    &lt;/Appenders&gt;</div><div class=\"line\">    &lt;!--配置不同的日志级别输出到不同地点--&gt;</div><div class=\"line\">    &lt;Loggers&gt;</div><div class=\"line\">        &lt;!--root代表默认日志级别--&gt;</div><div class=\"line\">        &lt;Root level=&quot;error&quot;&gt;</div><div class=\"line\">            &lt;!--设定flume级别及以上的日志通过flume-appender输出--&gt;</div><div class=\"line\">            &lt;!--&lt;AppenderRef ref=&quot;eventLogger&quot; level=&quot;FLUME&quot; /&gt;--&gt;</div><div class=\"line\">            &lt;!--设定console级别及以上的日志通过控制台输出--&gt;</div><div class=\"line\">            &lt;AppenderRef ref=&quot;Console&quot; level=&quot;info&quot; /&gt;</div><div class=\"line\">            &lt;!--设定error及以上的日志通过log文件输出--&gt;</div><div class=\"line\">            &lt;AppenderRef ref=&quot;MyFile&quot; level=&quot;error&quot; /&gt;</div><div class=\"line\">        &lt;/Root&gt;</div><div class=\"line\">    &lt;/Loggers&gt;</div><div class=\"line\">&lt;/Configuration&gt;</div></pre></td></tr></table></figure>\n<h4 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\">import org.apache.logging.log4j.Level;</div><div class=\"line\">import org.apache.logging.log4j.LogManager;</div><div class=\"line\">import org.apache.logging.log4j.Logger;</div><div class=\"line\">import org.apache.commons.lang.StringUtils;</div><div class=\"line\"></div><div class=\"line\">import java.text.SimpleDateFormat;</div><div class=\"line\">import java.util.Date;</div><div class=\"line\">import java.util.concurrent.CountDownLatch;</div><div class=\"line\">import java.util.concurrent.ExecutorService;</div><div class=\"line\">import java.util.concurrent.Executors;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * Created by hadoop on 2017/7/28.</div><div class=\"line\"> */</div><div class=\"line\">public class LaoutTest &#123;</div><div class=\"line\">    static Logger logger = LogManager.getLogger(LaoutTest.class);</div><div class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</div><div class=\"line\">        //初始化参数</div><div class=\"line\">        int num= 100000;</div><div class=\"line\">        int threadNum =10;</div><div class=\"line\">        //args.length&gt;0表示有参数传递进来，那么num的值为第一个参数，表示每个线程发送的日志次数 threadNum为第二个参数，表示要测试的线程个数</div><div class=\"line\">        if (args.length &gt;0 )&#123;</div><div class=\"line\">            if (StringUtils.isNotEmpty(args[0]))&#123;</div><div class=\"line\">                num = Integer.valueOf(args[0]);</div><div class=\"line\">            &#125;</div><div class=\"line\">            if (StringUtils.isNotEmpty(args[1]))&#123;</div><div class=\"line\">                threadNum = Integer.valueOf(args[1]);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        //CountDownLatch是一个线程计数器，初始化一个可以计数threadNum个线程的线程计数器</div><div class=\"line\">        CountDownLatch countDownLatch = new CountDownLatch(threadNum);</div><div class=\"line\">        //获取开始时间</div><div class=\"line\">        long time1 = new Date().getTime();</div><div class=\"line\">        //创建线程池</div><div class=\"line\">        ExecutorService executor = Executors.newFixedThreadPool(threadNum);</div><div class=\"line\">        for (int i=0;i&lt;threadNum;i++)&#123;</div><div class=\"line\">            executor.execute(new FlumeThread(countDownLatch,num));</div><div class=\"line\">        &#125;</div><div class=\"line\">        try&#123;</div><div class=\"line\">            // 阻塞当前线程，直到倒数计数器倒数到0</div><div class=\"line\">            countDownLatch.await();</div><div class=\"line\">        &#125;catch (InterruptedException e)&#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //获取结束时间</div><div class=\"line\">        long time2 = new Date().getTime();</div><div class=\"line\">        //对时间进行处理</div><div class=\"line\">        SimpleDateFormat formatter = new SimpleDateFormat (&quot;yyyy.MM.dd hh:mm:ss z&quot;);</div><div class=\"line\">        String startTime = formatter.format(time1);</div><div class=\"line\">        String endTime = formatter.format(time2);</div><div class=\"line\">        double interval = (time2-time1)/1000;</div><div class=\"line\">        double numPerSecond = (num+1.0)*threadNum/interval;</div><div class=\"line\">        System.out.println(threadNum +&quot;个线程&quot;+&quot;每个线程&quot;+num+&quot;条数据，共&quot;+num*threadNum/10000+&quot;W 条数据耗时-----&quot;+interval+&quot;秒.平均每秒传递收集&quot;+numPerSecond+&quot;条数据实验开始时间-----&quot;+startTime+&quot;结束时间-----&quot;+endTime);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/**</div><div class=\"line\"> * describe:flume线程实现类，执行num次flume日志打印，线程执行完线程计数器减一</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">class FlumeThread implements Runnable&#123;</div><div class=\"line\">    static Logger logger = LogManager.getLogger(FlumeThread.class);</div><div class=\"line\">    private  int num;</div><div class=\"line\">    private CountDownLatch countDownLatch;</div><div class=\"line\">    FlumeThread(CountDownLatch countDownLatch,int num)&#123;</div><div class=\"line\">        this.countDownLatch = countDownLatch;</div><div class=\"line\">        this.num = num;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public void run() &#123;</div><div class=\"line\">        int i=0;</div><div class=\"line\">        while (i&lt;num) &#123;</div><div class=\"line\">            i++;</div><div class=\"line\">            logger.log(Level.getLevel(&quot;FLUME&quot;), &quot;LFH01|some message&quot;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        // 倒数器减1</div><div class=\"line\">        countDownLatch.countDown();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"渐进之谋","date":"2017-10-02T16:17:12.000Z","_content":"为人驱使者为奴，为人尊处者为客，不能立足者为暂客，能立足者为久客，客久而不能主事者为贱客，能主事者可渐握机要，而为主矣。故反客为主之局：第一步须争客位；第二步须乘隙；第三步须插足；第四步须握机；第五步乃为主。","source":"_posts/渐进之谋.md","raw":"---\ntitle: 渐进之谋\ndate: 2017-10-03 00:17:12\ntags: 修炼\ncategories: 修炼\n---\n为人驱使者为奴，为人尊处者为客，不能立足者为暂客，能立足者为久客，客久而不能主事者为贱客，能主事者可渐握机要，而为主矣。故反客为主之局：第一步须争客位；第二步须乘隙；第三步须插足；第四步须握机；第五步乃为主。","slug":"渐进之谋","published":1,"updated":"2017-10-03T15:07:07.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdl001210qsv3ypz5mf","content":"<p>为人驱使者为奴，为人尊处者为客，不能立足者为暂客，能立足者为久客，客久而不能主事者为贱客，能主事者可渐握机要，而为主矣。故反客为主之局：第一步须争客位；第二步须乘隙；第三步须插足；第四步须握机；第五步乃为主。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>为人驱使者为奴，为人尊处者为客，不能立足者为暂客，能立足者为久客，客久而不能主事者为贱客，能主事者可渐握机要，而为主矣。故反客为主之局：第一步须争客位；第二步须乘隙；第三步须插足；第四步须握机；第五步乃为主。</p>\n"},{"title":"怎么谈恋爱","date":"2017-10-02T16:18:32.000Z","_content":"#### 我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\n- ###  爱情建设练习\n>### 下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\n\n#### 1. 合二为一\n######  相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\n#### 2. 深情对视\n###### 站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\n#### 3. 模仿练习\n###### 和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\n#### 4. “坠”入爱河\n###### 这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\n#### 5.交换秘密\n###### 写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\n#### 6.读心游戏\n###### 写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\n#### 8.走进彼此\n###### 站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\n#### 9.爱的光晕\n###### 与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\n- ### 能增进感情的因素\n>11种能增进感情的因素，其中10种与我在课程中引用的科学研究完全吻合。最重要的因素是专一，其次是良好的沟通技巧。\n\n#### 1. 兴奋\n###### 美国石溪大学心理学家阿瑟·阿伦（Arthur Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\n#### 2. 亲密性和熟悉程度\n###### 美国斯坦福大学社会心理学家利昂·费斯廷格（Leon Festinger）和罗伯特·扎伊翁茨（Robert Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\n#### 3. 相似性\n###### 不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\n#### 4. 幽默\n###### 婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\n#### 5. 新鲜感\n###### 美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\n#### 6. 放松\n###### 无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\n#### 7. 友善、迁就和宽容\n###### 许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\n#### 8. 触摸和性\n###### 单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\n#### 9.自我表露\n###### 阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\n#### 10. 承诺\n###### 在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\n\n摘自：《科学教你谈恋爱》 — 〔美〕罗伯特·爱泼斯坦\n在豆瓣阅读书店查看：https://read.douban.com/ebook/3384/\n本作品由环球科学授权豆瓣阅读全球范围内电子版制作与发行。\n© 版权所有，侵权必究。","source":"_posts/怎么谈恋爱.md","raw":"---\ntitle: 怎么谈恋爱\ndate: 2017-10-03 00:18:32\ntags: 修炼\ncategories: 修炼\n---\n#### 我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\n- ###  爱情建设练习\n>### 下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\n\n#### 1. 合二为一\n######  相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\n#### 2. 深情对视\n###### 站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\n#### 3. 模仿练习\n###### 和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\n#### 4. “坠”入爱河\n###### 这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\n#### 5.交换秘密\n###### 写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\n#### 6.读心游戏\n###### 写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\n#### 8.走进彼此\n###### 站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\n#### 9.爱的光晕\n###### 与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\n- ### 能增进感情的因素\n>11种能增进感情的因素，其中10种与我在课程中引用的科学研究完全吻合。最重要的因素是专一，其次是良好的沟通技巧。\n\n#### 1. 兴奋\n###### 美国石溪大学心理学家阿瑟·阿伦（Arthur Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\n#### 2. 亲密性和熟悉程度\n###### 美国斯坦福大学社会心理学家利昂·费斯廷格（Leon Festinger）和罗伯特·扎伊翁茨（Robert Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\n#### 3. 相似性\n###### 不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\n#### 4. 幽默\n###### 婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\n#### 5. 新鲜感\n###### 美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\n#### 6. 放松\n###### 无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\n#### 7. 友善、迁就和宽容\n###### 许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\n#### 8. 触摸和性\n###### 单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\n#### 9.自我表露\n###### 阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\n#### 10. 承诺\n###### 在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\n\n摘自：《科学教你谈恋爱》 — 〔美〕罗伯特·爱泼斯坦\n在豆瓣阅读书店查看：https://read.douban.com/ebook/3384/\n本作品由环球科学授权豆瓣阅读全球范围内电子版制作与发行。\n© 版权所有，侵权必究。","slug":"怎么谈恋爱","published":1,"updated":"2017-10-03T15:07:07.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdm001410qsozbo1bcj","content":"<h4 id=\"我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\"><a href=\"#我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\" class=\"headerlink\" title=\"我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\"></a>我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。</h4><ul>\n<li><h3 id=\"爱情建设练习\"><a href=\"#爱情建设练习\" class=\"headerlink\" title=\"爱情建设练习\"></a>爱情建设练习</h3><blockquote>\n<h3 id=\"下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\"><a href=\"#下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\" class=\"headerlink\" title=\"下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\"></a>下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。</h3></blockquote>\n</li>\n</ul>\n<h4 id=\"1-合二为一\"><a href=\"#1-合二为一\" class=\"headerlink\" title=\"1. 合二为一\"></a>1. 合二为一</h4><h6 id=\"相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\"><a href=\"#相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\" class=\"headerlink\" title=\"相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\"></a>相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。</h6><h4 id=\"2-深情对视\"><a href=\"#2-深情对视\" class=\"headerlink\" title=\"2. 深情对视\"></a>2. 深情对视</h4><h6 id=\"站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\"><a href=\"#站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\" class=\"headerlink\" title=\"站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\"></a>站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。</h6><h4 id=\"3-模仿练习\"><a href=\"#3-模仿练习\" class=\"headerlink\" title=\"3. 模仿练习\"></a>3. 模仿练习</h4><h6 id=\"和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\"><a href=\"#和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\" class=\"headerlink\" title=\"和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\"></a>和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。</h6><h4 id=\"4-“坠”入爱河\"><a href=\"#4-“坠”入爱河\" class=\"headerlink\" title=\"4. “坠”入爱河\"></a>4. “坠”入爱河</h4><h6 id=\"这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\"><a href=\"#这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\" class=\"headerlink\" title=\"这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\"></a>这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。</h6><h4 id=\"5-交换秘密\"><a href=\"#5-交换秘密\" class=\"headerlink\" title=\"5.交换秘密\"></a>5.交换秘密</h4><h6 id=\"写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\"><a href=\"#写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\" class=\"headerlink\" title=\"写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\"></a>写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。</h6><h4 id=\"6-读心游戏\"><a href=\"#6-读心游戏\" class=\"headerlink\" title=\"6.读心游戏\"></a>6.读心游戏</h4><h6 id=\"写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\"><a href=\"#写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\" class=\"headerlink\" title=\"写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\"></a>写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色</h6><h4 id=\"8-走进彼此\"><a href=\"#8-走进彼此\" class=\"headerlink\" title=\"8.走进彼此\"></a>8.走进彼此</h4><h6 id=\"站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\"><a href=\"#站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\" class=\"headerlink\" title=\"站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\"></a>站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）</h6><h4 id=\"9-爱的光晕\"><a href=\"#9-爱的光晕\" class=\"headerlink\" title=\"9.爱的光晕\"></a>9.爱的光晕</h4><h6 id=\"与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\"><a href=\"#与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\" class=\"headerlink\" title=\"与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\"></a>与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。</h6><ul>\n<li><h3 id=\"能增进感情的因素\"><a href=\"#能增进感情的因素\" class=\"headerlink\" title=\"能增进感情的因素\"></a>能增进感情的因素</h3><blockquote>\n<p>11种能增进感情的因素，其中10种与我在课程中引用的科学研究完全吻合。最重要的因素是专一，其次是良好的沟通技巧。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"1-兴奋\"><a href=\"#1-兴奋\" class=\"headerlink\" title=\"1. 兴奋\"></a>1. 兴奋</h4><h6 id=\"美国石溪大学心理学家阿瑟·阿伦（Arthur-Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\"><a href=\"#美国石溪大学心理学家阿瑟·阿伦（Arthur-Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\" class=\"headerlink\" title=\"美国石溪大学心理学家阿瑟·阿伦（Arthur Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\"></a>美国石溪大学心理学家阿瑟·阿伦（Arthur Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”</h6><h4 id=\"2-亲密性和熟悉程度\"><a href=\"#2-亲密性和熟悉程度\" class=\"headerlink\" title=\"2. 亲密性和熟悉程度\"></a>2. 亲密性和熟悉程度</h4><h6 id=\"美国斯坦福大学社会心理学家利昂·费斯廷格（Leon-Festinger）和罗伯特·扎伊翁茨（Robert-Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\"><a href=\"#美国斯坦福大学社会心理学家利昂·费斯廷格（Leon-Festinger）和罗伯特·扎伊翁茨（Robert-Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\" class=\"headerlink\" title=\"美国斯坦福大学社会心理学家利昂·费斯廷格（Leon Festinger）和罗伯特·扎伊翁茨（Robert Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\"></a>美国斯坦福大学社会心理学家利昂·费斯廷格（Leon Festinger）和罗伯特·扎伊翁茨（Robert Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。</h6><h4 id=\"3-相似性\"><a href=\"#3-相似性\" class=\"headerlink\" title=\"3. 相似性\"></a>3. 相似性</h4><h6 id=\"不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan-Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\"><a href=\"#不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan-Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\" class=\"headerlink\" title=\"不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\"></a>不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。</h6><h4 id=\"4-幽默\"><a href=\"#4-幽默\" class=\"headerlink\" title=\"4. 幽默\"></a>4. 幽默</h4><h6 id=\"婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert-Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\"><a href=\"#婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert-Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\" class=\"headerlink\" title=\"婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\"></a>婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？</h6><h4 id=\"5-新鲜感\"><a href=\"#5-新鲜感\" class=\"headerlink\" title=\"5. 新鲜感\"></a>5. 新鲜感</h4><h6 id=\"美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg-Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\"><a href=\"#美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg-Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\" class=\"headerlink\" title=\"美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\"></a>美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。</h6><h4 id=\"6-放松\"><a href=\"#6-放松\" class=\"headerlink\" title=\"6. 放松\"></a>6. 放松</h4><h6 id=\"无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\"><a href=\"#无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\" class=\"headerlink\" title=\"无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\"></a>无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。</h6><h4 id=\"7-友善、迁就和宽容\"><a href=\"#7-友善、迁就和宽容\" class=\"headerlink\" title=\"7. 友善、迁就和宽容\"></a>7. 友善、迁就和宽容</h4><h6 id=\"许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\"><a href=\"#许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\" class=\"headerlink\" title=\"许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\"></a>许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备</h6><h4 id=\"8-触摸和性\"><a href=\"#8-触摸和性\" class=\"headerlink\" title=\"8. 触摸和性\"></a>8. 触摸和性</h4><h6 id=\"单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan-Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\"><a href=\"#单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan-Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\" class=\"headerlink\" title=\"单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\"></a>单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目</h6><h4 id=\"9-自我表露\"><a href=\"#9-自我表露\" class=\"headerlink\" title=\"9.自我表露\"></a>9.自我表露</h4><h6 id=\"阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\"><a href=\"#阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\" class=\"headerlink\" title=\"阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\"></a>阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。</h6><h4 id=\"10-承诺\"><a href=\"#10-承诺\" class=\"headerlink\" title=\"10. 承诺\"></a>10. 承诺</h4><h6 id=\"在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena-Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant-marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\"><a href=\"#在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena-Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant-marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\" class=\"headerlink\" title=\"在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\"></a>在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。</h6><p>摘自：《科学教你谈恋爱》 — 〔美〕罗伯特·爱泼斯坦<br>在豆瓣阅读书店查看：<a href=\"https://read.douban.com/ebook/3384/\" target=\"_blank\" rel=\"external\">https://read.douban.com/ebook/3384/</a><br>本作品由环球科学授权豆瓣阅读全球范围内电子版制作与发行。<br>© 版权所有，侵权必究。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\"><a href=\"#我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\" class=\"headerlink\" title=\"我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。\"></a>我们在童话和电影的伴随下长大，在这些故事中，总有一种魔力帮助人们找到真爱，而后轻松过上幸福的生活。这些童话让我们变得无能为力，完全将爱情交给了命运。</h4><ul>\n<li><h3 id=\"爱情建设练习\"><a href=\"#爱情建设练习\" class=\"headerlink\" title=\"爱情建设练习\"></a>爱情建设练习</h3><blockquote>\n<h3 id=\"下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\"><a href=\"#下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\" class=\"headerlink\" title=\"下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。\"></a>下面这些有趣的练习是受到科学研究的启发而设计的。你可以用这些技巧建立与同伴甚至陌生人之间的亲密感。</h3></blockquote>\n</li>\n</ul>\n<h4 id=\"1-合二为一\"><a href=\"#1-合二为一\" class=\"headerlink\" title=\"1. 合二为一\"></a>1. 合二为一</h4><h6 id=\"相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\"><a href=\"#相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\" class=\"headerlink\" title=\"相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。\"></a>相互轻轻拥抱，开始感受对方的呼吸，慢慢试着调整自己的呼吸与对方同步。几分钟之后，你可能会觉得两个人似乎融合在一起了。</h6><h4 id=\"2-深情对视\"><a href=\"#2-深情对视\" class=\"headerlink\" title=\"2. 深情对视\"></a>2. 深情对视</h4><h6 id=\"站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\"><a href=\"#站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\" class=\"headerlink\" title=\"站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。\"></a>站在或者坐在和对方一步之遥的地方，深情地凝望对方的双眼，尝试去审视对方的内心。持续两分钟，然后告诉他你看到了什么。</h6><h4 id=\"3-模仿练习\"><a href=\"#3-模仿练习\" class=\"headerlink\" title=\"3. 模仿练习\"></a>3. 模仿练习</h4><h6 id=\"和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\"><a href=\"#和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\" class=\"headerlink\" title=\"和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。\"></a>和对方紧邻而站（坐），模仿他的举手投足，一举一动。这很有趣，也很难。双方都会觉得这些动作是自己自发而做，而双方的动作又息息相关。</h6><h4 id=\"4-“坠”入爱河\"><a href=\"#4-“坠”入爱河\" class=\"headerlink\" title=\"4. “坠”入爱河\"></a>4. “坠”入爱河</h4><h6 id=\"这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\"><a href=\"#这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\" class=\"headerlink\" title=\"这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。\"></a>这是一个信任练习，会增强两人之间惺惺相惜的感觉。背对同伴而站，让自己往后倒，跌进他的怀抱。交换角色，重复几次，然后分享你们的感受。陌生人在做了这个练习以后，有时都会产生一种与对方相识已久的感觉。</h6><h4 id=\"5-交换秘密\"><a href=\"#5-交换秘密\" class=\"headerlink\" title=\"5.交换秘密\"></a>5.交换秘密</h4><h6 id=\"写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\"><a href=\"#写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\" class=\"headerlink\" title=\"写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。\"></a>写下自己内心深处的秘密，让伴侣也写下他的秘密。然后交换你们的纸条，谈论上面的秘密。你可以持续这一过程直到你们之间不再有秘密。但也可以保留一些秘密，供下次使用。</h6><h4 id=\"6-读心游戏\"><a href=\"#6-读心游戏\" class=\"headerlink\" title=\"6.读心游戏\"></a>6.读心游戏</h4><h6 id=\"写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\"><a href=\"#写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\" class=\"headerlink\" title=\"写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色\"></a>写下你想要对他说的话。然后在接下来的几分钟内，不用语言，努力把自己的思想或念头“放射”到对方身上，要对方尽力去猜你在想什么。如果对方猜不出来，告诉他答案。交换角色</h6><h4 id=\"8-走进彼此\"><a href=\"#8-走进彼此\" class=\"headerlink\" title=\"8.走进彼此\"></a>8.走进彼此</h4><h6 id=\"站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\"><a href=\"#站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\" class=\"headerlink\" title=\"站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）\"></a>站在离对方相隔一米的地方，开始相互注视。每十秒钟靠近一点点，这样重复几次以后，你就会完全进入对方的私人半径（45厘米左右）。在不发生身体接触的前提下尽量靠近。（我的学生告诉我这个练习经常都是以亲吻结束。）</h6><h4 id=\"9-爱的光晕\"><a href=\"#9-爱的光晕\" class=\"headerlink\" title=\"9.爱的光晕\"></a>9.爱的光晕</h4><h6 id=\"与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\"><a href=\"#与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\" class=\"headerlink\" title=\"与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。\"></a>与爱人掌心相对，但不发生真正的接触。这样做几分钟，你不仅会感到热量，有时甚至会感到有奇异的火花迸发。</h6><ul>\n<li><h3 id=\"能增进感情的因素\"><a href=\"#能增进感情的因素\" class=\"headerlink\" title=\"能增进感情的因素\"></a>能增进感情的因素</h3><blockquote>\n<p>11种能增进感情的因素，其中10种与我在课程中引用的科学研究完全吻合。最重要的因素是专一，其次是良好的沟通技巧。</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"1-兴奋\"><a href=\"#1-兴奋\" class=\"headerlink\" title=\"1. 兴奋\"></a>1. 兴奋</h4><h6 id=\"美国石溪大学心理学家阿瑟·阿伦（Arthur-Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\"><a href=\"#美国石溪大学心理学家阿瑟·阿伦（Arthur-Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\" class=\"headerlink\" title=\"美国石溪大学心理学家阿瑟·阿伦（Arthur Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”\"></a>美国石溪大学心理学家阿瑟·阿伦（Arthur Aron）等人指出，当人们通过锻炼或历险而达到兴奋状态后，相互之间在情感上就会更亲密。可以试试过山车。见“爱情建设练习”</h6><h4 id=\"2-亲密性和熟悉程度\"><a href=\"#2-亲密性和熟悉程度\" class=\"headerlink\" title=\"2. 亲密性和熟悉程度\"></a>2. 亲密性和熟悉程度</h4><h6 id=\"美国斯坦福大学社会心理学家利昂·费斯廷格（Leon-Festinger）和罗伯特·扎伊翁茨（Robert-Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\"><a href=\"#美国斯坦福大学社会心理学家利昂·费斯廷格（Leon-Festinger）和罗伯特·扎伊翁茨（Robert-Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\" class=\"headerlink\" title=\"美国斯坦福大学社会心理学家利昂·费斯廷格（Leon Festinger）和罗伯特·扎伊翁茨（Robert Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。\"></a>美国斯坦福大学社会心理学家利昂·费斯廷格（Leon Festinger）和罗伯特·扎伊翁茨（Robert Zajonc）等人通过研究得出结论：只要陪伴一个人左右，就会产生好感。当两个人有意识地让对方进入自己的私人空间，亲密感就会很快增长。见“走进彼此”练习。</h6><h4 id=\"3-相似性\"><a href=\"#3-相似性\" class=\"headerlink\" title=\"3. 相似性\"></a>3. 相似性</h4><h6 id=\"不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan-Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\"><a href=\"#不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan-Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\" class=\"headerlink\" title=\"不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。\"></a>不同之处总能让我们相互吸引，但美国杜克大学和麻省理工学院的行为经济学家丹·阿里利（Dan Ariely）等人的研究表明，人们常常和与自己相似的人结成一对，比如相似的智力、背景和外表等。一些研究甚至显示，仅仅是模仿一个人都会增强亲密感。见“模仿练习”。</h6><h4 id=\"4-幽默\"><a href=\"#4-幽默\" class=\"headerlink\" title=\"4. 幽默\"></a>4. 幽默</h4><h6 id=\"婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert-Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\"><a href=\"#婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert-Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\" class=\"headerlink\" title=\"婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？\"></a>婚姻咨询师和学者珍妮特（Jeanette）以及罗伯特·劳尔（Robert Lauer）在1986年研究表明，在长期、美满的婚姻关系中，双方都能让对方笑口常开。其他研究显示，女性往往找能让她们笑声不断的男性作为自己的伴侣——大概是因为笑的时候人们就放松了戒备。知道什么好的笑话吗？</h6><h4 id=\"5-新鲜感\"><a href=\"#5-新鲜感\" class=\"headerlink\" title=\"5. 新鲜感\"></a>5. 新鲜感</h4><h6 id=\"美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg-Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\"><a href=\"#美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg-Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\" class=\"headerlink\" title=\"美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。\"></a>美国佛罗里达州立大学的心理学家格雷格·斯特朗（Greg Strong）和阿伦等人曾指出，当人们一起尝试新鲜事物时，相互之间的关系会更进一步。新鲜感能够让人的感官活跃起来，并使人放松戒备。</h6><h4 id=\"6-放松\"><a href=\"#6-放松\" class=\"headerlink\" title=\"6. 放松\"></a>6. 放松</h4><h6 id=\"无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\"><a href=\"#无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\" class=\"headerlink\" title=\"无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。\"></a>无数的恋爱关系或许都是从一杯红酒开始的。压抑会让人产生戒备心，所以放松压抑的神经能够帮助人们建立关系。然而灌醉自己却会导致盲目，也有害健康。除了酒精，你可以尝试“合二为一”练习。</h6><h4 id=\"7-友善、迁就和宽容\"><a href=\"#7-友善、迁就和宽容\" class=\"headerlink\" title=\"7. 友善、迁就和宽容\"></a>7. 友善、迁就和宽容</h4><h6 id=\"许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\"><a href=\"#许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\" class=\"headerlink\" title=\"许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备\"></a>许多研究证明我们倾向于和友善、善解人意、体贴的人建立关系。当一个人为了我们而刻意改变自己的行为，比如戒烟或戒酒时，我们对他的好感会油然而生。宽容往往能够导致双方相互依恋，因为当一个人原谅另一个人的同时，也放松了戒备</h6><h4 id=\"8-触摸和性\"><a href=\"#8-触摸和性\" class=\"headerlink\" title=\"8. 触摸和性\"></a>8. 触摸和性</h4><h6 id=\"单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan-Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\"><a href=\"#单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan-Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\" class=\"headerlink\" title=\"单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目\"></a>单纯的触摸会产生温暖、积极的感觉，而给对方做背部按摩则会有意想不到的效果。即便是相互靠近而不发生肢体接触也会产生良好的效果。美国伊利诺伊州立大学的社会心理学家苏珊·施普雷彻（Susan Sprecher）等人还指出，性吸引能够在情感上拉近人们之间的距离，特别是对女性而言。但这也很危险：人们会把性吸引错当成是爱。在不了解对方的情况下你不可能爱上他或她，可是性吸引却让人们对伴侣的其他方面变得盲目</h6><h4 id=\"9-自我表露\"><a href=\"#9-自我表露\" class=\"headerlink\" title=\"9.自我表露\"></a>9.自我表露</h4><h6 id=\"阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\"><a href=\"#阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\" class=\"headerlink\" title=\"阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。\"></a>阿伦、施普雷彻等人的研究表明，当人们分享秘密的时候，往往他们之间的关系就更巩固了。所以关键还是让自己放松戒备。见“交换秘密”练习。</h6><h4 id=\"10-承诺\"><a href=\"#10-承诺\" class=\"headerlink\" title=\"10. 承诺\"></a>10. 承诺</h4><h6 id=\"在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena-Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant-marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\"><a href=\"#在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena-Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant-marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\" class=\"headerlink\" title=\"在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。\"></a>在美国，我们并不擅长坚守承诺，但美国珀杜大学的心理学家西蒙娜·阿里亚加（Ximena Arriage）等科学家认为，承诺对建立恋爱关系至关重要。不注重承诺的人会负面地理解伴侣的行为，另一方面，这样长此以往会对两人的关系造成致命伤害。在美国，目前契约婚姻（covenant marriage）仅在亚利桑那州、阿肯色州和路易斯安那州属合法婚姻，这种产生于福音派基督教运动的新式婚姻涉及严肃的承诺：夫妇同意进行婚前咨询，并对离婚具有限制性条款。在美国，传统婚姻可以很容易解除关系，甚至不需要任何明确的法律原因（所谓的不追究责任离婚）。</h6><p>摘自：《科学教你谈恋爱》 — 〔美〕罗伯特·爱泼斯坦<br>在豆瓣阅读书店查看：<a href=\"https://read.douban.com/ebook/3384/\" target=\"_blank\" rel=\"external\">https://read.douban.com/ebook/3384/</a><br>本作品由环球科学授权豆瓣阅读全球范围内电子版制作与发行。<br>© 版权所有，侵权必究。</p>\n"},{"title":"红楼-蒋勋","date":"2017-10-11T12:26:46.000Z","_content":">鉴于微信听红楼很不方便，而且不全面。我将我下载的红楼梦全部传到网易云音的个人网盘里面了，音质很棒，我测试了下耗流量也不多.\n\n1. 在APP STROE 里面下载网易云音乐手机版，如图。\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj6gulphxzj30aq0jpgsp.jpg)\n\n2. 登陆账号：176 654 92714 密码： ch19920221 登陆后执行下面操作\n\n2. 打开APP 点击左上角的那个东西，往下拖，拖到底。\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj6h01kguoj30b50jm418.jpg)\n\n3. 点击音乐云盘，所见即所得。第一集在最下面。\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj6h0rhacij30u01hcgp2.jpg)","source":"_posts/红楼-蒋勋.md","raw":"---\ntitle: 红楼-蒋勋\ndate: 2017-10-11 20:26:46\ntags: 修炼\ncategories: 修炼\n---\n>鉴于微信听红楼很不方便，而且不全面。我将我下载的红楼梦全部传到网易云音的个人网盘里面了，音质很棒，我测试了下耗流量也不多.\n\n1. 在APP STROE 里面下载网易云音乐手机版，如图。\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj6gulphxzj30aq0jpgsp.jpg)\n\n2. 登陆账号：176 654 92714 密码： ch19920221 登陆后执行下面操作\n\n2. 打开APP 点击左上角的那个东西，往下拖，拖到底。\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj6h01kguoj30b50jm418.jpg)\n\n3. 点击音乐云盘，所见即所得。第一集在最下面。\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj6h0rhacij30u01hcgp2.jpg)","slug":"红楼-蒋勋","published":1,"updated":"2017-10-11T12:31:10.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdq001810qs6ikl9ve7","content":"<blockquote>\n<p>鉴于微信听红楼很不方便，而且不全面。我将我下载的红楼梦全部传到网易云音的个人网盘里面了，音质很棒，我测试了下耗流量也不多.</p>\n</blockquote>\n<ol>\n<li>在APP STROE 里面下载网易云音乐手机版，如图。</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj6gulphxzj30aq0jpgsp.jpg\" alt=\"\"></p>\n<ol>\n<li><p>登陆账号：176 654 92714 密码： ch19920221 登陆后执行下面操作</p>\n</li>\n<li><p>打开APP 点击左上角的那个东西，往下拖，拖到底。</p>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj6h01kguoj30b50jm418.jpg\" alt=\"\"></p>\n<ol>\n<li>点击音乐云盘，所见即所得。第一集在最下面。</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj6h0rhacij30u01hcgp2.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>鉴于微信听红楼很不方便，而且不全面。我将我下载的红楼梦全部传到网易云音的个人网盘里面了，音质很棒，我测试了下耗流量也不多.</p>\n</blockquote>\n<ol>\n<li>在APP STROE 里面下载网易云音乐手机版，如图。</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj6gulphxzj30aq0jpgsp.jpg\" alt=\"\"></p>\n<ol>\n<li><p>登陆账号：176 654 92714 密码： ch19920221 登陆后执行下面操作</p>\n</li>\n<li><p>打开APP 点击左上角的那个东西，往下拖，拖到底。</p>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj6h01kguoj30b50jm418.jpg\" alt=\"\"></p>\n<ol>\n<li>点击音乐云盘，所见即所得。第一集在最下面。</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj6h0rhacij30u01hcgp2.jpg\" alt=\"\"></p>\n"},{"title":"我的少年","date":"2017-09-03T10:29:44.000Z","_content":">小的时候（小学，初中），我是一个坐不住的人。\n\n暑假，中午烈日炎炎，还能听到河岸的杨柳上稀稀落落传来几声蝉鸣，叫的那样无力，但在那的被关在楼上孤零零少年的耳中，竟是那样的动听。\n少年有一个姐姐，长期在外上学，一个月才会来一次。天！一个月在少年的眼里是得有多漫长呀！因为缺少玩伴，在这个调皮的年纪想让他老老实实的呆在家里是坚决不可能的。\n用渴望眼神的望着河边的杨柳，少年再一次坚定了他的决心。楼下隐隐约约的传来爸爸睡觉的鼾声，他准备策划一起逃脱，而如今，时机已经到了。\n\n根据多年抗争的经验，少年心中有一个口诀：一要轻，二要快，三要见机。老爸的鼾声预示着机会到了，于是蹑手蹑脚的下楼，短短十八级阶梯，花了将近五分钟。尤其是走到第九阶转弯的的时候发现老妈\n竟然就睡在楼梯下的时候，吓得他差点直接打道回府。当然我的少年是勇敢的，这点场面还是见过的。不过越加小心了，真担心一个不慎把老妈惊醒，那么今天下午什么事都别想干了。幸好，我的少年今天是幸运的,老妈睡的比较沉。即使弄出了一丢丢响动，也没有把她吵醒。\n\n成功逃脱的少年大步走在路上，仿如隔世。田野上的风是炙热而轻快的，就有如少年此刻的心情。此时此刻他早已将晚上回去必将迎来一顿臭骂的事情抛在脑后了。只是有点担心玩到一半老妈会不会提着棍子出来找他，\n这样的事情发生过不止一两次了,想想都觉得惊悚，摇了摇头，很快少年就把这件事抛在了脑后。今天他要大干一场....","source":"_posts/静坐畅想.md","raw":"---\ntitle: 我的少年\ndate: 2017-09-03 18:29:44\ntags: 随笔集\n---\n>小的时候（小学，初中），我是一个坐不住的人。\n\n暑假，中午烈日炎炎，还能听到河岸的杨柳上稀稀落落传来几声蝉鸣，叫的那样无力，但在那的被关在楼上孤零零少年的耳中，竟是那样的动听。\n少年有一个姐姐，长期在外上学，一个月才会来一次。天！一个月在少年的眼里是得有多漫长呀！因为缺少玩伴，在这个调皮的年纪想让他老老实实的呆在家里是坚决不可能的。\n用渴望眼神的望着河边的杨柳，少年再一次坚定了他的决心。楼下隐隐约约的传来爸爸睡觉的鼾声，他准备策划一起逃脱，而如今，时机已经到了。\n\n根据多年抗争的经验，少年心中有一个口诀：一要轻，二要快，三要见机。老爸的鼾声预示着机会到了，于是蹑手蹑脚的下楼，短短十八级阶梯，花了将近五分钟。尤其是走到第九阶转弯的的时候发现老妈\n竟然就睡在楼梯下的时候，吓得他差点直接打道回府。当然我的少年是勇敢的，这点场面还是见过的。不过越加小心了，真担心一个不慎把老妈惊醒，那么今天下午什么事都别想干了。幸好，我的少年今天是幸运的,老妈睡的比较沉。即使弄出了一丢丢响动，也没有把她吵醒。\n\n成功逃脱的少年大步走在路上，仿如隔世。田野上的风是炙热而轻快的，就有如少年此刻的心情。此时此刻他早已将晚上回去必将迎来一顿臭骂的事情抛在脑后了。只是有点担心玩到一半老妈会不会提着棍子出来找他，\n这样的事情发生过不止一两次了,想想都觉得惊悚，摇了摇头，很快少年就把这件事抛在了脑后。今天他要大干一场....","slug":"静坐畅想","published":1,"updated":"2017-10-02T16:15:08.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdu001a10qswqt3pohs","content":"<blockquote>\n<p>小的时候（小学，初中），我是一个坐不住的人。</p>\n</blockquote>\n<p>暑假，中午烈日炎炎，还能听到河岸的杨柳上稀稀落落传来几声蝉鸣，叫的那样无力，但在那的被关在楼上孤零零少年的耳中，竟是那样的动听。<br>少年有一个姐姐，长期在外上学，一个月才会来一次。天！一个月在少年的眼里是得有多漫长呀！因为缺少玩伴，在这个调皮的年纪想让他老老实实的呆在家里是坚决不可能的。<br>用渴望眼神的望着河边的杨柳，少年再一次坚定了他的决心。楼下隐隐约约的传来爸爸睡觉的鼾声，他准备策划一起逃脱，而如今，时机已经到了。</p>\n<p>根据多年抗争的经验，少年心中有一个口诀：一要轻，二要快，三要见机。老爸的鼾声预示着机会到了，于是蹑手蹑脚的下楼，短短十八级阶梯，花了将近五分钟。尤其是走到第九阶转弯的的时候发现老妈<br>竟然就睡在楼梯下的时候，吓得他差点直接打道回府。当然我的少年是勇敢的，这点场面还是见过的。不过越加小心了，真担心一个不慎把老妈惊醒，那么今天下午什么事都别想干了。幸好，我的少年今天是幸运的,老妈睡的比较沉。即使弄出了一丢丢响动，也没有把她吵醒。</p>\n<p>成功逃脱的少年大步走在路上，仿如隔世。田野上的风是炙热而轻快的，就有如少年此刻的心情。此时此刻他早已将晚上回去必将迎来一顿臭骂的事情抛在脑后了。只是有点担心玩到一半老妈会不会提着棍子出来找他，<br>这样的事情发生过不止一两次了,想想都觉得惊悚，摇了摇头，很快少年就把这件事抛在了脑后。今天他要大干一场….</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>小的时候（小学，初中），我是一个坐不住的人。</p>\n</blockquote>\n<p>暑假，中午烈日炎炎，还能听到河岸的杨柳上稀稀落落传来几声蝉鸣，叫的那样无力，但在那的被关在楼上孤零零少年的耳中，竟是那样的动听。<br>少年有一个姐姐，长期在外上学，一个月才会来一次。天！一个月在少年的眼里是得有多漫长呀！因为缺少玩伴，在这个调皮的年纪想让他老老实实的呆在家里是坚决不可能的。<br>用渴望眼神的望着河边的杨柳，少年再一次坚定了他的决心。楼下隐隐约约的传来爸爸睡觉的鼾声，他准备策划一起逃脱，而如今，时机已经到了。</p>\n<p>根据多年抗争的经验，少年心中有一个口诀：一要轻，二要快，三要见机。老爸的鼾声预示着机会到了，于是蹑手蹑脚的下楼，短短十八级阶梯，花了将近五分钟。尤其是走到第九阶转弯的的时候发现老妈<br>竟然就睡在楼梯下的时候，吓得他差点直接打道回府。当然我的少年是勇敢的，这点场面还是见过的。不过越加小心了，真担心一个不慎把老妈惊醒，那么今天下午什么事都别想干了。幸好，我的少年今天是幸运的,老妈睡的比较沉。即使弄出了一丢丢响动，也没有把她吵醒。</p>\n<p>成功逃脱的少年大步走在路上，仿如隔世。田野上的风是炙热而轻快的，就有如少年此刻的心情。此时此刻他早已将晚上回去必将迎来一顿臭骂的事情抛在脑后了。只是有点担心玩到一半老妈会不会提着棍子出来找他，<br>这样的事情发生过不止一两次了,想想都觉得惊悚，摇了摇头，很快少年就把这件事抛在了脑后。今天他要大干一场….</p>\n"},{"title":"Hdoop 2.7.3 分布式配置","date":"2017-08-29T13:31:19.000Z","_content":"`\n学一门新技术，首先选择官方文档，如果英文水平不够可以找一份中文教程相互印证。碰到疑惑请首先选择google(用google是需要翻墙的，我用的是穿云兔)，然后再考虑百度，如果还是解决不了，请加个相关的QQ群，里面会有相关资料。而且可以向群友请教，但是要放宽心态，记住，有人帮忙解答是我的福气，没人帮忙解答是正常情况。\n`\n>安装虚拟机 CenterOS 7.2\n\n本人使用的虚拟机是VMware。\n\n资源规划\n\nm1： 1G 内存 10G 硬盘\n\ns1：512M 内存 10G硬盘\n\ns2：512M 内存 10G硬盘\n\n>准备好hadoop稳定版。2.7.3是hadoop 2.X的稳定版[hadoop](http://www-eu.apache.org/dist/hadoop/common/stable/)\n\n准备好工具 xshell xftp\n\n通过xftp将下载好的资源放在 /user 下\n\n解压：tar -zxvf hadoop-2.7.3.tar.gz\n\n重命名： mv hadoop-2.7.3.tar.gz hadoop\n\n删除下载包：rm -rf hadoop-2.7.3.tar.gz\n\n>三.配置静态IP（非必须）\n\n查看网卡配\n`ip add`\n进入网络配置文件目录\n`cd /etc/sysconfig/network-scripts`\n编辑配置文件，添加修改以下内容\n`vim ifcfg-eno16777736`\n`\nTYPE=Ethernet\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777736\nUUID=a33a7da0-6630-43c3-8b1b-135e2c00f29f\nDEVICE=eno16777736\nONBOOT=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPADDR0=192.168.1.111\nNETMASK=255.255.255.0\nPREFIX0=24\nGATEWAY0=192.168.1.1\nDNS1=8.8.8.8\n`\n修改主机名\n`hostnamectl set-hostname m1`\n网卡重启\n`service network restart`\n修改时区\n`timedatectl set-timezone Asia/Shanghai`\n配置局域网映射 x3（ x3表示三个机器都要配置）\n`\necho \"192.168.1.111 m1\" >> /etc/hosts\necho \"192.168.1.112 s2\" >> /etc/hosts\necho \"192.168.1.113 s3\" >> /etc/hosts\n`\n创建 hadoop 用户以及 hadoop 用户组 x3\n`\ngroupadd hadoop\nuseradd -m -g hadoop hadoop\npasswd hadoop\n`\n>配置jdk。\n\n查看当前系统是否安装了jdk\n`rpm -qa | grep jdk`\n卸载\n`\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\n`\n下载jdk （去官网下载即可），下载好后将jdk放在/user目录下\n解压缩\n`tar -zxvf jdk-8u131-linux-x64.tar.gz`\n删除下载包\n`rm -rf jdk-8u131-linux-x64.tar.gz`\n配置环境变量\n`vim /etc/profile`\n在最下方加上这么几句\n`\nexport JAVA_HOME=/usr/jdk1.8.0_131/\nexport JRE_HOME=/usr/jdk1.8.0_131/jre\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin \n`\n使环境变量生效\n`\nsource /etc/profile\n`\n查看是否生效\n`java -version`\n\n>SSH免密登录\n\n配置ssh环境变量（x3 表示三个节点都要做此动作）\n`echo 'eval $(ssh-agent)' >> /etc/profile`\n刷新环境变量（x3）\n`source /etc/profile`\n切换到hadoop用户组（x3）\n`su hadoop`\nssh初始化 （x3）\n`ssh localhost`\n进入hadoop用户目录（m1 表示只有m1节点做此动作）\n`cd ~/.ssh`\n利用 ssh-keygen 生成密钥 然后一直按回车（m1）\nssh-keygen -t rsa -P \"\"\n将id_rsa.pub的内容追加到了authorized_keys的内容后面 （m1）\n`cat id_rsa.pub >> authorized_keys`\n将公钥copy到s2 会要输入s2 hadoop用户的登录密码（m1）\n`ssh-copy-id s2`\n将公钥copy到s3 会要输入s3 hadoop用户的登录密码（m1）\n`ssh-copy-id s3`\n使用 ssh-agent 实现免密登录（m1）\n`ssh-add ~/.ssh/id_rsa`\n修改权限 ~/.ssh/*目录的权限(x3)\n`\nchmod 600 ~/.ssh/authorized_keys\n`\n检查免密登录是否成功(m1)\n`ssh s2`\n\n>安装hadoop 2.7.3 （x3）\n\n选择hadoop的安装地址(x3)\n`cd /user`\n解压\n`tar -zxvf hadoop-2.7.3.tar.gz`\n重命名(x3)\n`mv hadoop-2.7.3/ hadoop`\n赋予权限 令hadoop用户组下的hadoop用户对/user/hadoop 及以下所有子目录拥有管理员权限\n`chown -R hadoop:hadoop hadoop（x3）`\n在/user/hadoop目录下创建几个目录，用来放临时文件\n`mkdir dfs\nmkdir dfs/name\nmkdir dfs/data\nmkdir tmp`\n配置配置文件 都在/usr/hadoop/etc/hadoop目录下\n`\nhadoop-env.sh\nyarn-env.sh\nslaves\ncore-site.xml\nhdfs-site.xml\nmapred-site.xml\nyarn-site.xml\nhadoop-env.sh 配置hadoop的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131\nyarn-env.sh 配置yarm的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131\n`\nslaves slaves下的所有机器都是当前name node 的data node 如果是伪分布式配置localhost，我这边配置的是s2 和s3 \ncore-site.xml 配置hadoop的一些重要参数，包括缓存文件的保存路径，hdfs文件系统的入口\nhdfs-site.xml 配置hdfs相关内容，包括备用节点，name node ， data node的存储文件的位置\nmapred-site.xml 配置mapreduce相关的东西\nyarn-site.xml 配置yarn相关的东西\n配置hadoop环境变量（x3）\n`vim /etc/profile`\n`#hadoop\nexport HADOOP_HOME=/user/hadoop\nexport PATH=$PATH:$HADOOP_HOME/sbin\nexport PATH=$PATH:$HADOOP_HOME/bin`\n使立即生效\n`source /etc/profile`\n到此，主节点已配置完全，从节点可参照主节点进行配置，下面这个可以将主节点属于hadoop的配置参数直接拷贝到从节点\n`scp -r /usr/hadoop/etc/hadoop/ root@s2:/usr/hadoop/etc\nscp -r /usr/hadoop/etc/hadoop/ root@s3:/usr/hadoop/etc`\nhadoop初始化 (m1节点)\nbin/hdfs namenode -format\n启动hadoop集群(m1节点）\nstart-all.sh\n[hadoop常用参数](http://www.zhangrenhua.com/2016/01/05/hadoop-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/?spm=5176.100239.blogcont152086.23.2GzKob)\n[hadoop默认参数](https://segmentfault.com/a/1190000000709725?spm=5176.100239.blogcont152086.24.58jMXV)\n","source":"_posts/Hdoop-2-7-3-分布式配置.md","raw":"---\ntitle: Hdoop 2.7.3 分布式配置\ndate: 2017-08-29 21:31:19\ntags: hadoop\ncategories: hadoop\n---\n`\n学一门新技术，首先选择官方文档，如果英文水平不够可以找一份中文教程相互印证。碰到疑惑请首先选择google(用google是需要翻墙的，我用的是穿云兔)，然后再考虑百度，如果还是解决不了，请加个相关的QQ群，里面会有相关资料。而且可以向群友请教，但是要放宽心态，记住，有人帮忙解答是我的福气，没人帮忙解答是正常情况。\n`\n>安装虚拟机 CenterOS 7.2\n\n本人使用的虚拟机是VMware。\n\n资源规划\n\nm1： 1G 内存 10G 硬盘\n\ns1：512M 内存 10G硬盘\n\ns2：512M 内存 10G硬盘\n\n>准备好hadoop稳定版。2.7.3是hadoop 2.X的稳定版[hadoop](http://www-eu.apache.org/dist/hadoop/common/stable/)\n\n准备好工具 xshell xftp\n\n通过xftp将下载好的资源放在 /user 下\n\n解压：tar -zxvf hadoop-2.7.3.tar.gz\n\n重命名： mv hadoop-2.7.3.tar.gz hadoop\n\n删除下载包：rm -rf hadoop-2.7.3.tar.gz\n\n>三.配置静态IP（非必须）\n\n查看网卡配\n`ip add`\n进入网络配置文件目录\n`cd /etc/sysconfig/network-scripts`\n编辑配置文件，添加修改以下内容\n`vim ifcfg-eno16777736`\n`\nTYPE=Ethernet\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777736\nUUID=a33a7da0-6630-43c3-8b1b-135e2c00f29f\nDEVICE=eno16777736\nONBOOT=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPADDR0=192.168.1.111\nNETMASK=255.255.255.0\nPREFIX0=24\nGATEWAY0=192.168.1.1\nDNS1=8.8.8.8\n`\n修改主机名\n`hostnamectl set-hostname m1`\n网卡重启\n`service network restart`\n修改时区\n`timedatectl set-timezone Asia/Shanghai`\n配置局域网映射 x3（ x3表示三个机器都要配置）\n`\necho \"192.168.1.111 m1\" >> /etc/hosts\necho \"192.168.1.112 s2\" >> /etc/hosts\necho \"192.168.1.113 s3\" >> /etc/hosts\n`\n创建 hadoop 用户以及 hadoop 用户组 x3\n`\ngroupadd hadoop\nuseradd -m -g hadoop hadoop\npasswd hadoop\n`\n>配置jdk。\n\n查看当前系统是否安装了jdk\n`rpm -qa | grep jdk`\n卸载\n`\nrpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64\n`\n下载jdk （去官网下载即可），下载好后将jdk放在/user目录下\n解压缩\n`tar -zxvf jdk-8u131-linux-x64.tar.gz`\n删除下载包\n`rm -rf jdk-8u131-linux-x64.tar.gz`\n配置环境变量\n`vim /etc/profile`\n在最下方加上这么几句\n`\nexport JAVA_HOME=/usr/jdk1.8.0_131/\nexport JRE_HOME=/usr/jdk1.8.0_131/jre\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin \n`\n使环境变量生效\n`\nsource /etc/profile\n`\n查看是否生效\n`java -version`\n\n>SSH免密登录\n\n配置ssh环境变量（x3 表示三个节点都要做此动作）\n`echo 'eval $(ssh-agent)' >> /etc/profile`\n刷新环境变量（x3）\n`source /etc/profile`\n切换到hadoop用户组（x3）\n`su hadoop`\nssh初始化 （x3）\n`ssh localhost`\n进入hadoop用户目录（m1 表示只有m1节点做此动作）\n`cd ~/.ssh`\n利用 ssh-keygen 生成密钥 然后一直按回车（m1）\nssh-keygen -t rsa -P \"\"\n将id_rsa.pub的内容追加到了authorized_keys的内容后面 （m1）\n`cat id_rsa.pub >> authorized_keys`\n将公钥copy到s2 会要输入s2 hadoop用户的登录密码（m1）\n`ssh-copy-id s2`\n将公钥copy到s3 会要输入s3 hadoop用户的登录密码（m1）\n`ssh-copy-id s3`\n使用 ssh-agent 实现免密登录（m1）\n`ssh-add ~/.ssh/id_rsa`\n修改权限 ~/.ssh/*目录的权限(x3)\n`\nchmod 600 ~/.ssh/authorized_keys\n`\n检查免密登录是否成功(m1)\n`ssh s2`\n\n>安装hadoop 2.7.3 （x3）\n\n选择hadoop的安装地址(x3)\n`cd /user`\n解压\n`tar -zxvf hadoop-2.7.3.tar.gz`\n重命名(x3)\n`mv hadoop-2.7.3/ hadoop`\n赋予权限 令hadoop用户组下的hadoop用户对/user/hadoop 及以下所有子目录拥有管理员权限\n`chown -R hadoop:hadoop hadoop（x3）`\n在/user/hadoop目录下创建几个目录，用来放临时文件\n`mkdir dfs\nmkdir dfs/name\nmkdir dfs/data\nmkdir tmp`\n配置配置文件 都在/usr/hadoop/etc/hadoop目录下\n`\nhadoop-env.sh\nyarn-env.sh\nslaves\ncore-site.xml\nhdfs-site.xml\nmapred-site.xml\nyarn-site.xml\nhadoop-env.sh 配置hadoop的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131\nyarn-env.sh 配置yarm的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131\n`\nslaves slaves下的所有机器都是当前name node 的data node 如果是伪分布式配置localhost，我这边配置的是s2 和s3 \ncore-site.xml 配置hadoop的一些重要参数，包括缓存文件的保存路径，hdfs文件系统的入口\nhdfs-site.xml 配置hdfs相关内容，包括备用节点，name node ， data node的存储文件的位置\nmapred-site.xml 配置mapreduce相关的东西\nyarn-site.xml 配置yarn相关的东西\n配置hadoop环境变量（x3）\n`vim /etc/profile`\n`#hadoop\nexport HADOOP_HOME=/user/hadoop\nexport PATH=$PATH:$HADOOP_HOME/sbin\nexport PATH=$PATH:$HADOOP_HOME/bin`\n使立即生效\n`source /etc/profile`\n到此，主节点已配置完全，从节点可参照主节点进行配置，下面这个可以将主节点属于hadoop的配置参数直接拷贝到从节点\n`scp -r /usr/hadoop/etc/hadoop/ root@s2:/usr/hadoop/etc\nscp -r /usr/hadoop/etc/hadoop/ root@s3:/usr/hadoop/etc`\nhadoop初始化 (m1节点)\nbin/hdfs namenode -format\n启动hadoop集群(m1节点）\nstart-all.sh\n[hadoop常用参数](http://www.zhangrenhua.com/2016/01/05/hadoop-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/?spm=5176.100239.blogcont152086.23.2GzKob)\n[hadoop默认参数](https://segmentfault.com/a/1190000000709725?spm=5176.100239.blogcont152086.24.58jMXV)\n","slug":"Hdoop-2-7-3-分布式配置","published":1,"updated":"2017-09-02T13:18:54.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxdw001e10qs1acwevg4","content":"<p><code>学一门新技术，首先选择官方文档，如果英文水平不够可以找一份中文教程相互印证。碰到疑惑请首先选择google(用google是需要翻墙的，我用的是穿云兔)，然后再考虑百度，如果还是解决不了，请加个相关的QQ群，里面会有相关资料。而且可以向群友请教，但是要放宽心态，记住，有人帮忙解答是我的福气，没人帮忙解答是正常情况。</code></p>\n<blockquote>\n<p>安装虚拟机 CenterOS 7.2</p>\n</blockquote>\n<p>本人使用的虚拟机是VMware。</p>\n<p>资源规划</p>\n<p>m1： 1G 内存 10G 硬盘</p>\n<p>s1：512M 内存 10G硬盘</p>\n<p>s2：512M 内存 10G硬盘</p>\n<blockquote>\n<p>准备好hadoop稳定版。2.7.3是hadoop 2.X的稳定版<a href=\"http://www-eu.apache.org/dist/hadoop/common/stable/\" target=\"_blank\" rel=\"external\">hadoop</a></p>\n</blockquote>\n<p>准备好工具 xshell xftp</p>\n<p>通过xftp将下载好的资源放在 /user 下</p>\n<p>解压：tar -zxvf hadoop-2.7.3.tar.gz</p>\n<p>重命名： mv hadoop-2.7.3.tar.gz hadoop</p>\n<p>删除下载包：rm -rf hadoop-2.7.3.tar.gz</p>\n<blockquote>\n<p>三.配置静态IP（非必须）</p>\n</blockquote>\n<p>查看网卡配<br><code>ip add</code><br>进入网络配置文件目录<br><code>cd /etc/sysconfig/network-scripts</code><br>编辑配置文件，添加修改以下内容<br><code>vim ifcfg-eno16777736</code><br><code>TYPE=Ethernet\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777736\nUUID=a33a7da0-6630-43c3-8b1b-135e2c00f29f\nDEVICE=eno16777736\nONBOOT=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPADDR0=192.168.1.111\nNETMASK=255.255.255.0\nPREFIX0=24\nGATEWAY0=192.168.1.1\nDNS1=8.8.8.8</code><br>修改主机名<br><code>hostnamectl set-hostname m1</code><br>网卡重启<br><code>service network restart</code><br>修改时区<br><code>timedatectl set-timezone Asia/Shanghai</code><br>配置局域网映射 x3（ x3表示三个机器都要配置）<br><code>echo &quot;192.168.1.111 m1&quot; &gt;&gt; /etc/hosts\necho &quot;192.168.1.112 s2&quot; &gt;&gt; /etc/hosts\necho &quot;192.168.1.113 s3&quot; &gt;&gt; /etc/hosts</code><br>创建 hadoop 用户以及 hadoop 用户组 x3<br><code>groupadd hadoop\nuseradd -m -g hadoop hadoop\npasswd hadoop</code></p>\n<blockquote>\n<p>配置jdk。</p>\n</blockquote>\n<p>查看当前系统是否安装了jdk<br><code>rpm -qa | grep jdk</code><br>卸载<br><code>rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</code><br>下载jdk （去官网下载即可），下载好后将jdk放在/user目录下<br>解压缩<br><code>tar -zxvf jdk-8u131-linux-x64.tar.gz</code><br>删除下载包<br><code>rm -rf jdk-8u131-linux-x64.tar.gz</code><br>配置环境变量<br><code>vim /etc/profile</code><br>在最下方加上这么几句<br><code>export JAVA_HOME=/usr/jdk1.8.0_131/\nexport JRE_HOME=/usr/jdk1.8.0_131/jre\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</code><br>使环境变量生效<br><code>source /etc/profile</code><br>查看是否生效<br><code>java -version</code></p>\n<blockquote>\n<p>SSH免密登录</p>\n</blockquote>\n<p>配置ssh环境变量（x3 表示三个节点都要做此动作）<br><code>echo &#39;eval $(ssh-agent)&#39; &gt;&gt; /etc/profile</code><br>刷新环境变量（x3）<br><code>source /etc/profile</code><br>切换到hadoop用户组（x3）<br><code>su hadoop</code><br>ssh初始化 （x3）<br><code>ssh localhost</code><br>进入hadoop用户目录（m1 表示只有m1节点做此动作）<br><code>cd ~/.ssh</code><br>利用 ssh-keygen 生成密钥 然后一直按回车（m1）<br>ssh-keygen -t rsa -P “”<br>将id_rsa.pub的内容追加到了authorized_keys的内容后面 （m1）<br><code>cat id_rsa.pub &gt;&gt; authorized_keys</code><br>将公钥copy到s2 会要输入s2 hadoop用户的登录密码（m1）<br><code>ssh-copy-id s2</code><br>将公钥copy到s3 会要输入s3 hadoop用户的登录密码（m1）<br><code>ssh-copy-id s3</code><br>使用 ssh-agent 实现免密登录（m1）<br><code>ssh-add ~/.ssh/id_rsa</code><br>修改权限 ~/.ssh/*目录的权限(x3)<br><code>chmod 600 ~/.ssh/authorized_keys</code><br>检查免密登录是否成功(m1)<br><code>ssh s2</code></p>\n<blockquote>\n<p>安装hadoop 2.7.3 （x3）</p>\n</blockquote>\n<p>选择hadoop的安装地址(x3)<br><code>cd /user</code><br>解压<br><code>tar -zxvf hadoop-2.7.3.tar.gz</code><br>重命名(x3)<br><code>mv hadoop-2.7.3/ hadoop</code><br>赋予权限 令hadoop用户组下的hadoop用户对/user/hadoop 及以下所有子目录拥有管理员权限<br><code>chown -R hadoop:hadoop hadoop（x3）</code><br>在/user/hadoop目录下创建几个目录，用来放临时文件<br><code>mkdir dfs\nmkdir dfs/name\nmkdir dfs/data\nmkdir tmp</code><br>配置配置文件 都在/usr/hadoop/etc/hadoop目录下<br><code>hadoop-env.sh\nyarn-env.sh\nslaves\ncore-site.xml\nhdfs-site.xml\nmapred-site.xml\nyarn-site.xml\nhadoop-env.sh 配置hadoop的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131\nyarn-env.sh 配置yarm的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131</code><br>slaves slaves下的所有机器都是当前name node 的data node 如果是伪分布式配置localhost，我这边配置的是s2 和s3<br>core-site.xml 配置hadoop的一些重要参数，包括缓存文件的保存路径，hdfs文件系统的入口<br>hdfs-site.xml 配置hdfs相关内容，包括备用节点，name node ， data node的存储文件的位置<br>mapred-site.xml 配置mapreduce相关的东西<br>yarn-site.xml 配置yarn相关的东西<br>配置hadoop环境变量（x3）<br><code>vim /etc/profile</code><br><code>#hadoop\nexport HADOOP_HOME=/user/hadoop\nexport PATH=$PATH:$HADOOP_HOME/sbin\nexport PATH=$PATH:$HADOOP_HOME/bin</code><br>使立即生效<br><code>source /etc/profile</code><br>到此，主节点已配置完全，从节点可参照主节点进行配置，下面这个可以将主节点属于hadoop的配置参数直接拷贝到从节点<br><code>scp -r /usr/hadoop/etc/hadoop/ root@s2:/usr/hadoop/etc\nscp -r /usr/hadoop/etc/hadoop/ root@s3:/usr/hadoop/etc</code><br>hadoop初始化 (m1节点)<br>bin/hdfs namenode -format<br>启动hadoop集群(m1节点）<br>start-all.sh<br><a href=\"http://www.zhangrenhua.com/2016/01/05/hadoop-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/?spm=5176.100239.blogcont152086.23.2GzKob\" target=\"_blank\" rel=\"external\">hadoop常用参数</a><br><a href=\"https://segmentfault.com/a/1190000000709725?spm=5176.100239.blogcont152086.24.58jMXV\" target=\"_blank\" rel=\"external\">hadoop默认参数</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>学一门新技术，首先选择官方文档，如果英文水平不够可以找一份中文教程相互印证。碰到疑惑请首先选择google(用google是需要翻墙的，我用的是穿云兔)，然后再考虑百度，如果还是解决不了，请加个相关的QQ群，里面会有相关资料。而且可以向群友请教，但是要放宽心态，记住，有人帮忙解答是我的福气，没人帮忙解答是正常情况。</code></p>\n<blockquote>\n<p>安装虚拟机 CenterOS 7.2</p>\n</blockquote>\n<p>本人使用的虚拟机是VMware。</p>\n<p>资源规划</p>\n<p>m1： 1G 内存 10G 硬盘</p>\n<p>s1：512M 内存 10G硬盘</p>\n<p>s2：512M 内存 10G硬盘</p>\n<blockquote>\n<p>准备好hadoop稳定版。2.7.3是hadoop 2.X的稳定版<a href=\"http://www-eu.apache.org/dist/hadoop/common/stable/\" target=\"_blank\" rel=\"external\">hadoop</a></p>\n</blockquote>\n<p>准备好工具 xshell xftp</p>\n<p>通过xftp将下载好的资源放在 /user 下</p>\n<p>解压：tar -zxvf hadoop-2.7.3.tar.gz</p>\n<p>重命名： mv hadoop-2.7.3.tar.gz hadoop</p>\n<p>删除下载包：rm -rf hadoop-2.7.3.tar.gz</p>\n<blockquote>\n<p>三.配置静态IP（非必须）</p>\n</blockquote>\n<p>查看网卡配<br><code>ip add</code><br>进入网络配置文件目录<br><code>cd /etc/sysconfig/network-scripts</code><br>编辑配置文件，添加修改以下内容<br><code>vim ifcfg-eno16777736</code><br><code>TYPE=Ethernet\nBOOTPROTO=static\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nNAME=eno16777736\nUUID=a33a7da0-6630-43c3-8b1b-135e2c00f29f\nDEVICE=eno16777736\nONBOOT=yes\nPEERDNS=yes\nPEERROUTES=yes\nIPV6_PEERDNS=yes\nIPV6_PEERROUTES=yes\nIPADDR0=192.168.1.111\nNETMASK=255.255.255.0\nPREFIX0=24\nGATEWAY0=192.168.1.1\nDNS1=8.8.8.8</code><br>修改主机名<br><code>hostnamectl set-hostname m1</code><br>网卡重启<br><code>service network restart</code><br>修改时区<br><code>timedatectl set-timezone Asia/Shanghai</code><br>配置局域网映射 x3（ x3表示三个机器都要配置）<br><code>echo &quot;192.168.1.111 m1&quot; &gt;&gt; /etc/hosts\necho &quot;192.168.1.112 s2&quot; &gt;&gt; /etc/hosts\necho &quot;192.168.1.113 s3&quot; &gt;&gt; /etc/hosts</code><br>创建 hadoop 用户以及 hadoop 用户组 x3<br><code>groupadd hadoop\nuseradd -m -g hadoop hadoop\npasswd hadoop</code></p>\n<blockquote>\n<p>配置jdk。</p>\n</blockquote>\n<p>查看当前系统是否安装了jdk<br><code>rpm -qa | grep jdk</code><br>卸载<br><code>rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.8.0-openjdk-1.8.0.65-3.b17.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-1.7.0.91-2.6.2.3.el7.x86_64\nrpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.91-2.6.2.3.el7.x86_64</code><br>下载jdk （去官网下载即可），下载好后将jdk放在/user目录下<br>解压缩<br><code>tar -zxvf jdk-8u131-linux-x64.tar.gz</code><br>删除下载包<br><code>rm -rf jdk-8u131-linux-x64.tar.gz</code><br>配置环境变量<br><code>vim /etc/profile</code><br>在最下方加上这么几句<br><code>export JAVA_HOME=/usr/jdk1.8.0_131/\nexport JRE_HOME=/usr/jdk1.8.0_131/jre\nexport CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib\nexport PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</code><br>使环境变量生效<br><code>source /etc/profile</code><br>查看是否生效<br><code>java -version</code></p>\n<blockquote>\n<p>SSH免密登录</p>\n</blockquote>\n<p>配置ssh环境变量（x3 表示三个节点都要做此动作）<br><code>echo &#39;eval $(ssh-agent)&#39; &gt;&gt; /etc/profile</code><br>刷新环境变量（x3）<br><code>source /etc/profile</code><br>切换到hadoop用户组（x3）<br><code>su hadoop</code><br>ssh初始化 （x3）<br><code>ssh localhost</code><br>进入hadoop用户目录（m1 表示只有m1节点做此动作）<br><code>cd ~/.ssh</code><br>利用 ssh-keygen 生成密钥 然后一直按回车（m1）<br>ssh-keygen -t rsa -P “”<br>将id_rsa.pub的内容追加到了authorized_keys的内容后面 （m1）<br><code>cat id_rsa.pub &gt;&gt; authorized_keys</code><br>将公钥copy到s2 会要输入s2 hadoop用户的登录密码（m1）<br><code>ssh-copy-id s2</code><br>将公钥copy到s3 会要输入s3 hadoop用户的登录密码（m1）<br><code>ssh-copy-id s3</code><br>使用 ssh-agent 实现免密登录（m1）<br><code>ssh-add ~/.ssh/id_rsa</code><br>修改权限 ~/.ssh/*目录的权限(x3)<br><code>chmod 600 ~/.ssh/authorized_keys</code><br>检查免密登录是否成功(m1)<br><code>ssh s2</code></p>\n<blockquote>\n<p>安装hadoop 2.7.3 （x3）</p>\n</blockquote>\n<p>选择hadoop的安装地址(x3)<br><code>cd /user</code><br>解压<br><code>tar -zxvf hadoop-2.7.3.tar.gz</code><br>重命名(x3)<br><code>mv hadoop-2.7.3/ hadoop</code><br>赋予权限 令hadoop用户组下的hadoop用户对/user/hadoop 及以下所有子目录拥有管理员权限<br><code>chown -R hadoop:hadoop hadoop（x3）</code><br>在/user/hadoop目录下创建几个目录，用来放临时文件<br><code>mkdir dfs\nmkdir dfs/name\nmkdir dfs/data\nmkdir tmp</code><br>配置配置文件 都在/usr/hadoop/etc/hadoop目录下<br><code>hadoop-env.sh\nyarn-env.sh\nslaves\ncore-site.xml\nhdfs-site.xml\nmapred-site.xml\nyarn-site.xml\nhadoop-env.sh 配置hadoop的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131\nyarn-env.sh 配置yarm的java环境变量 export JAVA_HOME=/usr/jdk1.8.0_131</code><br>slaves slaves下的所有机器都是当前name node 的data node 如果是伪分布式配置localhost，我这边配置的是s2 和s3<br>core-site.xml 配置hadoop的一些重要参数，包括缓存文件的保存路径，hdfs文件系统的入口<br>hdfs-site.xml 配置hdfs相关内容，包括备用节点，name node ， data node的存储文件的位置<br>mapred-site.xml 配置mapreduce相关的东西<br>yarn-site.xml 配置yarn相关的东西<br>配置hadoop环境变量（x3）<br><code>vim /etc/profile</code><br><code>#hadoop\nexport HADOOP_HOME=/user/hadoop\nexport PATH=$PATH:$HADOOP_HOME/sbin\nexport PATH=$PATH:$HADOOP_HOME/bin</code><br>使立即生效<br><code>source /etc/profile</code><br>到此，主节点已配置完全，从节点可参照主节点进行配置，下面这个可以将主节点属于hadoop的配置参数直接拷贝到从节点<br><code>scp -r /usr/hadoop/etc/hadoop/ root@s2:/usr/hadoop/etc\nscp -r /usr/hadoop/etc/hadoop/ root@s3:/usr/hadoop/etc</code><br>hadoop初始化 (m1节点)<br>bin/hdfs namenode -format<br>启动hadoop集群(m1节点）<br>start-all.sh<br><a href=\"http://www.zhangrenhua.com/2016/01/05/hadoop-%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0%E6%95%B4%E7%90%86/?spm=5176.100239.blogcont152086.23.2GzKob\" target=\"_blank\" rel=\"external\">hadoop常用参数</a><br><a href=\"https://segmentfault.com/a/1190000000709725?spm=5176.100239.blogcont152086.24.58jMXV\" target=\"_blank\" rel=\"external\">hadoop默认参数</a></p>\n"},{"title":"愿你走出半生，归来仍是少年","date":"2017-08-17T02:42:38.000Z","_content":"![](http://ww1.sinaimg.cn/large/005Y4715gy1fimkny1ndyj30ms0e8gpg.jpg)\n\n\n有一条恶龙，每年要求村庄献祭一个处女，每年这个村庄都会有一个少年英雄去与恶龙搏斗，但无人生还。又一个英雄出发时，有人悄悄尾随。龙穴铺满金银财宝，英雄用剑刺死恶龙，然后坐在尸身上，看着闪烁的珠宝，慢慢地长出鳞片、尾巴和触角，最终变成恶龙。 尾随者返回村庄说出了这个秘密。他告诉人们：第一，我们要团结在一起去打败恶龙；第二，我们要警惕每一个英雄，不让他们受财宝吸引而堕落。尾随者受到村民们的拥戴，被称为“导师”，并率领村民再次打败恶龙。在村民们紧密的监视下，参战的英雄们也没有堕落，和平持续了几十年。  \n\n导师去世后，参加最后一战的英雄们开始声称根本没有“英雄堕落”这回事，是导师欺骗了村民。他们囚禁了导师的亲人和朋友，结伙搬去了龙穴居住，并索取村民们的供养。他们把自己身上越来越多的片状物、越来越长的条状物都称作“英雄特色”，并且宣称这种变化是一切人类无可避免的宿命。 日子就这样过去，终有一天，一个绝望的村民无意间发现了导师的坟墓。村民们发掘了墓穴，突然明白英雄们所说的一切都是谎言。因为在那白石的墓穴里，水晶的灵柩间，躺着的并不是恶龙的遗骨，而是一个他们似曾相识的，凡人。  \n\n这就是世上唯一一位没有堕落的英雄的故事。  \n\n\n","source":"_posts/愿你走出半生，归来仍是少年.md","raw":"---\ntitle: 愿你走出半生，归来仍是少年\ndate: 2017-08-17 10:42:38\ntags: 美文\ncategories: 美文\n---\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fimkny1ndyj30ms0e8gpg.jpg)\n\n\n有一条恶龙，每年要求村庄献祭一个处女，每年这个村庄都会有一个少年英雄去与恶龙搏斗，但无人生还。又一个英雄出发时，有人悄悄尾随。龙穴铺满金银财宝，英雄用剑刺死恶龙，然后坐在尸身上，看着闪烁的珠宝，慢慢地长出鳞片、尾巴和触角，最终变成恶龙。 尾随者返回村庄说出了这个秘密。他告诉人们：第一，我们要团结在一起去打败恶龙；第二，我们要警惕每一个英雄，不让他们受财宝吸引而堕落。尾随者受到村民们的拥戴，被称为“导师”，并率领村民再次打败恶龙。在村民们紧密的监视下，参战的英雄们也没有堕落，和平持续了几十年。  \n\n导师去世后，参加最后一战的英雄们开始声称根本没有“英雄堕落”这回事，是导师欺骗了村民。他们囚禁了导师的亲人和朋友，结伙搬去了龙穴居住，并索取村民们的供养。他们把自己身上越来越多的片状物、越来越长的条状物都称作“英雄特色”，并且宣称这种变化是一切人类无可避免的宿命。 日子就这样过去，终有一天，一个绝望的村民无意间发现了导师的坟墓。村民们发掘了墓穴，突然明白英雄们所说的一切都是谎言。因为在那白石的墓穴里，水晶的灵柩间，躺着的并不是恶龙的遗骨，而是一个他们似曾相识的，凡人。  \n\n这就是世上唯一一位没有堕落的英雄的故事。  \n\n\n","slug":"愿你走出半生，归来仍是少年","published":1,"updated":"2017-09-02T13:18:54.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxe0001g10qs1r7to4ym","content":"<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fimkny1ndyj30ms0e8gpg.jpg\" alt=\"\"></p>\n<p>有一条恶龙，每年要求村庄献祭一个处女，每年这个村庄都会有一个少年英雄去与恶龙搏斗，但无人生还。又一个英雄出发时，有人悄悄尾随。龙穴铺满金银财宝，英雄用剑刺死恶龙，然后坐在尸身上，看着闪烁的珠宝，慢慢地长出鳞片、尾巴和触角，最终变成恶龙。 尾随者返回村庄说出了这个秘密。他告诉人们：第一，我们要团结在一起去打败恶龙；第二，我们要警惕每一个英雄，不让他们受财宝吸引而堕落。尾随者受到村民们的拥戴，被称为“导师”，并率领村民再次打败恶龙。在村民们紧密的监视下，参战的英雄们也没有堕落，和平持续了几十年。  </p>\n<p>导师去世后，参加最后一战的英雄们开始声称根本没有“英雄堕落”这回事，是导师欺骗了村民。他们囚禁了导师的亲人和朋友，结伙搬去了龙穴居住，并索取村民们的供养。他们把自己身上越来越多的片状物、越来越长的条状物都称作“英雄特色”，并且宣称这种变化是一切人类无可避免的宿命。 日子就这样过去，终有一天，一个绝望的村民无意间发现了导师的坟墓。村民们发掘了墓穴，突然明白英雄们所说的一切都是谎言。因为在那白石的墓穴里，水晶的灵柩间，躺着的并不是恶龙的遗骨，而是一个他们似曾相识的，凡人。  </p>\n<p>这就是世上唯一一位没有堕落的英雄的故事。  </p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fimkny1ndyj30ms0e8gpg.jpg\" alt=\"\"></p>\n<p>有一条恶龙，每年要求村庄献祭一个处女，每年这个村庄都会有一个少年英雄去与恶龙搏斗，但无人生还。又一个英雄出发时，有人悄悄尾随。龙穴铺满金银财宝，英雄用剑刺死恶龙，然后坐在尸身上，看着闪烁的珠宝，慢慢地长出鳞片、尾巴和触角，最终变成恶龙。 尾随者返回村庄说出了这个秘密。他告诉人们：第一，我们要团结在一起去打败恶龙；第二，我们要警惕每一个英雄，不让他们受财宝吸引而堕落。尾随者受到村民们的拥戴，被称为“导师”，并率领村民再次打败恶龙。在村民们紧密的监视下，参战的英雄们也没有堕落，和平持续了几十年。  </p>\n<p>导师去世后，参加最后一战的英雄们开始声称根本没有“英雄堕落”这回事，是导师欺骗了村民。他们囚禁了导师的亲人和朋友，结伙搬去了龙穴居住，并索取村民们的供养。他们把自己身上越来越多的片状物、越来越长的条状物都称作“英雄特色”，并且宣称这种变化是一切人类无可避免的宿命。 日子就这样过去，终有一天，一个绝望的村民无意间发现了导师的坟墓。村民们发掘了墓穴，突然明白英雄们所说的一切都是谎言。因为在那白石的墓穴里，水晶的灵柩间，躺着的并不是恶龙的遗骨，而是一个他们似曾相识的，凡人。  </p>\n<p>这就是世上唯一一位没有堕落的英雄的故事。  </p>\n"},{"title":"Mysql Date Type","date":"2017-08-29T13:11:53.000Z","_content":"## 该文章是翻译文，源自[Mysql-DateType](https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html)\n\n### 数据类型综述\n\n> #### 数字类型：下列各类型中M代表数字类型的最大值\n    \n![数据类型](http://ww1.sinaimg.cn/large/005Y4715gy1fj0fv7pq4mj30e3086mxd.jpg)\n    \n- ######  如果是由ZEROFILL修饰，表示该数字是UNSIGNED(无符号类型)，否则就是SIGNED类型\n- ######  SERIAL代表 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\n- ######  BIT[(M)]数据类型用于存储bit值，能够存储比特长度范围为1~64。直接返回bit是不可读的，如果要变为可读的，可采用\"+0\"的方式或者用BIN()之类的转换函数， 转换后的值不显示高位0。\n        \n```\nmysql> SELECT b+0, BIN(b+0), OCT(b+0), HEX(b+0) FROM t;\nb+0: 255 10 5\nBIN(b+0): 1111111 1010 101\nOCT(b+0): 377 12 5\nHEX(b+0): FF A 5    \n```\n- ###### TINYINT[(M)] [UNSIGNED] [ZEROFILL]  一个非常小的整形，百位级别 B 级别\n- ###### BOOL, BOOLEAN 相当于TINYINT(1)相当于false，非0数字相当于true。但反过来，false是0，true是1\n- ###### SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 万级别 K级别\n- ###### MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]  一个中等类型的整形数据，百万级别 M级别\n- ###### INT[(M)] [UNSIGNED] [ZEROFILL] 一个普通类型的整形数据十亿级别 G级别\n- ###### INTEGER[(M)] [UNSIGNED] [ZEROFILL]   类似于int\n- ###### BIGINT[(M)] [UNSIGNED] [ZEROFILL]  最大的整形数据百亿亿级别Z级别\n- ###### DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC  M代表总长度，，M的最大长度是65. ，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M D 来的。所有+ - * / 运算都是65位的。例如DECIMAL(5,2) 可存储5位数，其中两位小数，其范围是-999.99~999.99\n- ###### DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL] 他们都类似于DECIMAL  FIXED可以被其他数据库兼容\n- ###### FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\n- ###### DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]  double类似float，最多精确到小数点后15位\n> ### 日期和时间类型\n- ###### DATE 用来显示日期，但不能显示时间，显示日期的区间是'1000-01-01' to '9999-12-31'，允许用String或者number转换为DATE\n- ###### DATETIME 日期和时间的组合，不支持时区范围是'1000-01-01 00:00:00' to '9999-12-31 23:59:59' 允许用字符和数字转换为DATETIME\n- ###### TIMESTAMP 存储从('1970-01-01 00:00:00' UTC)到指定时间的毫秒数，可存储的时间范围是'1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC\n- ###### 用来存储时间，范围是'-838:59:59' to '838:59:59'，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\n- ###### YEAR[(2|4)] 表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是 1901 to 2155\n> ### String类型\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj0nxsqongj30en03r74a.jpg)\n- ###### CHAR CHAR列的长度在创建表格的时候就是固定的了，长度区间是 0 to 255\n- ###### VARCHAR varchar是可变长度用多少，拿多少 长度区间是 0 to 65,535，内容由两部分组成，实际存储的内容以及内容长度。\n- ###### BINARY\n- ###### VARBINARY \n- ###### BLOB \n- ###### TEXT\n- ###### ENUM \n- ###### SET\n\n\n    \n","source":"_posts/Mysql-Date-Type.md","raw":"---\ntitle: Mysql Date Type\ndate: 2017-08-29 21:11:53\ntags: javaWeb\ncategories: javaWeb\n---\n## 该文章是翻译文，源自[Mysql-DateType](https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html)\n\n### 数据类型综述\n\n> #### 数字类型：下列各类型中M代表数字类型的最大值\n    \n![数据类型](http://ww1.sinaimg.cn/large/005Y4715gy1fj0fv7pq4mj30e3086mxd.jpg)\n    \n- ######  如果是由ZEROFILL修饰，表示该数字是UNSIGNED(无符号类型)，否则就是SIGNED类型\n- ######  SERIAL代表 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\n- ######  BIT[(M)]数据类型用于存储bit值，能够存储比特长度范围为1~64。直接返回bit是不可读的，如果要变为可读的，可采用\"+0\"的方式或者用BIN()之类的转换函数， 转换后的值不显示高位0。\n        \n```\nmysql> SELECT b+0, BIN(b+0), OCT(b+0), HEX(b+0) FROM t;\nb+0: 255 10 5\nBIN(b+0): 1111111 1010 101\nOCT(b+0): 377 12 5\nHEX(b+0): FF A 5    \n```\n- ###### TINYINT[(M)] [UNSIGNED] [ZEROFILL]  一个非常小的整形，百位级别 B 级别\n- ###### BOOL, BOOLEAN 相当于TINYINT(1)相当于false，非0数字相当于true。但反过来，false是0，true是1\n- ###### SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 万级别 K级别\n- ###### MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]  一个中等类型的整形数据，百万级别 M级别\n- ###### INT[(M)] [UNSIGNED] [ZEROFILL] 一个普通类型的整形数据十亿级别 G级别\n- ###### INTEGER[(M)] [UNSIGNED] [ZEROFILL]   类似于int\n- ###### BIGINT[(M)] [UNSIGNED] [ZEROFILL]  最大的整形数据百亿亿级别Z级别\n- ###### DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC  M代表总长度，，M的最大长度是65. ，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M D 来的。所有+ - * / 运算都是65位的。例如DECIMAL(5,2) 可存储5位数，其中两位小数，其范围是-999.99~999.99\n- ###### DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL] 他们都类似于DECIMAL  FIXED可以被其他数据库兼容\n- ###### FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\n- ###### DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]  double类似float，最多精确到小数点后15位\n> ### 日期和时间类型\n- ###### DATE 用来显示日期，但不能显示时间，显示日期的区间是'1000-01-01' to '9999-12-31'，允许用String或者number转换为DATE\n- ###### DATETIME 日期和时间的组合，不支持时区范围是'1000-01-01 00:00:00' to '9999-12-31 23:59:59' 允许用字符和数字转换为DATETIME\n- ###### TIMESTAMP 存储从('1970-01-01 00:00:00' UTC)到指定时间的毫秒数，可存储的时间范围是'1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC\n- ###### 用来存储时间，范围是'-838:59:59' to '838:59:59'，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\n- ###### YEAR[(2|4)] 表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是 1901 to 2155\n> ### String类型\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fj0nxsqongj30en03r74a.jpg)\n- ###### CHAR CHAR列的长度在创建表格的时候就是固定的了，长度区间是 0 to 255\n- ###### VARCHAR varchar是可变长度用多少，拿多少 长度区间是 0 to 65,535，内容由两部分组成，实际存储的内容以及内容长度。\n- ###### BINARY\n- ###### VARBINARY \n- ###### BLOB \n- ###### TEXT\n- ###### ENUM \n- ###### SET\n\n\n    \n","slug":"Mysql-Date-Type","published":1,"updated":"2017-09-02T13:18:54.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxe3001i10qs14zmqkbq","content":"<h2 id=\"该文章是翻译文，源自Mysql-DateType\"><a href=\"#该文章是翻译文，源自Mysql-DateType\" class=\"headerlink\" title=\"该文章是翻译文，源自Mysql-DateType\"></a>该文章是翻译文，源自<a href=\"https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html\" target=\"_blank\" rel=\"external\">Mysql-DateType</a></h2><h3 id=\"数据类型综述\"><a href=\"#数据类型综述\" class=\"headerlink\" title=\"数据类型综述\"></a>数据类型综述</h3><blockquote>\n<h4 id=\"数字类型：下列各类型中M代表数字类型的最大值\"><a href=\"#数字类型：下列各类型中M代表数字类型的最大值\" class=\"headerlink\" title=\"数字类型：下列各类型中M代表数字类型的最大值\"></a>数字类型：下列各类型中M代表数字类型的最大值</h4></blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj0fv7pq4mj30e3086mxd.jpg\" alt=\"数据类型\"></p>\n<ul>\n<li><h6 id=\"如果是由ZEROFILL修饰，表示该数字是UNSIGNED-无符号类型-，否则就是SIGNED类型\"><a href=\"#如果是由ZEROFILL修饰，表示该数字是UNSIGNED-无符号类型-，否则就是SIGNED类型\" class=\"headerlink\" title=\"如果是由ZEROFILL修饰，表示该数字是UNSIGNED(无符号类型)，否则就是SIGNED类型\"></a>如果是由ZEROFILL修饰，表示该数字是UNSIGNED(无符号类型)，否则就是SIGNED类型</h6></li>\n<li><h6 id=\"SERIAL代表-BIGINT-UNSIGNED-NOT-NULL-AUTO-INCREMENT-UNIQUE\"><a href=\"#SERIAL代表-BIGINT-UNSIGNED-NOT-NULL-AUTO-INCREMENT-UNIQUE\" class=\"headerlink\" title=\"SERIAL代表 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\"></a>SERIAL代表 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.</h6></li>\n<li><h6 id=\"BIT-M-数据类型用于存储bit值，能够存储比特长度范围为1-64。直接返回bit是不可读的，如果要变为可读的，可采用”-0”的方式或者用BIN-之类的转换函数，-转换后的值不显示高位0。\"><a href=\"#BIT-M-数据类型用于存储bit值，能够存储比特长度范围为1-64。直接返回bit是不可读的，如果要变为可读的，可采用”-0”的方式或者用BIN-之类的转换函数，-转换后的值不显示高位0。\" class=\"headerlink\" title=\"BIT[(M)]数据类型用于存储bit值，能够存储比特长度范围为1~64。直接返回bit是不可读的，如果要变为可读的，可采用”+0”的方式或者用BIN()之类的转换函数， 转换后的值不显示高位0。\"></a>BIT[(M)]数据类型用于存储bit值，能够存储比特长度范围为1~64。直接返回bit是不可读的，如果要变为可读的，可采用”+0”的方式或者用BIN()之类的转换函数， 转换后的值不显示高位0。</h6></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT b+0, BIN(b+0), OCT(b+0), HEX(b+0) FROM t;</div><div class=\"line\">b+0: 255 10 5</div><div class=\"line\">BIN(b+0): 1111111 1010 101</div><div class=\"line\">OCT(b+0): 377 12 5</div><div class=\"line\">HEX(b+0): FF A 5</div></pre></td></tr></table></figure>\n<ul>\n<li><h6 id=\"TINYINT-M-UNSIGNED-ZEROFILL-一个非常小的整形，百位级别-B-级别\"><a href=\"#TINYINT-M-UNSIGNED-ZEROFILL-一个非常小的整形，百位级别-B-级别\" class=\"headerlink\" title=\"TINYINT[(M)] [UNSIGNED] [ZEROFILL]  一个非常小的整形，百位级别 B 级别\"></a>TINYINT[(M)] [UNSIGNED] [ZEROFILL]  一个非常小的整形，百位级别 B 级别</h6></li>\n<li><h6 id=\"BOOL-BOOLEAN-相当于TINYINT-1-相当于false，非0数字相当于true。但反过来，false是0，true是1\"><a href=\"#BOOL-BOOLEAN-相当于TINYINT-1-相当于false，非0数字相当于true。但反过来，false是0，true是1\" class=\"headerlink\" title=\"BOOL, BOOLEAN 相当于TINYINT(1)相当于false，非0数字相当于true。但反过来，false是0，true是1\"></a>BOOL, BOOLEAN 相当于TINYINT(1)相当于false，非0数字相当于true。但反过来，false是0，true是1</h6></li>\n<li><h6 id=\"SMALLINT-M-UNSIGNED-ZEROFILL-万级别-K级别\"><a href=\"#SMALLINT-M-UNSIGNED-ZEROFILL-万级别-K级别\" class=\"headerlink\" title=\"SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 万级别 K级别\"></a>SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 万级别 K级别</h6></li>\n<li><h6 id=\"MEDIUMINT-M-UNSIGNED-ZEROFILL-一个中等类型的整形数据，百万级别-M级别\"><a href=\"#MEDIUMINT-M-UNSIGNED-ZEROFILL-一个中等类型的整形数据，百万级别-M级别\" class=\"headerlink\" title=\"MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]  一个中等类型的整形数据，百万级别 M级别\"></a>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]  一个中等类型的整形数据，百万级别 M级别</h6></li>\n<li><h6 id=\"INT-M-UNSIGNED-ZEROFILL-一个普通类型的整形数据十亿级别-G级别\"><a href=\"#INT-M-UNSIGNED-ZEROFILL-一个普通类型的整形数据十亿级别-G级别\" class=\"headerlink\" title=\"INT[(M)] [UNSIGNED] [ZEROFILL] 一个普通类型的整形数据十亿级别 G级别\"></a>INT[(M)] [UNSIGNED] [ZEROFILL] 一个普通类型的整形数据十亿级别 G级别</h6></li>\n<li><h6 id=\"INTEGER-M-UNSIGNED-ZEROFILL-类似于int\"><a href=\"#INTEGER-M-UNSIGNED-ZEROFILL-类似于int\" class=\"headerlink\" title=\"INTEGER[(M)] [UNSIGNED] [ZEROFILL]   类似于int\"></a>INTEGER[(M)] [UNSIGNED] [ZEROFILL]   类似于int</h6></li>\n<li><h6 id=\"BIGINT-M-UNSIGNED-ZEROFILL-最大的整形数据百亿亿级别Z级别\"><a href=\"#BIGINT-M-UNSIGNED-ZEROFILL-最大的整形数据百亿亿级别Z级别\" class=\"headerlink\" title=\"BIGINT[(M)] [UNSIGNED] [ZEROFILL]  最大的整形数据百亿亿级别Z级别\"></a>BIGINT[(M)] [UNSIGNED] [ZEROFILL]  最大的整形数据百亿亿级别Z级别</h6></li>\n<li><h6 id=\"DECIMAL-M-D-UNSIGNED-ZEROFILL-用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC-M代表总长度，，M的最大长度是65-，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M-D-来的。所有-运算都是65位的。例如DECIMAL-5-2-可存储5位数，其中两位小数，其范围是-999-99-999-99\"><a href=\"#DECIMAL-M-D-UNSIGNED-ZEROFILL-用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC-M代表总长度，，M的最大长度是65-，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M-D-来的。所有-运算都是65位的。例如DECIMAL-5-2-可存储5位数，其中两位小数，其范围是-999-99-999-99\" class=\"headerlink\" title=\"DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC  M代表总长度，，M的最大长度是65. ，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M D 来的。所有+ - * / 运算都是65位的。例如DECIMAL(5,2) 可存储5位数，其中两位小数，其范围是-999.99~999.99\"></a>DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC  M代表总长度，，M的最大长度是65. ，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M D 来的。所有+ - * / 运算都是65位的。例如DECIMAL(5,2) 可存储5位数，其中两位小数，其范围是-999.99~999.99</h6></li>\n<li><h6 id=\"DEC-M-D-UNSIGNED-ZEROFILL-NUMERIC-M-D-UNSIGNED-ZEROFILL-FIXED-M-D-UNSIGNED-ZEROFILL-他们都类似于DECIMAL-FIXED可以被其他数据库兼容\"><a href=\"#DEC-M-D-UNSIGNED-ZEROFILL-NUMERIC-M-D-UNSIGNED-ZEROFILL-FIXED-M-D-UNSIGNED-ZEROFILL-他们都类似于DECIMAL-FIXED可以被其他数据库兼容\" class=\"headerlink\" title=\"DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL] 他们都类似于DECIMAL  FIXED可以被其他数据库兼容\"></a>DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL] 他们都类似于DECIMAL  FIXED可以被其他数据库兼容</h6></li>\n<li><h6 id=\"FLOAT-M-D-UNSIGNED-ZEROFILL-float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\"><a href=\"#FLOAT-M-D-UNSIGNED-ZEROFILL-float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\" class=\"headerlink\" title=\"FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\"></a>FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。</h6></li>\n<li><h6 id=\"DOUBLE-M-D-UNSIGNED-ZEROFILL-double类似float，最多精确到小数点后15位\"><a href=\"#DOUBLE-M-D-UNSIGNED-ZEROFILL-double类似float，最多精确到小数点后15位\" class=\"headerlink\" title=\"DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]  double类似float，最多精确到小数点后15位\"></a>DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]  double类似float，最多精确到小数点后15位</h6><blockquote>\n<h3 id=\"日期和时间类型\"><a href=\"#日期和时间类型\" class=\"headerlink\" title=\"日期和时间类型\"></a>日期和时间类型</h3></blockquote>\n</li>\n<li><h6 id=\"DATE-用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’-to-‘9999-12-31’，允许用String或者number转换为DATE\"><a href=\"#DATE-用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’-to-‘9999-12-31’，允许用String或者number转换为DATE\" class=\"headerlink\" title=\"DATE 用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’ to ‘9999-12-31’，允许用String或者number转换为DATE\"></a>DATE 用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’ to ‘9999-12-31’，允许用String或者number转换为DATE</h6></li>\n<li><h6 id=\"DATETIME-日期和时间的组合，不支持时区范围是’1000-01-01-00-00-00’-to-‘9999-12-31-23-59-59’-允许用字符和数字转换为DATETIME\"><a href=\"#DATETIME-日期和时间的组合，不支持时区范围是’1000-01-01-00-00-00’-to-‘9999-12-31-23-59-59’-允许用字符和数字转换为DATETIME\" class=\"headerlink\" title=\"DATETIME 日期和时间的组合，不支持时区范围是’1000-01-01 00:00:00’ to ‘9999-12-31 23:59:59’ 允许用字符和数字转换为DATETIME\"></a>DATETIME 日期和时间的组合，不支持时区范围是’1000-01-01 00:00:00’ to ‘9999-12-31 23:59:59’ 允许用字符和数字转换为DATETIME</h6></li>\n<li><h6 id=\"TIMESTAMP-存储从-‘1970-01-01-00-00-00’-UTC-到指定时间的毫秒数，可存储的时间范围是’1970-01-01-00-00-01’-UTC-to-‘2038-01-19-03-14-07’-UTC\"><a href=\"#TIMESTAMP-存储从-‘1970-01-01-00-00-00’-UTC-到指定时间的毫秒数，可存储的时间范围是’1970-01-01-00-00-01’-UTC-to-‘2038-01-19-03-14-07’-UTC\" class=\"headerlink\" title=\"TIMESTAMP 存储从(‘1970-01-01 00:00:00’ UTC)到指定时间的毫秒数，可存储的时间范围是’1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTC\"></a>TIMESTAMP 存储从(‘1970-01-01 00:00:00’ UTC)到指定时间的毫秒数，可存储的时间范围是’1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTC</h6></li>\n<li><h6 id=\"用来存储时间，范围是’-838-59-59’-to-‘838-59-59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\"><a href=\"#用来存储时间，范围是’-838-59-59’-to-‘838-59-59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\" class=\"headerlink\" title=\"用来存储时间，范围是’-838:59:59’ to ‘838:59:59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\"></a>用来存储时间，范围是’-838:59:59’ to ‘838:59:59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。</h6></li>\n<li><h6 id=\"YEAR-2-4-表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是-1901-to-2155\"><a href=\"#YEAR-2-4-表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是-1901-to-2155\" class=\"headerlink\" title=\"YEAR[(2|4)] 表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是 1901 to 2155\"></a>YEAR[(2|4)] 表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是 1901 to 2155</h6><blockquote>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3></blockquote>\n</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj0nxsqongj30en03r74a.jpg\" alt=\"\"></p>\n<ul>\n<li><h6 id=\"CHAR-CHAR列的长度在创建表格的时候就是固定的了，长度区间是-0-to-255\"><a href=\"#CHAR-CHAR列的长度在创建表格的时候就是固定的了，长度区间是-0-to-255\" class=\"headerlink\" title=\"CHAR CHAR列的长度在创建表格的时候就是固定的了，长度区间是 0 to 255\"></a>CHAR CHAR列的长度在创建表格的时候就是固定的了，长度区间是 0 to 255</h6></li>\n<li><h6 id=\"VARCHAR-varchar是可变长度用多少，拿多少-长度区间是-0-to-65-535，内容由两部分组成，实际存储的内容以及内容长度。\"><a href=\"#VARCHAR-varchar是可变长度用多少，拿多少-长度区间是-0-to-65-535，内容由两部分组成，实际存储的内容以及内容长度。\" class=\"headerlink\" title=\"VARCHAR varchar是可变长度用多少，拿多少 长度区间是 0 to 65,535，内容由两部分组成，实际存储的内容以及内容长度。\"></a>VARCHAR varchar是可变长度用多少，拿多少 长度区间是 0 to 65,535，内容由两部分组成，实际存储的内容以及内容长度。</h6></li>\n<li><h6 id=\"BINARY\"><a href=\"#BINARY\" class=\"headerlink\" title=\"BINARY\"></a>BINARY</h6></li>\n<li><h6 id=\"VARBINARY\"><a href=\"#VARBINARY\" class=\"headerlink\" title=\"VARBINARY\"></a>VARBINARY</h6></li>\n<li><h6 id=\"BLOB\"><a href=\"#BLOB\" class=\"headerlink\" title=\"BLOB\"></a>BLOB</h6></li>\n<li><h6 id=\"TEXT\"><a href=\"#TEXT\" class=\"headerlink\" title=\"TEXT\"></a>TEXT</h6></li>\n<li><h6 id=\"ENUM\"><a href=\"#ENUM\" class=\"headerlink\" title=\"ENUM\"></a>ENUM</h6></li>\n<li><h6 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h6></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"该文章是翻译文，源自Mysql-DateType\"><a href=\"#该文章是翻译文，源自Mysql-DateType\" class=\"headerlink\" title=\"该文章是翻译文，源自Mysql-DateType\"></a>该文章是翻译文，源自<a href=\"https://dev.mysql.com/doc/refman/5.5/en/numeric-type-overview.html\" target=\"_blank\" rel=\"external\">Mysql-DateType</a></h2><h3 id=\"数据类型综述\"><a href=\"#数据类型综述\" class=\"headerlink\" title=\"数据类型综述\"></a>数据类型综述</h3><blockquote>\n<h4 id=\"数字类型：下列各类型中M代表数字类型的最大值\"><a href=\"#数字类型：下列各类型中M代表数字类型的最大值\" class=\"headerlink\" title=\"数字类型：下列各类型中M代表数字类型的最大值\"></a>数字类型：下列各类型中M代表数字类型的最大值</h4></blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj0fv7pq4mj30e3086mxd.jpg\" alt=\"数据类型\"></p>\n<ul>\n<li><h6 id=\"如果是由ZEROFILL修饰，表示该数字是UNSIGNED-无符号类型-，否则就是SIGNED类型\"><a href=\"#如果是由ZEROFILL修饰，表示该数字是UNSIGNED-无符号类型-，否则就是SIGNED类型\" class=\"headerlink\" title=\"如果是由ZEROFILL修饰，表示该数字是UNSIGNED(无符号类型)，否则就是SIGNED类型\"></a>如果是由ZEROFILL修饰，表示该数字是UNSIGNED(无符号类型)，否则就是SIGNED类型</h6></li>\n<li><h6 id=\"SERIAL代表-BIGINT-UNSIGNED-NOT-NULL-AUTO-INCREMENT-UNIQUE\"><a href=\"#SERIAL代表-BIGINT-UNSIGNED-NOT-NULL-AUTO-INCREMENT-UNIQUE\" class=\"headerlink\" title=\"SERIAL代表 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.\"></a>SERIAL代表 BIGINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE.</h6></li>\n<li><h6 id=\"BIT-M-数据类型用于存储bit值，能够存储比特长度范围为1-64。直接返回bit是不可读的，如果要变为可读的，可采用”-0”的方式或者用BIN-之类的转换函数，-转换后的值不显示高位0。\"><a href=\"#BIT-M-数据类型用于存储bit值，能够存储比特长度范围为1-64。直接返回bit是不可读的，如果要变为可读的，可采用”-0”的方式或者用BIN-之类的转换函数，-转换后的值不显示高位0。\" class=\"headerlink\" title=\"BIT[(M)]数据类型用于存储bit值，能够存储比特长度范围为1~64。直接返回bit是不可读的，如果要变为可读的，可采用”+0”的方式或者用BIN()之类的转换函数， 转换后的值不显示高位0。\"></a>BIT[(M)]数据类型用于存储bit值，能够存储比特长度范围为1~64。直接返回bit是不可读的，如果要变为可读的，可采用”+0”的方式或者用BIN()之类的转换函数， 转换后的值不显示高位0。</h6></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql&gt; SELECT b+0, BIN(b+0), OCT(b+0), HEX(b+0) FROM t;</div><div class=\"line\">b+0: 255 10 5</div><div class=\"line\">BIN(b+0): 1111111 1010 101</div><div class=\"line\">OCT(b+0): 377 12 5</div><div class=\"line\">HEX(b+0): FF A 5</div></pre></td></tr></table></figure>\n<ul>\n<li><h6 id=\"TINYINT-M-UNSIGNED-ZEROFILL-一个非常小的整形，百位级别-B-级别\"><a href=\"#TINYINT-M-UNSIGNED-ZEROFILL-一个非常小的整形，百位级别-B-级别\" class=\"headerlink\" title=\"TINYINT[(M)] [UNSIGNED] [ZEROFILL]  一个非常小的整形，百位级别 B 级别\"></a>TINYINT[(M)] [UNSIGNED] [ZEROFILL]  一个非常小的整形，百位级别 B 级别</h6></li>\n<li><h6 id=\"BOOL-BOOLEAN-相当于TINYINT-1-相当于false，非0数字相当于true。但反过来，false是0，true是1\"><a href=\"#BOOL-BOOLEAN-相当于TINYINT-1-相当于false，非0数字相当于true。但反过来，false是0，true是1\" class=\"headerlink\" title=\"BOOL, BOOLEAN 相当于TINYINT(1)相当于false，非0数字相当于true。但反过来，false是0，true是1\"></a>BOOL, BOOLEAN 相当于TINYINT(1)相当于false，非0数字相当于true。但反过来，false是0，true是1</h6></li>\n<li><h6 id=\"SMALLINT-M-UNSIGNED-ZEROFILL-万级别-K级别\"><a href=\"#SMALLINT-M-UNSIGNED-ZEROFILL-万级别-K级别\" class=\"headerlink\" title=\"SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 万级别 K级别\"></a>SMALLINT[(M)] [UNSIGNED] [ZEROFILL] 万级别 K级别</h6></li>\n<li><h6 id=\"MEDIUMINT-M-UNSIGNED-ZEROFILL-一个中等类型的整形数据，百万级别-M级别\"><a href=\"#MEDIUMINT-M-UNSIGNED-ZEROFILL-一个中等类型的整形数据，百万级别-M级别\" class=\"headerlink\" title=\"MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]  一个中等类型的整形数据，百万级别 M级别\"></a>MEDIUMINT[(M)] [UNSIGNED] [ZEROFILL]  一个中等类型的整形数据，百万级别 M级别</h6></li>\n<li><h6 id=\"INT-M-UNSIGNED-ZEROFILL-一个普通类型的整形数据十亿级别-G级别\"><a href=\"#INT-M-UNSIGNED-ZEROFILL-一个普通类型的整形数据十亿级别-G级别\" class=\"headerlink\" title=\"INT[(M)] [UNSIGNED] [ZEROFILL] 一个普通类型的整形数据十亿级别 G级别\"></a>INT[(M)] [UNSIGNED] [ZEROFILL] 一个普通类型的整形数据十亿级别 G级别</h6></li>\n<li><h6 id=\"INTEGER-M-UNSIGNED-ZEROFILL-类似于int\"><a href=\"#INTEGER-M-UNSIGNED-ZEROFILL-类似于int\" class=\"headerlink\" title=\"INTEGER[(M)] [UNSIGNED] [ZEROFILL]   类似于int\"></a>INTEGER[(M)] [UNSIGNED] [ZEROFILL]   类似于int</h6></li>\n<li><h6 id=\"BIGINT-M-UNSIGNED-ZEROFILL-最大的整形数据百亿亿级别Z级别\"><a href=\"#BIGINT-M-UNSIGNED-ZEROFILL-最大的整形数据百亿亿级别Z级别\" class=\"headerlink\" title=\"BIGINT[(M)] [UNSIGNED] [ZEROFILL]  最大的整形数据百亿亿级别Z级别\"></a>BIGINT[(M)] [UNSIGNED] [ZEROFILL]  最大的整形数据百亿亿级别Z级别</h6></li>\n<li><h6 id=\"DECIMAL-M-D-UNSIGNED-ZEROFILL-用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC-M代表总长度，，M的最大长度是65-，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M-D-来的。所有-运算都是65位的。例如DECIMAL-5-2-可存储5位数，其中两位小数，其范围是-999-99-999-99\"><a href=\"#DECIMAL-M-D-UNSIGNED-ZEROFILL-用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC-M代表总长度，，M的最大长度是65-，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M-D-来的。所有-运算都是65位的。例如DECIMAL-5-2-可存储5位数，其中两位小数，其范围是-999-99-999-99\" class=\"headerlink\" title=\"DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC  M代表总长度，，M的最大长度是65. ，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M D 来的。所有+ - * / 运算都是65位的。例如DECIMAL(5,2) 可存储5位数，其中两位小数，其范围是-999.99~999.99\"></a>DECIMAL[(M[,D])] [UNSIGNED] [ZEROFILL] 用来存储精确数据，在货币存储中用的比较多。DECIMAL继承NUMERIC  M代表总长度，，M的最大长度是65. ，表示最大存储65位的数据。D代表小数点后的位数，D的默认值是0，M的默认值是10DECIMAL。实际存储的是按照M D 来的。所有+ - * / 运算都是65位的。例如DECIMAL(5,2) 可存储5位数，其中两位小数，其范围是-999.99~999.99</h6></li>\n<li><h6 id=\"DEC-M-D-UNSIGNED-ZEROFILL-NUMERIC-M-D-UNSIGNED-ZEROFILL-FIXED-M-D-UNSIGNED-ZEROFILL-他们都类似于DECIMAL-FIXED可以被其他数据库兼容\"><a href=\"#DEC-M-D-UNSIGNED-ZEROFILL-NUMERIC-M-D-UNSIGNED-ZEROFILL-FIXED-M-D-UNSIGNED-ZEROFILL-他们都类似于DECIMAL-FIXED可以被其他数据库兼容\" class=\"headerlink\" title=\"DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL] 他们都类似于DECIMAL  FIXED可以被其他数据库兼容\"></a>DEC[(M[,D])] [UNSIGNED] [ZEROFILL], NUMERIC[(M[,D])] [UNSIGNED] [ZEROFILL], FIXED[(M[,D])] [UNSIGNED] [ZEROFILL] 他们都类似于DECIMAL  FIXED可以被其他数据库兼容</h6></li>\n<li><h6 id=\"FLOAT-M-D-UNSIGNED-ZEROFILL-float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\"><a href=\"#FLOAT-M-D-UNSIGNED-ZEROFILL-float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\" class=\"headerlink\" title=\"FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。\"></a>FLOAT[(M,D)] [UNSIGNED] [ZEROFILL] float存储的是非精确的值，M代表数据长度，D代表小数位位数，最多精确到小数点后7位。</h6></li>\n<li><h6 id=\"DOUBLE-M-D-UNSIGNED-ZEROFILL-double类似float，最多精确到小数点后15位\"><a href=\"#DOUBLE-M-D-UNSIGNED-ZEROFILL-double类似float，最多精确到小数点后15位\" class=\"headerlink\" title=\"DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]  double类似float，最多精确到小数点后15位\"></a>DOUBLE[(M,D)] [UNSIGNED] [ZEROFILL]  double类似float，最多精确到小数点后15位</h6><blockquote>\n<h3 id=\"日期和时间类型\"><a href=\"#日期和时间类型\" class=\"headerlink\" title=\"日期和时间类型\"></a>日期和时间类型</h3></blockquote>\n</li>\n<li><h6 id=\"DATE-用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’-to-‘9999-12-31’，允许用String或者number转换为DATE\"><a href=\"#DATE-用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’-to-‘9999-12-31’，允许用String或者number转换为DATE\" class=\"headerlink\" title=\"DATE 用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’ to ‘9999-12-31’，允许用String或者number转换为DATE\"></a>DATE 用来显示日期，但不能显示时间，显示日期的区间是’1000-01-01’ to ‘9999-12-31’，允许用String或者number转换为DATE</h6></li>\n<li><h6 id=\"DATETIME-日期和时间的组合，不支持时区范围是’1000-01-01-00-00-00’-to-‘9999-12-31-23-59-59’-允许用字符和数字转换为DATETIME\"><a href=\"#DATETIME-日期和时间的组合，不支持时区范围是’1000-01-01-00-00-00’-to-‘9999-12-31-23-59-59’-允许用字符和数字转换为DATETIME\" class=\"headerlink\" title=\"DATETIME 日期和时间的组合，不支持时区范围是’1000-01-01 00:00:00’ to ‘9999-12-31 23:59:59’ 允许用字符和数字转换为DATETIME\"></a>DATETIME 日期和时间的组合，不支持时区范围是’1000-01-01 00:00:00’ to ‘9999-12-31 23:59:59’ 允许用字符和数字转换为DATETIME</h6></li>\n<li><h6 id=\"TIMESTAMP-存储从-‘1970-01-01-00-00-00’-UTC-到指定时间的毫秒数，可存储的时间范围是’1970-01-01-00-00-01’-UTC-to-‘2038-01-19-03-14-07’-UTC\"><a href=\"#TIMESTAMP-存储从-‘1970-01-01-00-00-00’-UTC-到指定时间的毫秒数，可存储的时间范围是’1970-01-01-00-00-01’-UTC-to-‘2038-01-19-03-14-07’-UTC\" class=\"headerlink\" title=\"TIMESTAMP 存储从(‘1970-01-01 00:00:00’ UTC)到指定时间的毫秒数，可存储的时间范围是’1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTC\"></a>TIMESTAMP 存储从(‘1970-01-01 00:00:00’ UTC)到指定时间的毫秒数，可存储的时间范围是’1970-01-01 00:00:01’ UTC to ‘2038-01-19 03:14:07’ UTC</h6></li>\n<li><h6 id=\"用来存储时间，范围是’-838-59-59’-to-‘838-59-59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\"><a href=\"#用来存储时间，范围是’-838-59-59’-to-‘838-59-59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\" class=\"headerlink\" title=\"用来存储时间，范围是’-838:59:59’ to ‘838:59:59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。\"></a>用来存储时间，范围是’-838:59:59’ to ‘838:59:59’，一天的范围最多24小时，但是如果要计算两个时间点的距离的时候可能就需要更大的时间了。</h6></li>\n<li><h6 id=\"YEAR-2-4-表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是-1901-to-2155\"><a href=\"#YEAR-2-4-表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是-1901-to-2155\" class=\"headerlink\" title=\"YEAR[(2|4)] 表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是 1901 to 2155\"></a>YEAR[(2|4)] 表示年的方式有两种，一种是2位数字，一种是4位数字。其意义是一样的。能表示的范围是 1901 to 2155</h6><blockquote>\n<h3 id=\"String类型\"><a href=\"#String类型\" class=\"headerlink\" title=\"String类型\"></a>String类型</h3></blockquote>\n</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fj0nxsqongj30en03r74a.jpg\" alt=\"\"></p>\n<ul>\n<li><h6 id=\"CHAR-CHAR列的长度在创建表格的时候就是固定的了，长度区间是-0-to-255\"><a href=\"#CHAR-CHAR列的长度在创建表格的时候就是固定的了，长度区间是-0-to-255\" class=\"headerlink\" title=\"CHAR CHAR列的长度在创建表格的时候就是固定的了，长度区间是 0 to 255\"></a>CHAR CHAR列的长度在创建表格的时候就是固定的了，长度区间是 0 to 255</h6></li>\n<li><h6 id=\"VARCHAR-varchar是可变长度用多少，拿多少-长度区间是-0-to-65-535，内容由两部分组成，实际存储的内容以及内容长度。\"><a href=\"#VARCHAR-varchar是可变长度用多少，拿多少-长度区间是-0-to-65-535，内容由两部分组成，实际存储的内容以及内容长度。\" class=\"headerlink\" title=\"VARCHAR varchar是可变长度用多少，拿多少 长度区间是 0 to 65,535，内容由两部分组成，实际存储的内容以及内容长度。\"></a>VARCHAR varchar是可变长度用多少，拿多少 长度区间是 0 to 65,535，内容由两部分组成，实际存储的内容以及内容长度。</h6></li>\n<li><h6 id=\"BINARY\"><a href=\"#BINARY\" class=\"headerlink\" title=\"BINARY\"></a>BINARY</h6></li>\n<li><h6 id=\"VARBINARY\"><a href=\"#VARBINARY\" class=\"headerlink\" title=\"VARBINARY\"></a>VARBINARY</h6></li>\n<li><h6 id=\"BLOB\"><a href=\"#BLOB\" class=\"headerlink\" title=\"BLOB\"></a>BLOB</h6></li>\n<li><h6 id=\"TEXT\"><a href=\"#TEXT\" class=\"headerlink\" title=\"TEXT\"></a>TEXT</h6></li>\n<li><h6 id=\"ENUM\"><a href=\"#ENUM\" class=\"headerlink\" title=\"ENUM\"></a>ENUM</h6></li>\n<li><h6 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h6></li>\n</ul>\n"},{"title":"Hexo部署指南","date":"2017-08-17T18:08:41.000Z","_content":"## Hexo 对于我的意义\n- 我对自己的评价是善于总结分析，不善于记忆，更别提表达，很多事情心里大概清楚要怎么做，但是在做的时候实际可能卡在一个需要记忆的地方然后就动弹不得了，所以我需要一款能够将我做过的事记忆起来的工具，帮我保存我的理解，以便随时翻看  \n- 我是一个急性子的人，对于一件事情，希望是越快完成越好，越是重要的事情，越着急，心里一急，对于资料的阅读情不自禁的采用扫读的模式。这样的行为会让效率下贱，增加挫败感，进而产生畏惧的心理。对于一个我不是很了解的东西，需要慢慢沉淀，记录是一种十分有效的方式。\n- 任何困难的事情，都会因量变积累产生质变，最终困难的事情将会被解决。其中有两个关键词：量变，积累。量变是时间的堆砌，积累是对事情的反思总结化作经验的累计。两者缺一不可。如果仅有时间的堆积，精力的支出，而经验积累不到位，或者总是总结，却不花时间去积累实践，也是不会有效果的。Hexo，便是我的积累。\n- 我个人感觉我的基因还是挺好的，各方面都有兴趣，各方面天赋也还好，但是属于广而杂的类型，我需要将我各方面的优势拧成一根绳子，增加个人的生活品质，或者说是活得更快乐一点，方不辜负我老爸老妈给我留下的这么优秀的基因，而且还要更好的遗传下去。\n\n## 我的hexo运行环境\n- Git\n    - git version 2.14.1.windows.1\n- Node-js\n    - node  version 6.11.2\n    - npm   version 3.10.10\n-  hexo\n    - hexo: 3.3.8\n    - hexo-cli: 1.0.3\n\n## 环境的准备\n- [nodejs下载页面](https://nodejs.org/en/)\n- [git 下载页面](https://git-scm.com/)\n- [hexo文档](https://hexo.io/zh-cn/docs/)  \n###### 下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对...\n\n## 项目搭建  \n\n- GitHub pagge的配置。\n> 用Github配置有一个好处是，我们无需购买服务器了，gitub为我么提供了（大企业范~）。当然这个是有限制的。如果要享受GitHub提供的免费服务器，需要将项目完全公开，所以任何人都能对我现在部署的项目进行操作。如果希望项目私有化，那就得给钱给他。所以很多人会买个域名，因为域名可以隐藏项目信息，让人不那么容易找到放在GitHub上的项目\n\n> 首先需要在GitHub上注册一个账号。仅仅需要用到邮箱（QQ邮箱也行），密码（大小写都要有）注册还是很方便的。 注册，邮箱激活，登录后到如下界面，点击如图的新建按钮\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin7xe1iwoj30va0e4mye.jpg)\n> 在框框里面输入项目名 格式：GitHub用户名+github.io\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin7z7wodoj30u80jn3zw.jpg)\n> 点击Create responsitory 完成GitHub page的创建\n\n- ssh的配置\n> ssh是用来做免密登录的，整个配置过程就是做四件事情：设置Git的默认邮箱，设置Git的默认用户名（我设置的用户名跟我的GitHub登录的用户名一致，是否可以不一致有时间再验证），生成秘钥对，将公钥放到GitHub里面去，验证。\n> - 设置Git的默认用户名及邮箱\n\n```\ngit config --global user.name \"youname\"\ngit config --global user.email \"youeamil@email.com\"\n```\n\n> - 生成密钥的过程 \n>1. 查看密钥是否存在\n    \n```\ncd ~/.ssh\n```\n>2. 如果有密钥了删除没有则生成\n\n```\n ssh-keygen -t rsa -C “287329409@qq.com”\n```\n> 一直按回车，四下\n\n> - 将公钥丢到GitHub上去\n\n> 1. 点击setting\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8m2wewqj30vx0jkabo.jpg)\n\n> 2. 点击SSH\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8pbsy1mj30yx0mn76f.jpg)\n\n> 3. New SSH key\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8qt6qlhj30wr0gcdhq.jpg)\n\n> 4. title随便填，key填写公钥（id_rsa.pub）里面的全部内容\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8s0lvvej318g0o4427.jpg)\n\n> - 验证\n\n```\n ssh -T git@github.com\n```\n> ![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8w17pe9j30fq03nglm.jpg)\n\n> 如果不是这样的，ssh重新来过\n\n## Hexo项目的生成\n> - 安装Hexo  [Hexo参数](https://hexo.io/zh-cn/docs/configuration.html)\n\n```\nnpm install -g hexo-cli\n```\n> Hexo目录结构\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin94lrgrwj30ik07igm3.jpg)\n\n> 编译\n\n```\nhexo g\n```\n> 本地启动,启动后可以在浏览器输入localhost:4000访问\n\n```\nhexo s\n```\n> 部署到gitub page 部署成功后可以访问 例如我的,https://wilnd.github.io\n\n```\nhexo d\n```\n\n## hexo写作\n> - 新建文章 [hexo写作](https://hexo.io/zh-cn/docs/writing.html)\n\n```\nhexo new post/page/draft <title>\n```\n>  - - post 这个操作会在source/_post目录下生成一个名为titel 的MarkDowm文件，是用来写文章的\n>  - - page 这个操作会在source目录下生成一个MarkDowm文件，是用来生成大目录的，例如 我的界面的标签功能和目录功能都是通过这个方式来生成的\n","source":"_posts/Hexo部署指南.md","raw":"---\ntitle: Hexo部署指南\ndate: 2017-08-18 02:08:41\ntags: 博客搭建\ncategories: 博客搭建\n---\n## Hexo 对于我的意义\n- 我对自己的评价是善于总结分析，不善于记忆，更别提表达，很多事情心里大概清楚要怎么做，但是在做的时候实际可能卡在一个需要记忆的地方然后就动弹不得了，所以我需要一款能够将我做过的事记忆起来的工具，帮我保存我的理解，以便随时翻看  \n- 我是一个急性子的人，对于一件事情，希望是越快完成越好，越是重要的事情，越着急，心里一急，对于资料的阅读情不自禁的采用扫读的模式。这样的行为会让效率下贱，增加挫败感，进而产生畏惧的心理。对于一个我不是很了解的东西，需要慢慢沉淀，记录是一种十分有效的方式。\n- 任何困难的事情，都会因量变积累产生质变，最终困难的事情将会被解决。其中有两个关键词：量变，积累。量变是时间的堆砌，积累是对事情的反思总结化作经验的累计。两者缺一不可。如果仅有时间的堆积，精力的支出，而经验积累不到位，或者总是总结，却不花时间去积累实践，也是不会有效果的。Hexo，便是我的积累。\n- 我个人感觉我的基因还是挺好的，各方面都有兴趣，各方面天赋也还好，但是属于广而杂的类型，我需要将我各方面的优势拧成一根绳子，增加个人的生活品质，或者说是活得更快乐一点，方不辜负我老爸老妈给我留下的这么优秀的基因，而且还要更好的遗传下去。\n\n## 我的hexo运行环境\n- Git\n    - git version 2.14.1.windows.1\n- Node-js\n    - node  version 6.11.2\n    - npm   version 3.10.10\n-  hexo\n    - hexo: 3.3.8\n    - hexo-cli: 1.0.3\n\n## 环境的准备\n- [nodejs下载页面](https://nodejs.org/en/)\n- [git 下载页面](https://git-scm.com/)\n- [hexo文档](https://hexo.io/zh-cn/docs/)  \n###### 下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对...\n\n## 项目搭建  \n\n- GitHub pagge的配置。\n> 用Github配置有一个好处是，我们无需购买服务器了，gitub为我么提供了（大企业范~）。当然这个是有限制的。如果要享受GitHub提供的免费服务器，需要将项目完全公开，所以任何人都能对我现在部署的项目进行操作。如果希望项目私有化，那就得给钱给他。所以很多人会买个域名，因为域名可以隐藏项目信息，让人不那么容易找到放在GitHub上的项目\n\n> 首先需要在GitHub上注册一个账号。仅仅需要用到邮箱（QQ邮箱也行），密码（大小写都要有）注册还是很方便的。 注册，邮箱激活，登录后到如下界面，点击如图的新建按钮\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin7xe1iwoj30va0e4mye.jpg)\n> 在框框里面输入项目名 格式：GitHub用户名+github.io\n\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin7z7wodoj30u80jn3zw.jpg)\n> 点击Create responsitory 完成GitHub page的创建\n\n- ssh的配置\n> ssh是用来做免密登录的，整个配置过程就是做四件事情：设置Git的默认邮箱，设置Git的默认用户名（我设置的用户名跟我的GitHub登录的用户名一致，是否可以不一致有时间再验证），生成秘钥对，将公钥放到GitHub里面去，验证。\n> - 设置Git的默认用户名及邮箱\n\n```\ngit config --global user.name \"youname\"\ngit config --global user.email \"youeamil@email.com\"\n```\n\n> - 生成密钥的过程 \n>1. 查看密钥是否存在\n    \n```\ncd ~/.ssh\n```\n>2. 如果有密钥了删除没有则生成\n\n```\n ssh-keygen -t rsa -C “287329409@qq.com”\n```\n> 一直按回车，四下\n\n> - 将公钥丢到GitHub上去\n\n> 1. 点击setting\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8m2wewqj30vx0jkabo.jpg)\n\n> 2. 点击SSH\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8pbsy1mj30yx0mn76f.jpg)\n\n> 3. New SSH key\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8qt6qlhj30wr0gcdhq.jpg)\n\n> 4. title随便填，key填写公钥（id_rsa.pub）里面的全部内容\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8s0lvvej318g0o4427.jpg)\n\n> - 验证\n\n```\n ssh -T git@github.com\n```\n> ![](http://ww1.sinaimg.cn/large/005Y4715gy1fin8w17pe9j30fq03nglm.jpg)\n\n> 如果不是这样的，ssh重新来过\n\n## Hexo项目的生成\n> - 安装Hexo  [Hexo参数](https://hexo.io/zh-cn/docs/configuration.html)\n\n```\nnpm install -g hexo-cli\n```\n> Hexo目录结构\n![](http://ww1.sinaimg.cn/large/005Y4715gy1fin94lrgrwj30ik07igm3.jpg)\n\n> 编译\n\n```\nhexo g\n```\n> 本地启动,启动后可以在浏览器输入localhost:4000访问\n\n```\nhexo s\n```\n> 部署到gitub page 部署成功后可以访问 例如我的,https://wilnd.github.io\n\n```\nhexo d\n```\n\n## hexo写作\n> - 新建文章 [hexo写作](https://hexo.io/zh-cn/docs/writing.html)\n\n```\nhexo new post/page/draft <title>\n```\n>  - - post 这个操作会在source/_post目录下生成一个名为titel 的MarkDowm文件，是用来写文章的\n>  - - page 这个操作会在source目录下生成一个MarkDowm文件，是用来生成大目录的，例如 我的界面的标签功能和目录功能都是通过这个方式来生成的\n","slug":"Hexo部署指南","published":1,"updated":"2017-09-02T13:18:54.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8n0lxe5001m10qs5v0b3zmw","content":"<h2 id=\"Hexo-对于我的意义\"><a href=\"#Hexo-对于我的意义\" class=\"headerlink\" title=\"Hexo 对于我的意义\"></a>Hexo 对于我的意义</h2><ul>\n<li>我对自己的评价是善于总结分析，不善于记忆，更别提表达，很多事情心里大概清楚要怎么做，但是在做的时候实际可能卡在一个需要记忆的地方然后就动弹不得了，所以我需要一款能够将我做过的事记忆起来的工具，帮我保存我的理解，以便随时翻看  </li>\n<li>我是一个急性子的人，对于一件事情，希望是越快完成越好，越是重要的事情，越着急，心里一急，对于资料的阅读情不自禁的采用扫读的模式。这样的行为会让效率下贱，增加挫败感，进而产生畏惧的心理。对于一个我不是很了解的东西，需要慢慢沉淀，记录是一种十分有效的方式。</li>\n<li>任何困难的事情，都会因量变积累产生质变，最终困难的事情将会被解决。其中有两个关键词：量变，积累。量变是时间的堆砌，积累是对事情的反思总结化作经验的累计。两者缺一不可。如果仅有时间的堆积，精力的支出，而经验积累不到位，或者总是总结，却不花时间去积累实践，也是不会有效果的。Hexo，便是我的积累。</li>\n<li>我个人感觉我的基因还是挺好的，各方面都有兴趣，各方面天赋也还好，但是属于广而杂的类型，我需要将我各方面的优势拧成一根绳子，增加个人的生活品质，或者说是活得更快乐一点，方不辜负我老爸老妈给我留下的这么优秀的基因，而且还要更好的遗传下去。</li>\n</ul>\n<h2 id=\"我的hexo运行环境\"><a href=\"#我的hexo运行环境\" class=\"headerlink\" title=\"我的hexo运行环境\"></a>我的hexo运行环境</h2><ul>\n<li>Git<ul>\n<li>git version 2.14.1.windows.1</li>\n</ul>\n</li>\n<li>Node-js<ul>\n<li>node  version 6.11.2</li>\n<li>npm   version 3.10.10</li>\n</ul>\n</li>\n<li>hexo<ul>\n<li>hexo: 3.3.8</li>\n<li>hexo-cli: 1.0.3</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"环境的准备\"><a href=\"#环境的准备\" class=\"headerlink\" title=\"环境的准备\"></a>环境的准备</h2><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">nodejs下载页面</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">git 下载页面</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">hexo文档</a>  <h6 id=\"下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…\"><a href=\"#下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…\" class=\"headerlink\" title=\"下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…\"></a>下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…</h6></li>\n</ul>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><ul>\n<li>GitHub pagge的配置。<blockquote>\n<p>用Github配置有一个好处是，我们无需购买服务器了，gitub为我么提供了（大企业范~）。当然这个是有限制的。如果要享受GitHub提供的免费服务器，需要将项目完全公开，所以任何人都能对我现在部署的项目进行操作。如果希望项目私有化，那就得给钱给他。所以很多人会买个域名，因为域名可以隐藏项目信息，让人不那么容易找到放在GitHub上的项目</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>首先需要在GitHub上注册一个账号。仅仅需要用到邮箱（QQ邮箱也行），密码（大小写都要有）注册还是很方便的。 注册，邮箱激活，登录后到如下界面，点击如图的新建按钮</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin7xe1iwoj30va0e4mye.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在框框里面输入项目名 格式：GitHub用户名+github.io</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin7z7wodoj30u80jn3zw.jpg\" alt=\"\"></p>\n<blockquote>\n<p>点击Create responsitory 完成GitHub page的创建</p>\n</blockquote>\n<ul>\n<li>ssh的配置<blockquote>\n<p>ssh是用来做免密登录的，整个配置过程就是做四件事情：设置Git的默认邮箱，设置Git的默认用户名（我设置的用户名跟我的GitHub登录的用户名一致，是否可以不一致有时间再验证），生成秘钥对，将公钥放到GitHub里面去，验证。</p>\n<ul>\n<li>设置Git的默认用户名及邮箱</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;youname&quot;</div><div class=\"line\">git config --global user.email &quot;youeamil@email.com&quot;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>生成密钥的过程 </li>\n</ul>\n<ol>\n<li>查看密钥是否存在</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.ssh</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>如果有密钥了删除没有则生成</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C “287329409@qq.com”</div></pre></td></tr></table></figure>\n<blockquote>\n<p>一直按回车，四下</p>\n<ul>\n<li>将公钥丢到GitHub上去</li>\n</ul>\n<ol>\n<li><p>点击setting<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8m2wewqj30vx0jkabo.jpg\" alt=\"\"></p>\n</li>\n<li><p>点击SSH<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8pbsy1mj30yx0mn76f.jpg\" alt=\"\"></p>\n</li>\n<li><p>New SSH key<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8qt6qlhj30wr0gcdhq.jpg\" alt=\"\"></p>\n</li>\n<li><p>title随便填，key填写公钥（id_rsa.pub）里面的全部内容<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8s0lvvej318g0o4427.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<ul>\n<li>验证</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8w17pe9j30fq03nglm.jpg\" alt=\"\"></p>\n<p>如果不是这样的，ssh重新来过</p>\n</blockquote>\n<h2 id=\"Hexo项目的生成\"><a href=\"#Hexo项目的生成\" class=\"headerlink\" title=\"Hexo项目的生成\"></a>Hexo项目的生成</h2><blockquote>\n<ul>\n<li>安装Hexo  <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">Hexo参数</a></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Hexo目录结构<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin94lrgrwj30ik07igm3.jpg\" alt=\"\"></p>\n<p>编译</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>本地启动,启动后可以在浏览器输入localhost:4000访问</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<blockquote>\n<p>部署到gitub page 部署成功后可以访问 例如我的,<a href=\"https://wilnd.github.io\" target=\"_blank\" rel=\"external\">https://wilnd.github.io</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<h2 id=\"hexo写作\"><a href=\"#hexo写作\" class=\"headerlink\" title=\"hexo写作\"></a>hexo写作</h2><blockquote>\n<ul>\n<li>新建文章 <a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"external\">hexo写作</a></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new post/page/draft &lt;title&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><ul>\n<li>post 这个操作会在source/_post目录下生成一个名为titel 的MarkDowm文件，是用来写文章的</li>\n</ul>\n</li>\n<li><ul>\n<li>page 这个操作会在source目录下生成一个MarkDowm文件，是用来生成大目录的，例如 我的界面的标签功能和目录功能都是通过这个方式来生成的</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Hexo-对于我的意义\"><a href=\"#Hexo-对于我的意义\" class=\"headerlink\" title=\"Hexo 对于我的意义\"></a>Hexo 对于我的意义</h2><ul>\n<li>我对自己的评价是善于总结分析，不善于记忆，更别提表达，很多事情心里大概清楚要怎么做，但是在做的时候实际可能卡在一个需要记忆的地方然后就动弹不得了，所以我需要一款能够将我做过的事记忆起来的工具，帮我保存我的理解，以便随时翻看  </li>\n<li>我是一个急性子的人，对于一件事情，希望是越快完成越好，越是重要的事情，越着急，心里一急，对于资料的阅读情不自禁的采用扫读的模式。这样的行为会让效率下贱，增加挫败感，进而产生畏惧的心理。对于一个我不是很了解的东西，需要慢慢沉淀，记录是一种十分有效的方式。</li>\n<li>任何困难的事情，都会因量变积累产生质变，最终困难的事情将会被解决。其中有两个关键词：量变，积累。量变是时间的堆砌，积累是对事情的反思总结化作经验的累计。两者缺一不可。如果仅有时间的堆积，精力的支出，而经验积累不到位，或者总是总结，却不花时间去积累实践，也是不会有效果的。Hexo，便是我的积累。</li>\n<li>我个人感觉我的基因还是挺好的，各方面都有兴趣，各方面天赋也还好，但是属于广而杂的类型，我需要将我各方面的优势拧成一根绳子，增加个人的生活品质，或者说是活得更快乐一点，方不辜负我老爸老妈给我留下的这么优秀的基因，而且还要更好的遗传下去。</li>\n</ul>\n<h2 id=\"我的hexo运行环境\"><a href=\"#我的hexo运行环境\" class=\"headerlink\" title=\"我的hexo运行环境\"></a>我的hexo运行环境</h2><ul>\n<li>Git<ul>\n<li>git version 2.14.1.windows.1</li>\n</ul>\n</li>\n<li>Node-js<ul>\n<li>node  version 6.11.2</li>\n<li>npm   version 3.10.10</li>\n</ul>\n</li>\n<li>hexo<ul>\n<li>hexo: 3.3.8</li>\n<li>hexo-cli: 1.0.3</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"环境的准备\"><a href=\"#环境的准备\" class=\"headerlink\" title=\"环境的准备\"></a>环境的准备</h2><ul>\n<li><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">nodejs下载页面</a></li>\n<li><a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">git 下载页面</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">hexo文档</a>  <h6 id=\"下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…\"><a href=\"#下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…\" class=\"headerlink\" title=\"下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…\"></a>下载这些东西可能会比较慢，如果感觉下载的比较慢有两种处理方式。找国内镜像，翻墙。后面我会做一个翻墙的教程出来，傻瓜式教学，包学会。其实也很简单的，主要是路子要对…</h6></li>\n</ul>\n<h2 id=\"项目搭建\"><a href=\"#项目搭建\" class=\"headerlink\" title=\"项目搭建\"></a>项目搭建</h2><ul>\n<li>GitHub pagge的配置。<blockquote>\n<p>用Github配置有一个好处是，我们无需购买服务器了，gitub为我么提供了（大企业范~）。当然这个是有限制的。如果要享受GitHub提供的免费服务器，需要将项目完全公开，所以任何人都能对我现在部署的项目进行操作。如果希望项目私有化，那就得给钱给他。所以很多人会买个域名，因为域名可以隐藏项目信息，让人不那么容易找到放在GitHub上的项目</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>首先需要在GitHub上注册一个账号。仅仅需要用到邮箱（QQ邮箱也行），密码（大小写都要有）注册还是很方便的。 注册，邮箱激活，登录后到如下界面，点击如图的新建按钮</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin7xe1iwoj30va0e4mye.jpg\" alt=\"\"></p>\n<blockquote>\n<p>在框框里面输入项目名 格式：GitHub用户名+github.io</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin7z7wodoj30u80jn3zw.jpg\" alt=\"\"></p>\n<blockquote>\n<p>点击Create responsitory 完成GitHub page的创建</p>\n</blockquote>\n<ul>\n<li>ssh的配置<blockquote>\n<p>ssh是用来做免密登录的，整个配置过程就是做四件事情：设置Git的默认邮箱，设置Git的默认用户名（我设置的用户名跟我的GitHub登录的用户名一致，是否可以不一致有时间再验证），生成秘钥对，将公钥放到GitHub里面去，验证。</p>\n<ul>\n<li>设置Git的默认用户名及邮箱</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git config --global user.name &quot;youname&quot;</div><div class=\"line\">git config --global user.email &quot;youeamil@email.com&quot;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>生成密钥的过程 </li>\n</ul>\n<ol>\n<li>查看密钥是否存在</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.ssh</div></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>如果有密钥了删除没有则生成</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C “287329409@qq.com”</div></pre></td></tr></table></figure>\n<blockquote>\n<p>一直按回车，四下</p>\n<ul>\n<li>将公钥丢到GitHub上去</li>\n</ul>\n<ol>\n<li><p>点击setting<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8m2wewqj30vx0jkabo.jpg\" alt=\"\"></p>\n</li>\n<li><p>点击SSH<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8pbsy1mj30yx0mn76f.jpg\" alt=\"\"></p>\n</li>\n<li><p>New SSH key<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8qt6qlhj30wr0gcdhq.jpg\" alt=\"\"></p>\n</li>\n<li><p>title随便填，key填写公钥（id_rsa.pub）里面的全部内容<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8s0lvvej318g0o4427.jpg\" alt=\"\"></p>\n</li>\n</ol>\n<ul>\n<li>验证</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@github.com</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin8w17pe9j30fq03nglm.jpg\" alt=\"\"></p>\n<p>如果不是这样的，ssh重新来过</p>\n</blockquote>\n<h2 id=\"Hexo项目的生成\"><a href=\"#Hexo项目的生成\" class=\"headerlink\" title=\"Hexo项目的生成\"></a>Hexo项目的生成</h2><blockquote>\n<ul>\n<li>安装Hexo  <a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"external\">Hexo参数</a></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Hexo目录结构<br><img src=\"http://ww1.sinaimg.cn/large/005Y4715gy1fin94lrgrwj30ik07igm3.jpg\" alt=\"\"></p>\n<p>编译</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>本地启动,启动后可以在浏览器输入localhost:4000访问</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo s</div></pre></td></tr></table></figure>\n<blockquote>\n<p>部署到gitub page 部署成功后可以访问 例如我的,<a href=\"https://wilnd.github.io\" target=\"_blank\" rel=\"external\">https://wilnd.github.io</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<h2 id=\"hexo写作\"><a href=\"#hexo写作\" class=\"headerlink\" title=\"hexo写作\"></a>hexo写作</h2><blockquote>\n<ul>\n<li>新建文章 <a href=\"https://hexo.io/zh-cn/docs/writing.html\" target=\"_blank\" rel=\"external\">hexo写作</a></li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new post/page/draft &lt;title&gt;</div></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><ul>\n<li>post 这个操作会在source/_post目录下生成一个名为titel 的MarkDowm文件，是用来写文章的</li>\n</ul>\n</li>\n<li><ul>\n<li>page 这个操作会在source目录下生成一个MarkDowm文件，是用来生成大目录的，例如 我的界面的标签功能和目录功能都是通过这个方式来生成的</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj8n0lxcc000210qsfukg36rz","category_id":"cj8n0lxcj000510qsclfobfvn","_id":"cj8n0lxd0000e10qsji63gusi"},{"post_id":"cj8n0lxcg000410qszkf1mn6b","category_id":"cj8n0lxcx000a10qs08w27lpz","_id":"cj8n0lxd6000l10qs03rijjcv"},{"post_id":"cj8n0lxd3000i10qs9i8gmw5v","category_id":"cj8n0lxd2000g10qsoa0187uv","_id":"cj8n0lxdb000q10qsv5bkluxq"},{"post_id":"cj8n0lxcp000710qskt82kz0g","category_id":"cj8n0lxd2000g10qsoa0187uv","_id":"cj8n0lxdg000v10qs1c2zy4ev"},{"post_id":"cj8n0lxcu000810qsjp3r5duw","category_id":"cj8n0lxcx000a10qs08w27lpz","_id":"cj8n0lxdj000z10qsf4c3uoxo"},{"post_id":"cj8n0lxcw000910qs7wjbak8x","category_id":"cj8n0lxcx000a10qs08w27lpz","_id":"cj8n0lxdo001510qsyyhfaxjl"},{"post_id":"cj8n0lxcy000d10qs6fe8r5q5","category_id":"cj8n0lxd2000g10qsoa0187uv","_id":"cj8n0lxdv001b10qsinxvmmj7"},{"post_id":"cj8n0lxd0000f10qsf38tgaom","category_id":"cj8n0lxdo001610qsf171mqut","_id":"cj8n0lxe2001h10qspu1b5u88"},{"post_id":"cj8n0lxd5000k10qsxona3m4s","category_id":"cj8n0lxdv001c10qsjtwurasu","_id":"cj8n0lxe7001n10qs78v987w4"},{"post_id":"cj8n0lxe3001i10qs14zmqkbq","category_id":"cj8n0lxcx000a10qs08w27lpz","_id":"cj8n0lxe9001r10qszk2qwwzp"},{"post_id":"cj8n0lxdb000s10qs8aqlz61n","category_id":"cj8n0lxe4001j10qstz5erj4s","_id":"cj8n0lxea001t10qs4broinfe"},{"post_id":"cj8n0lxdh000w10qsqt3tl81k","category_id":"cj8n0lxe8001p10qs13p9d459","_id":"cj8n0lxed001x10qs47y55pxf"},{"post_id":"cj8n0lxdi000y10qs4taw046v","category_id":"cj8n0lxe8001p10qs13p9d459","_id":"cj8n0lxef002110qsmct5yq0m"},{"post_id":"cj8n0lxdl001210qsv3ypz5mf","category_id":"cj8n0lxe4001j10qstz5erj4s","_id":"cj8n0lxei002510qsyp3vjvri"},{"post_id":"cj8n0lxdm001410qsozbo1bcj","category_id":"cj8n0lxe4001j10qstz5erj4s","_id":"cj8n0lxek002910qsvpepgysy"},{"post_id":"cj8n0lxdq001810qs6ikl9ve7","category_id":"cj8n0lxe4001j10qstz5erj4s","_id":"cj8n0lxem002d10qsirdqztjt"},{"post_id":"cj8n0lxdw001e10qs1acwevg4","category_id":"cj8n0lxe8001p10qs13p9d459","_id":"cj8n0lxeo002h10qsfkk7ndbu"},{"post_id":"cj8n0lxe0001g10qs1r7to4ym","category_id":"cj8n0lxem002e10qsvmfcoxzr","_id":"cj8n0lxeq002l10qse67xpix9"},{"post_id":"cj8n0lxe5001m10qs5v0b3zmw","category_id":"cj8n0lxep002j10qseqpcek8h","_id":"cj8n0lxer002o10qsy0xpq2ha"}],"PostTag":[{"post_id":"cj8n0lxcc000210qsfukg36rz","tag_id":"cj8n0lxco000610qswej0o5di","_id":"cj8n0lxcy000c10qsogbksfl9"},{"post_id":"cj8n0lxcg000410qszkf1mn6b","tag_id":"cj8n0lxcx000b10qsmi4a81m1","_id":"cj8n0lxd4000j10qsw9qdqi1e"},{"post_id":"cj8n0lxd3000i10qs9i8gmw5v","tag_id":"cj8n0lxd3000h10qsguvfvknm","_id":"cj8n0lxd8000o10qs7nbddshj"},{"post_id":"cj8n0lxcp000710qskt82kz0g","tag_id":"cj8n0lxd3000h10qsguvfvknm","_id":"cj8n0lxdb000r10qsv0n4su2z"},{"post_id":"cj8n0lxcu000810qsjp3r5duw","tag_id":"cj8n0lxcx000b10qsmi4a81m1","_id":"cj8n0lxdi000x10qsqc1oikse"},{"post_id":"cj8n0lxcw000910qs7wjbak8x","tag_id":"cj8n0lxcx000b10qsmi4a81m1","_id":"cj8n0lxdm001310qs87xrv6of"},{"post_id":"cj8n0lxcy000d10qs6fe8r5q5","tag_id":"cj8n0lxd3000h10qsguvfvknm","_id":"cj8n0lxdt001910qsbl31ztv3"},{"post_id":"cj8n0lxd0000f10qsf38tgaom","tag_id":"cj8n0lxdo001710qsttjr2az2","_id":"cj8n0lxdy001f10qsyn5u8dv7"},{"post_id":"cj8n0lxd5000k10qsxona3m4s","tag_id":"cj8n0lxdw001d10qsgbs6ieee","_id":"cj8n0lxe5001l10qsjyiv09bz"},{"post_id":"cj8n0lxe3001i10qs14zmqkbq","tag_id":"cj8n0lxcx000b10qsmi4a81m1","_id":"cj8n0lxe7001o10qs10hvcya1"},{"post_id":"cj8n0lxdb000s10qs8aqlz61n","tag_id":"cj8n0lxe4001k10qs69hfjfz7","_id":"cj8n0lxea001s10qscj20ejtk"},{"post_id":"cj8n0lxdh000w10qsqt3tl81k","tag_id":"cj8n0lxe8001q10qsfeilhfdk","_id":"cj8n0lxed001w10qsze63uboo"},{"post_id":"cj8n0lxdi000y10qs4taw046v","tag_id":"cj8n0lxe8001q10qsfeilhfdk","_id":"cj8n0lxef002010qsdvw60cd9"},{"post_id":"cj8n0lxdl001210qsv3ypz5mf","tag_id":"cj8n0lxe4001k10qs69hfjfz7","_id":"cj8n0lxei002410qsdc83gdy9"},{"post_id":"cj8n0lxdm001410qsozbo1bcj","tag_id":"cj8n0lxe4001k10qs69hfjfz7","_id":"cj8n0lxek002810qsz08t7y82"},{"post_id":"cj8n0lxdq001810qs6ikl9ve7","tag_id":"cj8n0lxe4001k10qs69hfjfz7","_id":"cj8n0lxel002c10qsaeouzxty"},{"post_id":"cj8n0lxdu001a10qswqt3pohs","tag_id":"cj8n0lxdw001d10qsgbs6ieee","_id":"cj8n0lxeo002g10qs6jjqmp7l"},{"post_id":"cj8n0lxdw001e10qs1acwevg4","tag_id":"cj8n0lxe8001q10qsfeilhfdk","_id":"cj8n0lxeq002k10qsgtw3mxob"},{"post_id":"cj8n0lxe0001g10qs1r7to4ym","tag_id":"cj8n0lxeo002i10qsnlr1zirb","_id":"cj8n0lxer002n10qscuz7ul60"},{"post_id":"cj8n0lxe5001m10qs5v0b3zmw","tag_id":"cj8n0lxeq002m10qslp1w4rw5","_id":"cj8n0lxer002p10qsqubft7jj"}],"Tag":[{"name":"tool","_id":"cj8n0lxco000610qswej0o5di"},{"name":"javaWeb","_id":"cj8n0lxcx000b10qsmi4a81m1"},{"name":"通信","_id":"cj8n0lxd3000h10qsguvfvknm"},{"name":"设计模式","_id":"cj8n0lxdo001710qsttjr2az2"},{"name":"随笔集","_id":"cj8n0lxdw001d10qsgbs6ieee"},{"name":"修炼","_id":"cj8n0lxe4001k10qs69hfjfz7"},{"name":"hadoop","_id":"cj8n0lxe8001q10qsfeilhfdk"},{"name":"美文","_id":"cj8n0lxeo002i10qsnlr1zirb"},{"name":"博客搭建","_id":"cj8n0lxeq002m10qslp1w4rw5"}]}}